<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" IsAbstract="false" Label="Compare List Children" TypeName="CompareListChildren" TypePath="base.list.object" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
  </Meta>
  <Data Label="Path" VariableName="path">
    <Meta>
      <Type>String</Type>
    </Meta>
  </Data>
  <Data Label="Type" VariableName="type">
    <Meta>
      <Type>String</Type>
    </Meta>
  </Data>
  <Data Label="FQ Type Name" VariableName="fQTypeName">
    <Meta>
      <Type>String</Type>
    </Meta>
  </Data>
  <Service Label="Compare List Children" TypeName="CompareListChildren">
    <Operation IsStatic="false" Label="Instantiate" Name="instantiate">
      <Input>
        <Data ID="45" IsList="true" Label="First" ReferenceName="AnyType" ReferencePath="base" VariableName="anyType45">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
        <Data ID="49" IsList="true" Label="Second" ReferenceName="AnyType" ReferencePath="base" VariableName="anyType49">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
      </Input>
      <Output>
        <Data ID="73" Label="Compare List Children" ReferenceName="CompareListChildren" ReferencePath="base.list.object" VariableName="compareListChildren73"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">return instantiateImpl("/", (List)anyType45, (List)anyType49 );
}

private List first;
private List second;

public CompareListChildren instantiateImpl(String path, List first, List second) {
  this.first = first;
  this.second = second;
  this.path = path;
  List l = (first != null &amp;&amp; ! first.isEmpty() ? first : second );
  this.type = l.get(0).getClass().getSimpleName();
  this.fQTypeName = l.get(0).getClass().getName();
  return this;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Compare Index" Name="compareIndex">
      <Input/>
      <Output>
        <Data ID="970" IsList="true" Label="Children" ReferenceName="CompareChildren" ReferencePath="base.list.object" VariableName="compareChildren970"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">XynaObjectList&lt;CompareChildren&gt; ccs = new XynaObjectList&lt;CompareChildren&gt;(CompareChildren.class);

int fs = first == null ? -1 : first.size();
int ss = second == null ? -1 : second.size();
int max = fs &lt; ss ? ss : fs;
String pathStart = this.path.substring(0,this.path.length()-1)+"[";
for( int idx = 0; idx&lt;max; ++idx) {
  XynaObject f = idx &lt; fs ? (XynaObject)first.get(idx) : null;
  XynaObject s = idx &lt; ss ? (XynaObject)second.get(idx) : null;
  ccs.add(new CompareChildren().instantiateImpl(pathStart+idx+"]/", f, s));
}
return ccs;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Compare by Comparator" Name="compareByComparator">
      <Input>
        <Data ID="1000" Label="Comparator" ReferenceName="Comparator" ReferencePath="base.list.comparator" VariableName="comparator1000"/>
        <Data ID="1005" Label="Object Comparer" ReferenceName="ObjectComparer" ReferencePath="base.list.object" VariableName="objectComparer1005"/>
      </Input>
      <Output>
        <Data ID="995" IsList="true" Label="Children" ReferenceName="CompareChildren" ReferencePath="base.list.object" VariableName="compareChildren995"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">XynaObjectList&lt;CompareChildren&gt; ccs = new XynaObjectList&lt;CompareChildren&gt;(CompareChildren.class);
boolean textualIndex = objectComparer1005.getTextualListIndices();
String pathStart = this.path.substring(0,this.path.length()-1)+"[";
Set&lt;XynaObject&gt; lookup = new java.util.LinkedHashSet&lt;&gt;(second == null ? java.util.Collections.emptyList() : second);
base.list.comparator.Comparator comparator = comparator1000;
base.list.object.ListObjectComparator loComparator = (base.list.object.ListObjectComparator) (comparator1000 instanceof base.list.object.ListObjectComparator ? comparator : null);
int idx = 0;
if( first != null ) {
  for( ; idx&lt;first.size(); ++idx) {
    XynaObject xoF = (XynaObject)first.get(idx);
    java.util.Iterator&lt;XynaObject&gt; lIter = lookup.iterator();
    boolean found = false;
    String index = generateIndex(idx, textualIndex, xoF, loComparator);
    while( lIter.hasNext() ) {
      XynaObject xoL = lIter.next();
      if( comparator.compare(xoF, xoL) == 0 ) {
        ccs.add(new CompareChildren().instantiateImpl(pathStart+index+"]/", xoF, xoL));
        found = true;
        lIter.remove();
        break;
      }
    }
    if( !found ) {
      ccs.add(new CompareChildren().instantiateImpl(pathStart+index+"]/", xoF, null));
    }
  }
}
for( XynaObject xoL : lookup ) {
  ++idx;
  String index = generateIndex(idx, textualIndex, xoL, loComparator);
  ccs.add(new CompareChildren().instantiateImpl(pathStart+index+"]/", null, xoL));
}

return ccs;
}

private String generateIndex(int idx, boolean textualIndex, XynaObject xo, base.list.object.ListObjectComparator loComparator) {
  if( !textualIndex || loComparator == null ) {
    return String.valueOf(idx);
  } else {
    return loComparator.generateIndex(xo);
 }</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Compare Recursively" Name="compareRecursively">
      <Input>
        <Data ID="935" Label="Object Comparer" ReferenceName="ObjectComparer" ReferencePath="base.list.object" VariableName="objectComparer935"/>
      </Input>
      <Output>
        <Data ID="925" IsList="true" Label="Simple Compare Result" ReferenceName="SimpleCompareResult" ReferencePath="base.list.object" VariableName="simpleCompareResult925"/>
      </Output>
      <Call ReferenceName="CompareListRecursively" ReferencePath="base.list.object"/>
    </Operation>
  </Service>
</DataType>
