# 
# This file contains rules used by xact.connection.RuleBasedDeviceType.
# The rules determine the behaviour of the device in regards to
# 1. Prompt detection and automatic responses
# 2. Multiline command detection
# 
# Lines beginning with # are comments.
# Empty lines are ignored.
# Encoding: 
# This file is parsed in UTF8.
# The following characters will be unescaped (must be escaped in the rules):
# ; -> \;
# \n, \r, \t
# \ -> \\
# whitespaces inside of rules/regular expressions will not be removed.
#
# All rules will be tried in the same order as they are defined here.
# Only the first matching rule will be used.
# 
#
#
# PROMPTS-Rules:
# ---------------------
# Prompt-Rules consist of up to 4 parts, separated by semicolons (;):
# 1. command pattern (regexp): The rule is used, if the current command matches this pattern
#    Examples:
#    - Empty Pattern means that the command is a single line break
#    - Pattern = ".*": All commands match this pattern, even multi line commands
# 2. prompt pattern (regexp): The rule is used, if the current prompt matches this pattern
#    Examples:
#    - ".*\nPassword: ": If the prompt asks for a password, a pattern like this could be used
# 3. resulting state (optional): The device type holds a state that is set by matching rules that define a state.
#    If the state is empty or not set (no second semicolon), the state will not change, when this prompt is detected.
#    This information is used by the xact.connection:Send Workflow to ensure (if validation is enabled in the SendParameters)
#    that the device does not change its state during the execution of a set of commands.
# 4. automatic response (optional): When the prompt is successfuly detected by matching 1. and 2., this automatic response
#    is sent to the device.
#
#
# Examples:
# 1. Does not set state, but has automatic response:
#.*;Are you sure you want to restore factory settings?(Y/N):;;Y
# 2. Differentiate states between config mode and normal mode:
# .*;.*gippe9(config.*)# ;Config
# .*;.*gippe9# ;Normal
#
#
# Attention: Please note that prompts may typically contain the "echo" of the command. Thus the prompt patterns typically start with .*
#
#
#
# MULTILINE-Rules:
# ---------------------
# Multiline detection is done in the partitionCommands() service on the commands contained in the document 
# that is the input for the xact.connection.Send Workflow.
# Multiline Rules consist of 3 parts, separated by semicolons:
# 1. command start pattern (regexp)
# 2. middle pattern (regexp)
# 3. end pattern (regexp)
# The document is split in lines separated by linebreaks ('\n'). Each line is either part of a multiline command or
# a standalone command. To detect the lines of a multiline command the rules are used as follows:
# - Check if a line matches the start pattern.
# - if true try to match the following lines to the middle pattern, until the end pattern is found
# - A multiline command is successfully found when the start pattern and end pattern is found separated only by middle patterns.
# - There must not be a line that matches the middle pattern.
# Example:
# echo "first
# second"
# could be matched by the rule (start with quotes, end with quotes, don't have quotes in between):
# [^"]*"[^"]*;[^"]*;.*"
#
# When a multiline command is sent, there is no need to try to detect prompts in between sending the lines of the command.
#
# IGNORES-Rules
# Partial text of the response of the device will be ignored for prompt detection if they match one of the Ignore Rules.
# A Ignore Rule consists of 2 parts, separated by semicolon:
# 1. command pattern (regexp)
# 2. pattern for the text to ignore (regexp)
# Ignore Patterns do not apply to single lines but to the whole response. 
#



PROMPTS
#<command pattern>;<prompt pattern>[;<state>[;<autoresponse>]]

      
# TODO commands vorne angeben, damit es nicht zu viele treffer geben kann
.*;(.*[\\r\\n]\\s*)?Username:\\s?
.*;(.*[\\r\\n]\\s*)?Password:\\s?
.*;.*\\[confirm\\]\\s?
.*;.*\\[yes/no\\]:\\s?
.*;(.*[\\r\\n]\\s*)?S/Key challenge:\\s?
.*;(.*[\\r\\n]\\s*)?Host name or IP address (\\(.*\\): )?\\[.*\\]\\?\\s*
.*;(.*[\\r\\n]\\s*)?(Destination|Source) file name (\\(.*\\): )?\\[.*\\]\\?\\s*


.*;(.*[\\n\\r]+)?([A-z0-9]+/){3}CPU[0-9]:[A-z0-9-]+\\(admin\\)#\\s*;Administraion EXEC Mode
.*;(.*[\\n\\r]+)?([A-z0-9]+/){3}CPU[0-9]:[A-z0-9-]+#\\s*;EXEC Mode
.*;(.*[\\n\\r]+)?([A-z0-9]+/){3}CPU[0-9]:[A-z0-9-]+\\(config[^\\(\\)]*\\)#\\s*;Configuration Mode
.*;(.*[\\n\\r]+)?([A-z0-9]+/){3}CPU[0-9]:[A-z0-9-]+\\(admin-config\\)#\\s*;Administraion Configuration Mode 

#autoresponse: leerzeichen (letzter parameter ist hier nicht gut lesbar, ist aber ein leerzeichen!)
show.*;.*--More--\\s*;; 

MULTILINE
#<command start pattern>;<middle pattern>;<end pattern>
^\\s*banner\\s+[\\w]+\\s+\\+;[^\\+]*;\\+
^\\s*banner\\s+[\\w]+\\s+\\^;[^\\^]*;\\^

IGNORES
#<command pattern>;<ignore pattern>

