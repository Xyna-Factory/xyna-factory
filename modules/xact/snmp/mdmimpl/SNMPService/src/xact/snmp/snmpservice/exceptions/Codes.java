/*
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2022 GIP SmartMercial GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
package xact.snmp.snmpservice.exceptions;

import java.io.InputStream;
import java.util.Enumeration;
import com.gip.xyna.utils.exceptions.ExceptionStorage;
import java.net.URLConnection;
import java.net.URL;
import org.apache.log4j.Logger;

//DO NOT CHANGE
//GENERATED BY com.gip.xyna.utils.exceptions.utils.codegen.JavaClass 2015-08-03T14:38:09Z;
public class Codes {

  public static Logger logger = Logger.getLogger(Codes.class.getName());
  static {
    {
      try {
        Enumeration<URL> urls = Codes.class.getClassLoader().getResources("Exceptions.xml");
        while (urls.hasMoreElements()) {
          URL url = urls.nextElement();
          if (url != null) {
            if (logger.isTraceEnabled()) {
              logger.trace("trying to parse url " + url + ", path= " + url.getPath());
            }
            URLConnection urlcon = url.openConnection();
            //deactivate cache to not get an old version
            boolean b = urlcon.getUseCaches();
            urlcon.setUseCaches(false);
            try {
              InputStream is = urlcon.getInputStream();
              try {
                if (is == null) {
                  throw new Exception("Resource Exceptions.xml not found.");
                }
                ExceptionStorage.loadFromStream(is, "Exceptions.xml");
              } finally {
                is.close();
              }
            } finally {
              //reset caching!
              try {
                urlcon.setUseCaches(b);
              } catch (Exception e) {
                if (logger.isTraceEnabled()) {
                  logger.trace("could not reset urlConnection.useCaches after parsing resource. this is usually okay.", e);
                }
              }
            }
          } else {
            throw new Exception(" Resource Exceptions.xml not found.");
          }
        }
      } catch (Exception e) {
        logger.error("Error loading Errormessages.", e);
        e.printStackTrace();
      }
    }
  }



}
