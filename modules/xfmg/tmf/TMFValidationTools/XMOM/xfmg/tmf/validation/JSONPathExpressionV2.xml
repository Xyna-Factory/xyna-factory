<?xml version = '1.0' encoding = 'UTF-8'?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--><DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" IsAbstract="false" Label="JSONPathExpressionV2" TypeName="JSONPathExpressionV2" TypePath="xfmg.tmf.validation" Version="1.8">
   <Meta>
      <IsServiceGroupOnly>false</IsServiceGroupOnly>
   </Meta>
   <Data IsList="true" Label="json Paths" VariableName="jsonPaths">
      <Meta>
         <Type>String</Type>
      </Meta>
   </Data>
   <Data Label="expression" VariableName="expression">
      <Meta>
         <Type>String</Type>
         <Documentation>Expression to evaluate:
Syntax:
expression ::= "(" expression ")" |
                        function "(" expression ("," expression)* ")" |
                        value |
                        expression infix expression |
						pathref
function ::= builtin | userdefined
builtin ::= "EVAL" | "LEN" | "NOT" | "CONCAT" | "PROPERTY" | "ISNULL" | "MATCH"
infix ::= "+" | "-" | "*" | "/" | "&amp;gt;" | "&amp;lt;" | "&amp;gt;=" | "&amp;lt;=" | "==" | "!=" | "=~" | "~=" | "AND" | "&amp;amp;&amp;amp;" | "OR" | "||" 
value ::= "\"" string "\"" | number | "true" | "false"
pathref ::= "$" integer

Quotations and backslashes in strings have to be escaped with backslash
number can be float (i.e. negative and with negative exponent. Example: -3.4e-4)

EVAL([&amp;lt;json&amp;gt;, ] pathref)
EVAL expects either one argument as pathref ($n referring to the n-th entry of the list of json paths) or a json as an additional first argument. If no json is provided, the default json is used to evaluate the expression.

LEN returns the length of the argument, either length of array or length of string.

NOT negates the argument, assuming it is of type (or convertable to) boolean

CONCAT concatenates all arguments as strings

PROPERTY&amp;lt;propertyName&amp;gt;[, &amp;lt;defaultValue&amp;gt;])
PROPERTY returns the value of the xyna property given by the first argument. A second argument is optional for the default value to be returned if the property is not set (or null).

ISNULL(&amp;lt;value&amp;gt;, &amp;lt;substitution value&amp;gt;)
ISNULL replaces the value with the substitution value if the value is null.

MATCH(&amp;lt;value&amp;gt;, &amp;lt;regex&amp;gt;)
Matches the value against the regular expression, returns true or false.
Is the same as 
&amp;lt;value&amp;gt; =~ &amp;lt;regex&amp;gt;
and 
&amp;lt;regex&amp;gt; ~= &amp;lt;value&amp;gt;

Operator precedence of infix functions: ("(",")") (*/) (+-) (&amp;gt;,...) (==,!=,~=,=~) (AND,&amp;amp;&amp;amp;) (OR,||)

Using AND/OR/&amp;amp;&amp;amp;/|| the second Argument is evaluated lazily.

Userdefined functions can be integrated via workflows: Define workflows in the package given by the xyna property xfmg.tmf.validation.constraint.function.package. Their simple name is then the name of the function that can be used in expressions. The workflow has to have a single base.Text output and either 1-4 base.Text inputs or a base.Text list as input. The workflow has to be reachable via runtime context dependencies from the root order context of the order evaluating the expression.
</Documentation>
      </Meta>
   </Data>
</DataType>