<?xml version = '1.0' encoding = 'UTF-8'?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" BaseTypeName="OASBaseType" BaseTypePath="xmcp.oas.datatype" IsAbstract="false" Label="FeatureSpecification" TypeName="FeatureSpecification" TypePath="internalized.tmf633.datamodel" Version="1.8">
   <Meta>
      <IsServiceGroupOnly>false</IsServiceGroupOnly>
      <Documentation>Specification for resource, service or product features
        </Documentation>
   </Meta>
   <Data Label="id" VariableName="id">
      <Meta>
         <Type>String</Type>
         <Documentation>Identifier of the feature specification. Must be locally unique within the containing specification, thus allowing direct access to the feature spec.
        </Documentation>
      </Meta>
   </Data>
   <Data Label="isBundle" VariableName="isBundle">
      <Meta>
         <Type>Boolean</Type>
         <Documentation>A flag indicating if this is a feature group (true) or not (false)
        </Documentation>
      </Meta>
   </Data>
   <Data Label="isEnabled" VariableName="isEnabled">
      <Meta>
         <Type>Boolean</Type>
         <Documentation>A flag indicating if the feature is enabled (true) or not (false)
        </Documentation>
      </Meta>
   </Data>
   <Data Label="name" VariableName="name">
      <Meta>
         <Type>String</Type>
         <Documentation>Unique name given to the feature specification
        </Documentation>
      </Meta>
   </Data>
   <Data Label="version" VariableName="version">
      <Meta>
         <Type>String</Type>
         <Documentation>Version of the feature specification
        </Documentation>
      </Meta>
   </Data>
   <Data IsList="true" Label="constraint" ReferenceName="Constraint" ReferencePath="internalized.tmf633.datamodel" VariableName="constraint">
      <Meta>
         <Documentation>This is a list of feature constraints
        </Documentation>
      </Meta>
   </Data>
   <Data IsList="true" Label="featureSpecCharacteristic" ReferenceName="FeatureSpecificationCharacteristic" ReferencePath="internalized.tmf633.datamodel" VariableName="featureSpecCharacteristic">
      <Meta>
         <Documentation>This is a list of characteristics for a particular feature
        </Documentation>
      </Meta>
   </Data>
   <Data IsList="true" Label="featureSpecRelationship" ReferenceName="FeatureSpecificationRelationship" ReferencePath="internalized.tmf633.datamodel" VariableName="featureSpecRelationship">
      <Meta>
         <Documentation>A dependency, exclusivity or aggratation relationship between/among feature specifications.
        </Documentation>
      </Meta>
   </Data>
   <Data Label="validFor" ReferenceName="TimePeriod" ReferencePath="internalized.tmf633.datamodel" VariableName="validFor">
      <Meta>
         <Documentation/>
      </Meta>
   </Data>
   <Service Label="FeatureSpecification" TypeName="FeatureSpecification">
      <Operation IsStatic="false" Label="Validate" Name="validate">
         <Input/>
         <Output>
            <Data ID="1" Label="OAS Validation Result" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype" VariableName="oASValidationResult1"/>
         </Output>
         <SourceCode>
            <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String>());
// validate FeatureSpecification.id of type String
try {
    var validator_id = new com.gip.xyna.openapi.StringTypeValidator();
    validator_id.setName("id");
    validator_id.setValue(getId());
    result.getErrorMessages().addAll(validator_id.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecification.id");
}

// validate FeatureSpecification.isBundle of type Boolean
try {
    var validator_isBundle = new com.gip.xyna.openapi.BooleanTypeValidator();
    validator_isBundle.setName("isBundle");
    validator_isBundle.setValue(getIsBundle());
    result.getErrorMessages().addAll(validator_isBundle.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecification.isBundle");
}

// validate FeatureSpecification.isEnabled of type Boolean
try {
    var validator_isEnabled = new com.gip.xyna.openapi.BooleanTypeValidator();
    validator_isEnabled.setName("isEnabled");
    validator_isEnabled.setValue(getIsEnabled());
    result.getErrorMessages().addAll(validator_isEnabled.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecification.isEnabled");
}

// validate FeatureSpecification.name of type String
try {
    var validator_name = new com.gip.xyna.openapi.StringTypeValidator();
    validator_name.setName("name");
    validator_name.setValue(getName());
    result.getErrorMessages().addAll(validator_name.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecification.name");
}

// validate FeatureSpecification.version of type String
try {
    var validator_version = new com.gip.xyna.openapi.StringTypeValidator();
    validator_version.setName("version");
    validator_version.setValue(getVersion());
    result.getErrorMessages().addAll(validator_version.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecification.version");
}

// validate FeatureSpecification.constraint of type Constraint
try {
    List&lt;? extends internalized.tmf633.datamodel.Constraint> constraint = getConstraint();
    if (constraint != null) {
        for (internalized.tmf633.datamodel.Constraint obj : constraint) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecification.constraint");
}

// validate FeatureSpecification.featureSpecCharacteristic of type FeatureSpecificationCharacteristic
try {
    List&lt;? extends internalized.tmf633.datamodel.FeatureSpecificationCharacteristic> featureSpecCharacteristic = getFeatureSpecCharacteristic();
    if (featureSpecCharacteristic != null) {
        for (internalized.tmf633.datamodel.FeatureSpecificationCharacteristic obj : featureSpecCharacteristic) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecification.featureSpecCharacteristic");
}

// validate FeatureSpecification.featureSpecRelationship of type FeatureSpecificationRelationship
try {
    List&lt;? extends internalized.tmf633.datamodel.FeatureSpecificationRelationship> featureSpecRelationship = getFeatureSpecRelationship();
    if (featureSpecRelationship != null) {
        for (internalized.tmf633.datamodel.FeatureSpecificationRelationship obj : featureSpecRelationship) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecification.featureSpecRelationship");
}

// validate FeatureSpecification.validFor of type TimePeriod
try {
    internalized.tmf633.datamodel.TimePeriod validFor = getValidFor();
    if (validFor != null) {
        result.getErrorMessages().addAll(validFor.validate().getErrorMessages());
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecification.validFor");
}

return result.getResult();
                </CodeSnippet>
         </SourceCode>
      </Operation>
   </Service>
</DataType>