<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--><DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" BaseTypeName="OASBaseType" BaseTypePath="xmcp.oas.datatype" IsAbstract="false" Label="CharacteristicSpecificationRelationship" TypeName="CharacteristicSpecificationRelationship" TypePath="internalized.tmf633.datamodel" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
    <Documentation>An aggregation, migration, substitution, dependency or exclusivity relationship between/among Characteristic specifications. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID.
        </Documentation>
  </Meta>
  <Data Label="characteristicSpecificationId" VariableName="characteristicSpecificationId">
    <Meta>
      <Type>String</Type>
      <Documentation>Unique identifier of the characteristic within the specification
        </Documentation>
    </Meta>
  </Data>
  <Data Label="name" VariableName="name">
    <Meta>
      <Type>String</Type>
      <Documentation>Name of the target characteristic within the specification
        </Documentation>
    </Meta>
  </Data>
  <Data Label="parentSpecificationHref" VariableName="parentSpecificationHref">
    <Meta>
      <Type>String</Type>
      <Documentation>Hyperlink reference to the parent specification containing the target characteristic
format: uri
        </Documentation>
    </Meta>
  </Data>
  <Data Label="parentSpecificationId" VariableName="parentSpecificationId">
    <Meta>
      <Type>String</Type>
      <Documentation>Unique identifier of the parent specification containing the target characteristic
        </Documentation>
    </Meta>
  </Data>
  <Data Label="relationshipType" VariableName="relationshipType">
    <Meta>
      <Type>String</Type>
      <Documentation>Type of relationship such as aggregation, migration, substitution, dependency, exclusivity
        </Documentation>
    </Meta>
  </Data>
  <Data Label="validFor" ReferenceName="TimePeriod" ReferencePath="internalized.tmf633.datamodel" VariableName="validFor">
    <Meta>
      <Documentation/>
    </Meta>
  </Data>
  <Service Label="CharacteristicSpecificationRelationship" TypeName="CharacteristicSpecificationRelationship">
    <Operation IsStatic="false" Label="Validate" Name="validate">
      <Input/>
      <Output>
        <Data ID="1" Label="OAS Validation Result" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype" VariableName="oASValidationResult1"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String&gt;());
// validate CharacteristicSpecificationRelationship.characteristicSpecificationId of type String
try {
    var validator_characteristicSpecificationId = new com.gip.xyna.openapi.StringTypeValidator();
    validator_characteristicSpecificationId.setName("characteristicSpecificationId");
    validator_characteristicSpecificationId.setValue(getCharacteristicSpecificationId());
    result.getErrorMessages().addAll(validator_characteristicSpecificationId.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate CharacteristicSpecificationRelationship.characteristicSpecificationId");
}

// validate CharacteristicSpecificationRelationship.name of type String
try {
    var validator_name = new com.gip.xyna.openapi.StringTypeValidator();
    validator_name.setName("name");
    validator_name.setValue(getName());
    result.getErrorMessages().addAll(validator_name.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate CharacteristicSpecificationRelationship.name");
}

// validate CharacteristicSpecificationRelationship.parentSpecificationHref of type String
try {
    var validator_parentSpecificationHref = new com.gip.xyna.openapi.StringTypeValidator();
    validator_parentSpecificationHref.setName("parentSpecificationHref");
    validator_parentSpecificationHref.setValue(getParentSpecificationHref());
    validator_parentSpecificationHref.setFormat("uri");
    result.getErrorMessages().addAll(validator_parentSpecificationHref.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate CharacteristicSpecificationRelationship.parentSpecificationHref");
}

// validate CharacteristicSpecificationRelationship.parentSpecificationId of type String
try {
    var validator_parentSpecificationId = new com.gip.xyna.openapi.StringTypeValidator();
    validator_parentSpecificationId.setName("parentSpecificationId");
    validator_parentSpecificationId.setValue(getParentSpecificationId());
    result.getErrorMessages().addAll(validator_parentSpecificationId.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate CharacteristicSpecificationRelationship.parentSpecificationId");
}

// validate CharacteristicSpecificationRelationship.relationshipType of type String
try {
    var validator_relationshipType = new com.gip.xyna.openapi.StringTypeValidator();
    validator_relationshipType.setName("relationshipType");
    validator_relationshipType.setValue(getRelationshipType());
    result.getErrorMessages().addAll(validator_relationshipType.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate CharacteristicSpecificationRelationship.relationshipType");
}

// validate CharacteristicSpecificationRelationship.validFor of type TimePeriod
try {
    internalized.tmf633.datamodel.TimePeriod validFor = getValidFor();
    if (validFor != null) {
        result.getErrorMessages().addAll(validFor.validate().getErrorMessages());
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate CharacteristicSpecificationRelationship.validFor");
}

return result.getResult();
                </CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
