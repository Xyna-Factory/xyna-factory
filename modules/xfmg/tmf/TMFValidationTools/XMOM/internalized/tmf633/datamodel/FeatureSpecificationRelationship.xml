<?xml version = '1.0' encoding = 'UTF-8'?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" BaseTypeName="OASBaseType" BaseTypePath="xmcp.oas.datatype" IsAbstract="false" Label="FeatureSpecificationRelationship" TypeName="FeatureSpecificationRelationship" TypePath="internalized.tmf633.datamodel" Version="1.8">
   <Meta>
      <IsServiceGroupOnly>false</IsServiceGroupOnly>
      <Documentation>Relationship between feature specifications
        </Documentation>
   </Meta>
   <Data Label="featureId" VariableName="featureId">
      <Meta>
         <Type>String</Type>
         <Documentation>Unique identifier of the target feature specification.
        </Documentation>
      </Meta>
   </Data>
   <Data Label="name" VariableName="name">
      <Meta>
         <Type>String</Type>
         <Documentation>This is the name of the target feature specification.
required
        </Documentation>
      </Meta>
   </Data>
   <Data Label="parentSpecificationHref" VariableName="parentSpecificationHref">
      <Meta>
         <Type>String</Type>
         <Documentation>Hyperlink reference to the parent specification containing the target feature
format: uri
        </Documentation>
      </Meta>
   </Data>
   <Data Label="parentSpecificationId" VariableName="parentSpecificationId">
      <Meta>
         <Type>String</Type>
         <Documentation>Unique identifier of the parent specification containing the target feature
        </Documentation>
      </Meta>
   </Data>
   <Data Label="relationshipType" VariableName="relationshipType">
      <Meta>
         <Type>String</Type>
         <Documentation>This is the type of the feature specification relationship.
required
        </Documentation>
      </Meta>
   </Data>
   <Data Label="validFor" ReferenceName="TimePeriod" ReferencePath="internalized.tmf633.datamodel" VariableName="validFor">
      <Meta>
         <Documentation/>
      </Meta>
   </Data>
   <Service Label="FeatureSpecificationRelationship" TypeName="FeatureSpecificationRelationship">
      <Operation IsStatic="false" Label="Validate" Name="validate">
         <Input/>
         <Output>
            <Data ID="1" Label="OAS Validation Result" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype" VariableName="oASValidationResult1"/>
         </Output>
         <SourceCode>
            <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String>());
// validate FeatureSpecificationRelationship.featureId of type String
try {
    var validator_featureId = new com.gip.xyna.openapi.StringTypeValidator();
    validator_featureId.setName("featureId");
    validator_featureId.setValue(getFeatureId());
    result.getErrorMessages().addAll(validator_featureId.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecificationRelationship.featureId");
}

// validate FeatureSpecificationRelationship.name of type String
try {
    var validator_name = new com.gip.xyna.openapi.StringTypeValidator();
    validator_name.setName("name");
    validator_name.setValue(getName());
    validator_name.setRequired();
    result.getErrorMessages().addAll(validator_name.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecificationRelationship.name");
}

// validate FeatureSpecificationRelationship.parentSpecificationHref of type String
try {
    var validator_parentSpecificationHref = new com.gip.xyna.openapi.StringTypeValidator();
    validator_parentSpecificationHref.setName("parentSpecificationHref");
    validator_parentSpecificationHref.setValue(getParentSpecificationHref());
    validator_parentSpecificationHref.setFormat("uri");
    result.getErrorMessages().addAll(validator_parentSpecificationHref.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecificationRelationship.parentSpecificationHref");
}

// validate FeatureSpecificationRelationship.parentSpecificationId of type String
try {
    var validator_parentSpecificationId = new com.gip.xyna.openapi.StringTypeValidator();
    validator_parentSpecificationId.setName("parentSpecificationId");
    validator_parentSpecificationId.setValue(getParentSpecificationId());
    result.getErrorMessages().addAll(validator_parentSpecificationId.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecificationRelationship.parentSpecificationId");
}

// validate FeatureSpecificationRelationship.relationshipType of type String
try {
    var validator_relationshipType = new com.gip.xyna.openapi.StringTypeValidator();
    validator_relationshipType.setName("relationshipType");
    validator_relationshipType.setValue(getRelationshipType());
    validator_relationshipType.setRequired();
    result.getErrorMessages().addAll(validator_relationshipType.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecificationRelationship.relationshipType");
}

// validate FeatureSpecificationRelationship.validFor of type TimePeriod
try {
    internalized.tmf633.datamodel.TimePeriod validFor = getValidFor();
    if (validFor != null) {
        result.getErrorMessages().addAll(validFor.validate().getErrorMessages());
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate FeatureSpecificationRelationship.validFor");
}

return result.getResult();
                </CodeSnippet>
         </SourceCode>
      </Operation>
   </Service>
</DataType>