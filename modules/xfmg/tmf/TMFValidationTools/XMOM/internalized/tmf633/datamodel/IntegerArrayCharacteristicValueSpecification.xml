<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--><DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" BaseTypeName="CharacteristicValueSpecification" BaseTypePath="internalized.tmf633.datamodel" IsAbstract="false" Label="IntegerArrayCharacteristicValueSpecification" TypeName="IntegerArrayCharacteristicValueSpecification" TypePath="internalized.tmf633.datamodel" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
    <Documentation>This data type is "allOf": CharacteristicValueSpecification
        </Documentation>
  </Meta>
  <Data IsList="true" Label="value" VariableName="value">
    <Meta>
      <Type>Long</Type>
      <Documentation/>
    </Meta>
  </Data>
  <Service Label="IntegerArrayCharacteristicValueSpecification" TypeName="IntegerArrayCharacteristicValueSpecification">
    <Operation IsStatic="false" Label="Validate" Name="validate">
      <Input/>
      <Output>
        <Data ID="1" Label="OAS Validation Result" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype" VariableName="oASValidationResult1"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String&gt;());
// validate IntegerArrayCharacteristicValueSpecification.isDefault of type Boolean
try {
    var validator_isDefault = new com.gip.xyna.openapi.BooleanTypeValidator();
    validator_isDefault.setName("isDefault");
    validator_isDefault.setValue(getIsDefault());
    result.getErrorMessages().addAll(validator_isDefault.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.isDefault");
}

// validate IntegerArrayCharacteristicValueSpecification.rangeInterval of type String
try {
    var validator_rangeInterval = new com.gip.xyna.openapi.StringTypeValidator();
    validator_rangeInterval.setName("rangeInterval");
    validator_rangeInterval.setValue(getRangeInterval());
    result.getErrorMessages().addAll(validator_rangeInterval.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.rangeInterval");
}

// validate IntegerArrayCharacteristicValueSpecification.regex of type String
try {
    var validator_regex = new com.gip.xyna.openapi.StringTypeValidator();
    validator_regex.setName("regex");
    validator_regex.setValue(getRegex());
    result.getErrorMessages().addAll(validator_regex.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.regex");
}

// validate IntegerArrayCharacteristicValueSpecification.unitOfMeasure of type String
try {
    var validator_unitOfMeasure = new com.gip.xyna.openapi.StringTypeValidator();
    validator_unitOfMeasure.setName("unitOfMeasure");
    validator_unitOfMeasure.setValue(getUnitOfMeasure());
    result.getErrorMessages().addAll(validator_unitOfMeasure.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.unitOfMeasure");
}

// validate IntegerArrayCharacteristicValueSpecification.valueFrom of type Long
try {
    var validator_valueFrom = new com.gip.xyna.openapi.NumberTypeValidator&lt;Long&gt;();
    validator_valueFrom.setName("valueFrom");
    validator_valueFrom.setValue(getValueFrom());
    result.getErrorMessages().addAll(validator_valueFrom.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.valueFrom");
}

// validate IntegerArrayCharacteristicValueSpecification.valueTo of type Long
try {
    var validator_valueTo = new com.gip.xyna.openapi.NumberTypeValidator&lt;Long&gt;();
    validator_valueTo.setName("valueTo");
    validator_valueTo.setValue(getValueTo());
    result.getErrorMessages().addAll(validator_valueTo.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.valueTo");
}

// validate IntegerArrayCharacteristicValueSpecification.valueType of type String
try {
    var validator_valueType = new com.gip.xyna.openapi.StringTypeValidator();
    validator_valueType.setName("valueType");
    validator_valueType.setValue(getValueType());
    result.getErrorMessages().addAll(validator_valueType.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.valueType");
}

// validate IntegerArrayCharacteristicValueSpecification.validFor of type TimePeriod
try {
    internalized.tmf633.datamodel.TimePeriod validFor = getValidFor();
    if (validFor != null) {
        result.getErrorMessages().addAll(validFor.validate().getErrorMessages());
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.validFor");
}

// validate IntegerArrayCharacteristicValueSpecification.atbaseType of type String
try {
    var validator_atbaseType = new com.gip.xyna.openapi.StringTypeValidator();
    validator_atbaseType.setName("@baseType");
    validator_atbaseType.setValue(getAtbaseType());
    result.getErrorMessages().addAll(validator_atbaseType.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.atbaseType");
}

// validate IntegerArrayCharacteristicValueSpecification.atschemaLocation of type String
try {
    var validator_atschemaLocation = new com.gip.xyna.openapi.StringTypeValidator();
    validator_atschemaLocation.setName("@schemaLocation");
    validator_atschemaLocation.setValue(getAtschemaLocation());
    validator_atschemaLocation.setFormat("uri");
    result.getErrorMessages().addAll(validator_atschemaLocation.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.atschemaLocation");
}

// validate IntegerArrayCharacteristicValueSpecification.attype of type String
try {
    var validator_attype = new com.gip.xyna.openapi.StringTypeValidator();
    validator_attype.setName("@type");
    validator_attype.setValue(getAttype());
    result.getErrorMessages().addAll(validator_attype.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.attype");
}

// validate IntegerArrayCharacteristicValueSpecification.value of type Long
try {
    var validator_value = new com.gip.xyna.openapi.PrimitiveListTypeValidator&lt;Long,com.gip.xyna.openapi.NumberTypeValidator&lt;Long&gt;&gt;(com.gip.xyna.openapi.NumberTypeValidator&lt;Long&gt;::new);
    validator_value.setName("value");
    validator_value.setValue(getValue());
    result.getErrorMessages().addAll(validator_value.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate IntegerArrayCharacteristicValueSpecification.value");
}

return result.getResult();
                </CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
