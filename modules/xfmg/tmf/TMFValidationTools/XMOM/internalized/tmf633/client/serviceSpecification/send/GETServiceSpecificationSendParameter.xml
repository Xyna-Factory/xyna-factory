<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--><DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" BaseTypeName="OASBaseType" BaseTypePath="xmcp.oas.datatype" IsAbstract="false" Label="GET /serviceSpecification Send Parameter" TypeName="GETServiceSpecificationSendParameter" TypePath="internalized.tmf633.client.serviceSpecification.send" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
  </Meta>
  <Data Label="fields" VariableName="fields">
    <Meta>
      <Type>String</Type>
      <Documentation>Comma-separated properties to be provided in response
        </Documentation>
    </Meta>
  </Data>
  <Data Label="offset" VariableName="offset">
    <Meta>
      <Type>Long</Type>
      <Documentation>Requested index for start of resources to be provided in response
        </Documentation>
    </Meta>
  </Data>
  <Data Label="limit" VariableName="limit">
    <Meta>
      <Type>Long</Type>
      <Documentation>Requested number of resources to be provided in response
        </Documentation>
    </Meta>
  </Data>
  <Data Label="sort" VariableName="sort">
    <Meta>
      <Type>String</Type>
      <Documentation>Comma-separated properties to be used for sorting
        </Documentation>
    </Meta>
  </Data>
  <Service Label="GET /serviceSpecification Send Parameter" TypeName="GETServiceSpecificationSendParameter">
    <Operation IsStatic="false" Label="Send Request" Name="sendRequest">
      <Input>
        <Data ID="1" Label="HTTP Connection" ReferenceName="HTTPConnection" ReferencePath="xact.http" VariableName="hTTPConnection1"/>
        <Data ID="2" Label="Send Parameter" ReferenceName="SendParameter" ReferencePath="xact.http" VariableName="sendParameter2"/>
      </Input>
      <Output>
        <Data ID="3" Label="HTTP Status Code" ReferenceName="HTTPStatusCode" ReferencePath="xact.http.enums.statuscode" VariableName="hTTPStatusCode3"/>
        <Data ID="4" Label="Header" ReferenceName="Header" ReferencePath="xact.http" VariableName="header4"/>
      </Output>
      <Throws>
        <Exception ID="5" Label="Unexpected HTTP Response Exception" ReferenceName="UnexpectedHTTPResponseException" ReferencePath="xact.http.exceptions" VariableName="unexpectedHTTPResponseException5"/>
        <Exception ID="6" Label="Http Exception" ReferenceName="HttpException" ReferencePath="xact.http.exceptions" VariableName="httpException6"/>
        <Exception ID="7" Label="Timeout Exception" ReferenceName="TimeoutException" ReferencePath="xact.http.exceptions" VariableName="timeoutException7"/>
        <Exception ID="8" Label="Connection Already Closed Exception" ReferenceName="ConnectionAlreadyClosedException" ReferencePath="xact.http.exceptions" VariableName="connectionAlreadyClosedException8"/>
      </Throws>
      <SourceCode>
        <CodeSnippet Type="Java">
return xact.http.HTTPService.send(hTTPConnection1, sendParameter2);
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Validate" Name="validate">
      <Input/>
      <Output>
        <Data ID="9" Label="OASValidationResult" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype" VariableName="oASValidationResult9"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String&gt;());

// validate GETServiceSpecificationResponse.fields of type String
try {
    var validator_fields = new com.gip.xyna.openapi.StringTypeValidator();
    validator_fields.setName("fields");
    validator_fields.setValue(getFields());
    result.getErrorMessages().addAll(validator_fields.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate GETServiceSpecificationResponse.fields");
}

// validate GETServiceSpecificationResponse.offset of type Long
try {
    var validator_offset = new com.gip.xyna.openapi.NumberTypeValidator&lt;Long&gt;();
    validator_offset.setName("offset");
    validator_offset.setValue(getOffset());
    result.getErrorMessages().addAll(validator_offset.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate GETServiceSpecificationResponse.offset");
}

// validate GETServiceSpecificationResponse.limit of type Long
try {
    var validator_limit = new com.gip.xyna.openapi.NumberTypeValidator&lt;Long&gt;();
    validator_limit.setName("limit");
    validator_limit.setValue(getLimit());
    result.getErrorMessages().addAll(validator_limit.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate GETServiceSpecificationResponse.limit");
}

// validate GETServiceSpecificationResponse.sort of type String
try {
    var validator_sort = new com.gip.xyna.openapi.StringTypeValidator();
    validator_sort.setName("sort");
    validator_sort.setValue(getSort());
    result.getErrorMessages().addAll(validator_sort.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate GETServiceSpecificationResponse.sort");
}

return result.getResult();
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Build Header Fields" Name="buildHeaderFields">
      <Input/>
      <Output>
        <Data ID="22" IsList="true" Label="Header Field" ReferenceName="HeaderField" ReferencePath="xact.http" VariableName="headerField22"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
List&lt;HeaderField&gt; headerFields = new ArrayList&lt;HeaderField&gt;();
return headerFields;
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Build Query" Name="buildQuery">
      <Input/>
      <Output>
        <Data ID="47" IsList="true" Label="URL-path Query" ReferenceName="URLPathQuery" ReferencePath="xact.http" VariableName="uRLPathQuery47"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
List&lt;URLPathQuery&gt; urlPathQuery = new ArrayList&lt;URLPathQuery&gt;();
if (getFields() != null) {
  urlPathQuery.add(new URLPathQuery("fields", String.valueOf(getFields())));
}
if (getOffset() != null) {
  urlPathQuery.add(new URLPathQuery("offset", String.valueOf(getOffset())));
}
if (getLimit() != null) {
  urlPathQuery.add(new URLPathQuery("limit", String.valueOf(getLimit())));
}
if (getSort() != null) {
  urlPathQuery.add(new URLPathQuery("sort", String.valueOf(getSort())));
}
return urlPathQuery;
        </CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
