<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--><DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" BaseTypeName="OASBaseType" BaseTypePath="xmcp.oas.datatype" IsAbstract="false" Label="POST /serviceSpecification Send Parameter" TypeName="POSTServiceSpecificationSendParameter" TypePath="internalized.tmf633.client.serviceSpecification.send" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
  </Meta>
  <Data Label="ServiceSpecificationCreate" ReferenceName="ServiceSpecificationCreate" ReferencePath="internalized.tmf633.datamodel" VariableName="serviceSpecificationCreate">
    <Meta>
      <Documentation>The ServiceSpecification to be created
required
        </Documentation>
    </Meta>
  </Data>
  <Service Label="POST /serviceSpecification Send Parameter" TypeName="POSTServiceSpecificationSendParameter">
    <Operation IsStatic="false" Label="Send Request" Name="sendRequest">
      <Input>
        <Data ID="1" Label="HTTP Connection" ReferenceName="HTTPConnection" ReferencePath="xact.http" VariableName="hTTPConnection1"/>
        <Data ID="2" Label="Send Parameter" ReferenceName="SendParameter" ReferencePath="xact.http" VariableName="sendParameter2"/>
      </Input>
      <Output>
        <Data ID="3" Label="HTTP Status Code" ReferenceName="HTTPStatusCode" ReferencePath="xact.http.enums.statuscode" VariableName="hTTPStatusCode3"/>
        <Data ID="4" Label="Header" ReferenceName="Header" ReferencePath="xact.http" VariableName="header4"/>
      </Output>
      <Throws>
        <Exception ID="5" Label="Unexpected HTTP Response Exception" ReferenceName="UnexpectedHTTPResponseException" ReferencePath="xact.http.exceptions" VariableName="unexpectedHTTPResponseException5"/>
        <Exception ID="6" Label="Http Exception" ReferenceName="HttpException" ReferencePath="xact.http.exceptions" VariableName="httpException6"/>
        <Exception ID="7" Label="Timeout Exception" ReferenceName="TimeoutException" ReferencePath="xact.http.exceptions" VariableName="timeoutException7"/>
        <Exception ID="8" Label="Connection Already Closed Exception" ReferenceName="ConnectionAlreadyClosedException" ReferencePath="xact.http.exceptions" VariableName="connectionAlreadyClosedException8"/>
      </Throws>
      <SourceCode>
        <CodeSnippet Type="Java">
xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions jsonOptions = new xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions();
jsonOptions.setListToMapTransformation(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.ListToMapTransformation&gt;());
jsonOptions.setMemberSubstitution(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.MemberSubstitution&gt;());
jsonOptions.setUseLabels(true);
jsonOptions.setProcessAllInputGenerically(false);
jsonOptions.setListWrapper((List)internalized.tmf633.datamodel.ListWrapperProvider.getListWrapper());
jsonOptions.setObjectDecider(new internalized.tmf633.datamodel.decider.OASDecider());


xact.templates.Document body;
body = xfmg.oas.OASObjectParsing.convertOasObjectToJson(getServiceSpecificationCreate(), jsonOptions);

return xact.http.HTTPService.sendDocument(hTTPConnection1, sendParameter2, body);
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Validate" Name="validate">
      <Input/>
      <Output>
        <Data ID="9" Label="OASValidationResult" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype" VariableName="oASValidationResult9"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String&gt;());

// validate POSTServiceSpecificationResponse.serviceSpecificationCreate of type ServiceSpecificationCreate
try {
    internalized.tmf633.datamodel.ServiceSpecificationCreate serviceSpecificationCreate = getServiceSpecificationCreate();
    if (serviceSpecificationCreate != null) {
        result.getErrorMessages().addAll(serviceSpecificationCreate.validate().getErrorMessages());
    } else {
        result.getErrorMessages().add("POSTServiceSpecificationResponse.serviceSpecificationCreate: Object of type ServiceSpecificationCreate is required but is null");
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate POSTServiceSpecificationResponse.serviceSpecificationCreate");
}

return result.getResult();
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Build Header Fields" Name="buildHeaderFields">
      <Input/>
      <Output>
        <Data ID="22" IsList="true" Label="Header Field" ReferenceName="HeaderField" ReferencePath="xact.http" VariableName="headerField22"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
List&lt;HeaderField&gt; headerFields = new ArrayList&lt;HeaderField&gt;();
return headerFields;
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Build Query" Name="buildQuery">
      <Input/>
      <Output>
        <Data ID="47" IsList="true" Label="URL-path Query" ReferenceName="URLPathQuery" ReferencePath="xact.http" VariableName="uRLPathQuery47"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
List&lt;URLPathQuery&gt; urlPathQuery = new ArrayList&lt;URLPathQuery&gt;();
return urlPathQuery;
        </CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
