<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--><DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" BaseTypeName="OASBaseType" BaseTypePath="xmcp.oas.datatype" IsAbstract="false" Label="Service_Create" TypeName="ServiceCreate" TypePath="internalized.tmf640.datamodel" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
    <Documentation>Service is a base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService. Skipped properties: id,href
        </Documentation>
  </Meta>
  <Data Label="id" VariableName="id">
    <Meta>
      <Type>String</Type>
      <Documentation>Type for Id Attributes with pattern
required
        </Documentation>
    </Meta>
  </Data>
  <Data Label="category" VariableName="category">
    <Meta>
      <Type>String</Type>
      <Documentation>Is it a customer facing or resource facing service
        </Documentation>
    </Meta>
  </Data>
  <Data Label="description" VariableName="description">
    <Meta>
      <Type>String</Type>
      <Documentation>Type for Description Attributes with pattern
        </Documentation>
    </Meta>
  </Data>
  <Data Label="endDate" VariableName="endDate">
    <Meta>
      <Type>String</Type>
      <Documentation>Date when the service ends
format: date-time
        </Documentation>
    </Meta>
  </Data>
  <Data Label="hasStarted" VariableName="hasStarted">
    <Meta>
      <Type>Boolean</Type>
      <Documentation>If TRUE, this Service has already been started
        </Documentation>
    </Meta>
  </Data>
  <Data Label="isBundle" VariableName="isBundle">
    <Meta>
      <Type>Boolean</Type>
      <Documentation>If true, the service is a ServiceBundle which regroup a service hierachy. If false, the service is a 'atomic' service (hierachy leaf).
        </Documentation>
    </Meta>
  </Data>
  <Data Label="isServiceEnabled" VariableName="isServiceEnabled">
    <Meta>
      <Type>Boolean</Type>
      <Documentation>If FALSE and hasStarted is FALSE, this particular Service has NOT been enabled for use - if FALSE and hasStarted is TRUE then the service has failed 
        </Documentation>
    </Meta>
  </Data>
  <Data Label="isStateful" VariableName="isStateful">
    <Meta>
      <Type>Boolean</Type>
      <Documentation>If TRUE, this Service can be changed without affecting any other services
        </Documentation>
    </Meta>
  </Data>
  <Data Label="name" VariableName="name">
    <Meta>
      <Type>String</Type>
      <Documentation>Type for Name Attributes with pattern
        </Documentation>
    </Meta>
  </Data>
  <Data Label="serviceDate" VariableName="serviceDate">
    <Meta>
      <Type>String</Type>
      <Documentation>Date when the service was created (whatever its status).
        </Documentation>
    </Meta>
  </Data>
  <Data Label="serviceType" VariableName="serviceType">
    <Meta>
      <Type>String</Type>
      <Documentation>Business type of the service
        </Documentation>
    </Meta>
  </Data>
  <Data Label="startDate" VariableName="startDate">
    <Meta>
      <Type>String</Type>
      <Documentation>Date when the service starts
format: date-time
        </Documentation>
    </Meta>
  </Data>
  <Data Label="startMode" VariableName="startMode">
    <Meta>
      <Type>String</Type>
      <Documentation>This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="externalIdentifier" ReferenceName="ExternalIdentifier" ReferencePath="internalized.tmf640.datamodel" VariableName="externalIdentifier">
    <Meta>
      <Documentation>A list of external identifiers associated with this service
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="feature" ReferenceName="Feature" ReferencePath="internalized.tmf640.datamodel" VariableName="feature">
    <Meta>
      <Documentation>A list of feature associated with this service 
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="note" ReferenceName="Note" ReferencePath="internalized.tmf640.datamodel" VariableName="note">
    <Meta>
      <Documentation>A list of notes made on this service
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="place" ReferenceName="RelatedPlaceRefOrValue" ReferencePath="internalized.tmf640.datamodel" VariableName="place">
    <Meta>
      <Documentation>A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="relatedEntity" ReferenceName="RelatedEntityRefOrValue" ReferencePath="internalized.tmf640.datamodel" VariableName="relatedEntity">
    <Meta>
      <Documentation>A list of related  entity in relationship with this service 
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="relatedParty" ReferenceName="RelatedParty" ReferencePath="internalized.tmf640.datamodel" VariableName="relatedParty">
    <Meta>
      <Documentation>A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="serviceCharacteristic" ReferenceName="Characteristic" ReferencePath="internalized.tmf640.datamodel" VariableName="serviceCharacteristic">
    <Meta>
      <Documentation>A list of characteristics that characterize this service (ServiceCharacteristic [*]) 
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="serviceOrderItem" ReferenceName="RelatedServiceOrderItem" ReferencePath="internalized.tmf640.datamodel" VariableName="serviceOrderItem">
    <Meta>
      <Documentation>A list of service order items related to this service
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="serviceRelationship" ReferenceName="ServiceRelationship" ReferencePath="internalized.tmf640.datamodel" VariableName="serviceRelationship">
    <Meta>
      <Documentation>A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory (useful for describing relies-on, relies-from between CFS for example).
        </Documentation>
    </Meta>
  </Data>
  <Data Label="serviceSpecification" ReferenceName="ServiceSpecificationRef" ReferencePath="internalized.tmf640.datamodel" VariableName="serviceSpecification">
    <Meta>
      <Documentation>required
        </Documentation>
    </Meta>
  </Data>
  <Data Label="state" VariableName="state">
    <Meta>
      <Type>String</Type>
      <Documentation>values: initial, feasibilityChecked, designed, reserved, inactive, inactive.inTesting, inactive.adminDown, active, active.degraded, terminated, failure
required
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="supportingResource" ReferenceName="ResourceRef" ReferencePath="internalized.tmf640.datamodel" VariableName="supportingResource">
    <Meta>
      <Documentation>A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources
        </Documentation>
    </Meta>
  </Data>
  <Data IsList="true" Label="supportingService" ReferenceName="ServiceRefOrValue" ReferencePath="internalized.tmf640.datamodel" VariableName="supportingService">
    <Meta>
      <Documentation>A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)
        </Documentation>
    </Meta>
  </Data>
  <Data Label="@baseType" VariableName="atbaseType">
    <Meta>
      <Type>String</Type>
      <Documentation>When sub-classing, this defines the super-class
        </Documentation>
    </Meta>
  </Data>
  <Data Label="@schemaLocation" VariableName="atschemaLocation">
    <Meta>
      <Type>String</Type>
      <Documentation>A URI to a JSON-Schema file that defines additional attributes and relationships
format: uri
        </Documentation>
    </Meta>
  </Data>
  <Data Label="@type" VariableName="attype">
    <Meta>
      <Type>String</Type>
      <Documentation>When sub-classing, this defines the sub-class entity name
        </Documentation>
    </Meta>
  </Data>
  <Service Label="Service_Create" TypeName="ServiceCreate">
    <Operation IsStatic="false" Label="Validate" Name="validate">
      <Input/>
      <Output>
        <Data ID="1" Label="OAS Validation Result" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype" VariableName="oASValidationResult1"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String&gt;());
// validate ServiceCreate.id of type String
try {
    var validator_id = new com.gip.xyna.openapi.StringTypeValidator();
    validator_id.setName("id");
    validator_id.setValue(getId());
    validator_id.setPattern("^[\\w\\-\\.]*$");
    validator_id.setRequired();
    result.getErrorMessages().addAll(validator_id.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.id");
}

// validate ServiceCreate.category of type String
try {
    var validator_category = new com.gip.xyna.openapi.StringTypeValidator();
    validator_category.setName("category");
    validator_category.setValue(getCategory());
    result.getErrorMessages().addAll(validator_category.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.category");
}

// validate ServiceCreate.description of type String
try {
    var validator_description = new com.gip.xyna.openapi.StringTypeValidator();
    validator_description.setName("description");
    validator_description.setValue(getDescription());
    validator_description.setPattern("^[\\w\\-\\. ]*$");
    result.getErrorMessages().addAll(validator_description.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.description");
}

// validate ServiceCreate.endDate of type String
try {
    var validator_endDate = new com.gip.xyna.openapi.StringTypeValidator();
    validator_endDate.setName("endDate");
    validator_endDate.setValue(getEndDate());
    validator_endDate.setFormat("date-time");
    result.getErrorMessages().addAll(validator_endDate.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.endDate");
}

// validate ServiceCreate.hasStarted of type Boolean
try {
    var validator_hasStarted = new com.gip.xyna.openapi.BooleanTypeValidator();
    validator_hasStarted.setName("hasStarted");
    validator_hasStarted.setValue(getHasStarted());
    result.getErrorMessages().addAll(validator_hasStarted.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.hasStarted");
}

// validate ServiceCreate.isBundle of type Boolean
try {
    var validator_isBundle = new com.gip.xyna.openapi.BooleanTypeValidator();
    validator_isBundle.setName("isBundle");
    validator_isBundle.setValue(getIsBundle());
    result.getErrorMessages().addAll(validator_isBundle.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.isBundle");
}

// validate ServiceCreate.isServiceEnabled of type Boolean
try {
    var validator_isServiceEnabled = new com.gip.xyna.openapi.BooleanTypeValidator();
    validator_isServiceEnabled.setName("isServiceEnabled");
    validator_isServiceEnabled.setValue(getIsServiceEnabled());
    result.getErrorMessages().addAll(validator_isServiceEnabled.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.isServiceEnabled");
}

// validate ServiceCreate.isStateful of type Boolean
try {
    var validator_isStateful = new com.gip.xyna.openapi.BooleanTypeValidator();
    validator_isStateful.setName("isStateful");
    validator_isStateful.setValue(getIsStateful());
    result.getErrorMessages().addAll(validator_isStateful.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.isStateful");
}

// validate ServiceCreate.name of type String
try {
    var validator_name = new com.gip.xyna.openapi.StringTypeValidator();
    validator_name.setName("name");
    validator_name.setValue(getName());
    validator_name.setPattern("^[\\w\\-\\.]*$");
    result.getErrorMessages().addAll(validator_name.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.name");
}

// validate ServiceCreate.serviceDate of type String
try {
    var validator_serviceDate = new com.gip.xyna.openapi.StringTypeValidator();
    validator_serviceDate.setName("serviceDate");
    validator_serviceDate.setValue(getServiceDate());
    result.getErrorMessages().addAll(validator_serviceDate.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.serviceDate");
}

// validate ServiceCreate.serviceType of type String
try {
    var validator_serviceType = new com.gip.xyna.openapi.StringTypeValidator();
    validator_serviceType.setName("serviceType");
    validator_serviceType.setValue(getServiceType());
    result.getErrorMessages().addAll(validator_serviceType.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.serviceType");
}

// validate ServiceCreate.startDate of type String
try {
    var validator_startDate = new com.gip.xyna.openapi.StringTypeValidator();
    validator_startDate.setName("startDate");
    validator_startDate.setValue(getStartDate());
    validator_startDate.setFormat("date-time");
    result.getErrorMessages().addAll(validator_startDate.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.startDate");
}

// validate ServiceCreate.startMode of type String
try {
    var validator_startMode = new com.gip.xyna.openapi.StringTypeValidator();
    validator_startMode.setName("startMode");
    validator_startMode.setValue(getStartMode());
    result.getErrorMessages().addAll(validator_startMode.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.startMode");
}

// validate ServiceCreate.externalIdentifier of type ExternalIdentifier
try {
    List&lt;? extends internalized.tmf640.datamodel.ExternalIdentifier&gt; externalIdentifier = getExternalIdentifier();
    if (externalIdentifier != null) {
        for (internalized.tmf640.datamodel.ExternalIdentifier obj : externalIdentifier) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.externalIdentifier");
}

// validate ServiceCreate.feature of type Feature
try {
    List&lt;? extends internalized.tmf640.datamodel.Feature&gt; feature = getFeature();
    if (feature != null) {
        for (internalized.tmf640.datamodel.Feature obj : feature) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.feature");
}

// validate ServiceCreate.note of type Note
try {
    List&lt;? extends internalized.tmf640.datamodel.Note&gt; note = getNote();
    if (note != null) {
        for (internalized.tmf640.datamodel.Note obj : note) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.note");
}

// validate ServiceCreate.place of type RelatedPlaceRefOrValue
try {
    List&lt;? extends internalized.tmf640.datamodel.RelatedPlaceRefOrValue&gt; place = getPlace();
    if (place != null) {
        for (internalized.tmf640.datamodel.RelatedPlaceRefOrValue obj : place) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.place");
}

// validate ServiceCreate.relatedEntity of type RelatedEntityRefOrValue
try {
    List&lt;? extends internalized.tmf640.datamodel.RelatedEntityRefOrValue&gt; relatedEntity = getRelatedEntity();
    if (relatedEntity != null) {
        for (internalized.tmf640.datamodel.RelatedEntityRefOrValue obj : relatedEntity) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.relatedEntity");
}

// validate ServiceCreate.relatedParty of type RelatedParty
try {
    List&lt;? extends internalized.tmf640.datamodel.RelatedParty&gt; relatedParty = getRelatedParty();
    if (relatedParty != null) {
        for (internalized.tmf640.datamodel.RelatedParty obj : relatedParty) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.relatedParty");
}

// validate ServiceCreate.serviceCharacteristic of type Characteristic
try {
    List&lt;? extends internalized.tmf640.datamodel.Characteristic&gt; serviceCharacteristic = getServiceCharacteristic();
    if (serviceCharacteristic != null) {
        for (internalized.tmf640.datamodel.Characteristic obj : serviceCharacteristic) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.serviceCharacteristic");
}

// validate ServiceCreate.serviceOrderItem of type RelatedServiceOrderItem
try {
    List&lt;? extends internalized.tmf640.datamodel.RelatedServiceOrderItem&gt; serviceOrderItem = getServiceOrderItem();
    if (serviceOrderItem != null) {
        for (internalized.tmf640.datamodel.RelatedServiceOrderItem obj : serviceOrderItem) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.serviceOrderItem");
}

// validate ServiceCreate.serviceRelationship of type ServiceRelationship
try {
    List&lt;? extends internalized.tmf640.datamodel.ServiceRelationship&gt; serviceRelationship = getServiceRelationship();
    if (serviceRelationship != null) {
        for (internalized.tmf640.datamodel.ServiceRelationship obj : serviceRelationship) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.serviceRelationship");
}

// validate ServiceCreate.serviceSpecification of type ServiceSpecificationRef
try {
    internalized.tmf640.datamodel.ServiceSpecificationRef serviceSpecification = getServiceSpecification();
    if (serviceSpecification != null) {
        result.getErrorMessages().addAll(serviceSpecification.validate().getErrorMessages());
    } else {
        result.getErrorMessages().add("ServiceCreate.serviceSpecification: Object of type ServiceSpecificationRef is required but is null");
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.serviceSpecification");
}

// validate ServiceCreate.state of type String
try {
    var validator_state = new com.gip.xyna.openapi.StringTypeValidator();
    validator_state.setName("state");
    validator_state.setValue(getState());
    validator_state.setAllowableValues("initial", "feasibilityChecked", "designed", "reserved", "inactive", "inactive.inTesting", "inactive.adminDown", "active", "active.degraded", "terminated", "failure");
    validator_state.setRequired();
    result.getErrorMessages().addAll(validator_state.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.state");
}

// validate ServiceCreate.supportingResource of type ResourceRef
try {
    List&lt;? extends internalized.tmf640.datamodel.ResourceRef&gt; supportingResource = getSupportingResource();
    if (supportingResource != null) {
        for (internalized.tmf640.datamodel.ResourceRef obj : supportingResource) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.supportingResource");
}

// validate ServiceCreate.supportingService of type ServiceRefOrValue
try {
    List&lt;? extends internalized.tmf640.datamodel.ServiceRefOrValue&gt; supportingService = getSupportingService();
    if (supportingService != null) {
        for (internalized.tmf640.datamodel.ServiceRefOrValue obj : supportingService) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.supportingService");
}

// validate ServiceCreate.atbaseType of type String
try {
    var validator_atbaseType = new com.gip.xyna.openapi.StringTypeValidator();
    validator_atbaseType.setName("@baseType");
    validator_atbaseType.setValue(getAtbaseType());
    result.getErrorMessages().addAll(validator_atbaseType.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.atbaseType");
}

// validate ServiceCreate.atschemaLocation of type String
try {
    var validator_atschemaLocation = new com.gip.xyna.openapi.StringTypeValidator();
    validator_atschemaLocation.setName("@schemaLocation");
    validator_atschemaLocation.setValue(getAtschemaLocation());
    validator_atschemaLocation.setFormat("uri");
    result.getErrorMessages().addAll(validator_atschemaLocation.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.atschemaLocation");
}

// validate ServiceCreate.attype of type String
try {
    var validator_attype = new com.gip.xyna.openapi.StringTypeValidator();
    validator_attype.setName("@type");
    validator_attype.setValue(getAttype());
    result.getErrorMessages().addAll(validator_attype.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate ServiceCreate.attype");
}

return result.getResult();
                </CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
