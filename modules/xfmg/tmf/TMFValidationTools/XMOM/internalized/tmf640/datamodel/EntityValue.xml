<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--><DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" BaseTypeName="OASBaseType" BaseTypePath="xmcp.oas.datatype" IsAbstract="false" Label="EntityValue" TypeName="EntityValue" TypePath="internalized.tmf640.datamodel" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
    <Documentation>Base entity value  schema for use in TMForum Open-APIs
        </Documentation>
  </Meta>
  <Data Label="id" VariableName="id">
    <Meta>
      <Type>String</Type>
      <Documentation>Type for Id Attributes with pattern
        </Documentation>
    </Meta>
  </Data>
  <Data Label="href" VariableName="href">
    <Meta>
      <Type>String</Type>
      <Documentation>Reference of the related entity.
        </Documentation>
    </Meta>
  </Data>
  <Data Label="@baseType" VariableName="atbaseType">
    <Meta>
      <Type>String</Type>
      <Documentation>When sub-classing, this defines the super-class
        </Documentation>
    </Meta>
  </Data>
  <Data Label="@schemaLocation" VariableName="atschemaLocation">
    <Meta>
      <Type>String</Type>
      <Documentation>A URI to a JSON-Schema file that defines additional attributes and relationships
format: uri
        </Documentation>
    </Meta>
  </Data>
  <Data Label="@type" VariableName="attype">
    <Meta>
      <Type>String</Type>
      <Documentation>When sub-classing, this defines the sub-class entity name
        </Documentation>
    </Meta>
  </Data>
  <Service Label="EntityValue" TypeName="EntityValue">
    <Operation IsStatic="false" Label="Validate" Name="validate">
      <Input/>
      <Output>
        <Data ID="1" Label="OAS Validation Result" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype" VariableName="oASValidationResult1"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String&gt;());
// validate EntityValue.id of type String
try {
    var validator_id = new com.gip.xyna.openapi.StringTypeValidator();
    validator_id.setName("id");
    validator_id.setValue(getId());
    validator_id.setPattern("^[\\w\\-\\.]*$");
    result.getErrorMessages().addAll(validator_id.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate EntityValue.id");
}

// validate EntityValue.href of type String
try {
    var validator_href = new com.gip.xyna.openapi.StringTypeValidator();
    validator_href.setName("href");
    validator_href.setValue(getHref());
    result.getErrorMessages().addAll(validator_href.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate EntityValue.href");
}

// validate EntityValue.atbaseType of type String
try {
    var validator_atbaseType = new com.gip.xyna.openapi.StringTypeValidator();
    validator_atbaseType.setName("@baseType");
    validator_atbaseType.setValue(getAtbaseType());
    result.getErrorMessages().addAll(validator_atbaseType.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate EntityValue.atbaseType");
}

// validate EntityValue.atschemaLocation of type String
try {
    var validator_atschemaLocation = new com.gip.xyna.openapi.StringTypeValidator();
    validator_atschemaLocation.setName("@schemaLocation");
    validator_atschemaLocation.setValue(getAtschemaLocation());
    validator_atschemaLocation.setFormat("uri");
    result.getErrorMessages().addAll(validator_atschemaLocation.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate EntityValue.atschemaLocation");
}

// validate EntityValue.attype of type String
try {
    var validator_attype = new com.gip.xyna.openapi.StringTypeValidator();
    validator_attype.setName("@type");
    validator_attype.setValue(getAttype());
    result.getErrorMessages().addAll(validator_attype.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate EntityValue.attype");
}

return result.getResult();
                </CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
