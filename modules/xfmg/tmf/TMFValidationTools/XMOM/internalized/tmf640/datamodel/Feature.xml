<?xml version = '1.0' encoding = 'UTF-8'?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" BaseTypeName="OASBaseType" BaseTypePath="xmcp.oas.datatype" IsAbstract="false" Label="Feature" TypeName="Feature" TypePath="internalized.tmf640.datamodel" Version="1.8">
   <Meta>
      <IsServiceGroupOnly>false</IsServiceGroupOnly>
      <Documentation>Configuration feature.
        </Documentation>
   </Meta>
   <Data Label="id" VariableName="id">
      <Meta>
         <Type>String</Type>
         <Documentation>Type for Id Attributes with pattern
        </Documentation>
      </Meta>
   </Data>
   <Data Label="isBundle" VariableName="isBundle">
      <Meta>
         <Type>Boolean</Type>
         <Documentation>True if this is a feature group. Default is false.
        </Documentation>
      </Meta>
   </Data>
   <Data Label="isEnabled" VariableName="isEnabled">
      <Meta>
         <Type>Boolean</Type>
         <Documentation>True if this feature is enabled. Default is true.
        </Documentation>
      </Meta>
   </Data>
   <Data Label="name" VariableName="name">
      <Meta>
         <Type>String</Type>
         <Documentation>Type for Name Attributes with pattern
required
        </Documentation>
      </Meta>
   </Data>
   <Data IsList="true" Label="constraint" ReferenceName="ConstraintRef" ReferencePath="internalized.tmf640.datamodel" VariableName="constraint">
      <Meta>
         <Documentation>This is a list of feature constraints.
        </Documentation>
      </Meta>
   </Data>
   <Data IsList="true" Label="featureCharacteristic" ReferenceName="Characteristic" ReferencePath="internalized.tmf640.datamodel" VariableName="featureCharacteristic">
      <Meta>
         <Documentation>This is a list of Characteristics for a particular feature.
required
        </Documentation>
      </Meta>
   </Data>
   <Data IsList="true" Label="featureRelationship" ReferenceName="FeatureRelationship" ReferencePath="internalized.tmf640.datamodel" VariableName="featureRelationship">
      <Meta>
         <Documentation/>
      </Meta>
   </Data>
   <Data Label="@baseType" VariableName="atbaseType">
      <Meta>
         <Type>String</Type>
         <Documentation>When sub-classing, this defines the super-class
        </Documentation>
      </Meta>
   </Data>
   <Data Label="@schemaLocation" VariableName="atschemaLocation">
      <Meta>
         <Type>String</Type>
         <Documentation>A URI to a JSON-Schema file that defines additional attributes and relationships
format: uri
        </Documentation>
      </Meta>
   </Data>
   <Data Label="@type" VariableName="attype">
      <Meta>
         <Type>String</Type>
         <Documentation>When sub-classing, this defines the sub-class entity name
        </Documentation>
      </Meta>
   </Data>
   <Service Label="Feature" TypeName="Feature">
      <Operation IsStatic="false" Label="Validate" Name="validate">
         <Input/>
         <Output>
            <Data ID="1" Label="OAS Validation Result" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype" VariableName="oASValidationResult1"/>
         </Output>
         <SourceCode>
            <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String>());
// validate Feature.id of type String
try {
    var validator_id = new com.gip.xyna.openapi.StringTypeValidator();
    validator_id.setName("id");
    validator_id.setValue(getId());
    validator_id.setPattern("^[\\w\\-\\.]*$");
    result.getErrorMessages().addAll(validator_id.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate Feature.id");
}

// validate Feature.isBundle of type Boolean
try {
    var validator_isBundle = new com.gip.xyna.openapi.BooleanTypeValidator();
    validator_isBundle.setName("isBundle");
    validator_isBundle.setValue(getIsBundle());
    result.getErrorMessages().addAll(validator_isBundle.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate Feature.isBundle");
}

// validate Feature.isEnabled of type Boolean
try {
    var validator_isEnabled = new com.gip.xyna.openapi.BooleanTypeValidator();
    validator_isEnabled.setName("isEnabled");
    validator_isEnabled.setValue(getIsEnabled());
    result.getErrorMessages().addAll(validator_isEnabled.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate Feature.isEnabled");
}

// validate Feature.name of type String
try {
    var validator_name = new com.gip.xyna.openapi.StringTypeValidator();
    validator_name.setName("name");
    validator_name.setValue(getName());
    validator_name.setPattern("^[\\w\\-\\.]*$");
    validator_name.setRequired();
    result.getErrorMessages().addAll(validator_name.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate Feature.name");
}

// validate Feature.constraint of type ConstraintRef
try {
    List&lt;? extends internalized.tmf640.datamodel.ConstraintRef> constraint = getConstraint();
    if (constraint != null) {
        for (internalized.tmf640.datamodel.ConstraintRef obj : constraint) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate Feature.constraint");
}

// validate Feature.featureCharacteristic of type Characteristic
try {
    List&lt;? extends internalized.tmf640.datamodel.Characteristic> featureCharacteristic = getFeatureCharacteristic();
    if (featureCharacteristic != null) {
        if (featureCharacteristic.size() &lt; 1) {
          result.getErrorMessages().add("Feature.featureCharacteristic: List of type Characteristic must have at least 1 items but has fewer");
        }
        for (internalized.tmf640.datamodel.Characteristic obj : featureCharacteristic) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    } else {
        result.getErrorMessages().add("Feature.featureCharacteristic: List of type Characteristic is required but is null");
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate Feature.featureCharacteristic");
}

// validate Feature.featureRelationship of type FeatureRelationship
try {
    List&lt;? extends internalized.tmf640.datamodel.FeatureRelationship> featureRelationship = getFeatureRelationship();
    if (featureRelationship != null) {
        for (internalized.tmf640.datamodel.FeatureRelationship obj : featureRelationship) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate Feature.featureRelationship");
}

// validate Feature.atbaseType of type String
try {
    var validator_atbaseType = new com.gip.xyna.openapi.StringTypeValidator();
    validator_atbaseType.setName("@baseType");
    validator_atbaseType.setValue(getAtbaseType());
    result.getErrorMessages().addAll(validator_atbaseType.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate Feature.atbaseType");
}

// validate Feature.atschemaLocation of type String
try {
    var validator_atschemaLocation = new com.gip.xyna.openapi.StringTypeValidator();
    validator_atschemaLocation.setName("@schemaLocation");
    validator_atschemaLocation.setValue(getAtschemaLocation());
    validator_atschemaLocation.setFormat("uri");
    result.getErrorMessages().addAll(validator_atschemaLocation.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate Feature.atschemaLocation");
}

// validate Feature.attype of type String
try {
    var validator_attype = new com.gip.xyna.openapi.StringTypeValidator();
    validator_attype.setName("@type");
    validator_attype.setValue(getAttype());
    result.getErrorMessages().addAll(validator_attype.checkValid());
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate Feature.attype");
}

return result.getResult();
                </CodeSnippet>
         </SourceCode>
      </Operation>
   </Service>
</DataType>