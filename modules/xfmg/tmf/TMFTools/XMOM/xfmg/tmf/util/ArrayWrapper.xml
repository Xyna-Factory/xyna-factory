<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" IsAbstract="false" Label="Array Wrapper" TypeName="ArrayWrapper" TypePath="xfmg.tmf.util" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
  </Meta>
  <Data IsList="true" Label="String Array" VariableName="stringArray">
    <Meta>
      <Type>String</Type>
    </Meta>
  </Data>
  <Data IsList="true" Label="Integer Array" VariableName="integerArray">
    <Meta>
      <Type>Integer</Type>
    </Meta>
  </Data>
  <Data IsList="true" Label="int Array" VariableName="intArray">
    <Meta>
      <Type>int</Type>
    </Meta>
  </Data>
  <Data IsList="true" Label="long Array" VariableName="longArray">
    <Meta>
      <Type>long</Type>
    </Meta>
  </Data>
  <Data IsList="true" Label="Long Object Array" VariableName="longObjectArray">
    <Meta>
      <Type>Long</Type>
    </Meta>
  </Data>
  <Data IsList="true" Label="boolean Array" VariableName="booleanArray">
    <Meta>
      <Type>boolean</Type>
    </Meta>
  </Data>
  <Data IsList="true" Label="Boolean Array" VariableName="booleanArray0">
    <Meta>
      <Type>Boolean</Type>
    </Meta>
  </Data>
  <Data IsList="true" Label="double Array" VariableName="doubleArray">
    <Meta>
      <Type>double</Type>
    </Meta>
  </Data>
  <Data IsList="true" Label="Double Array" VariableName="doubleArray0">
    <Meta>
      <Type>Double</Type>
    </Meta>
  </Data>
  <Service Label="Array Wrapper" TypeName="ArrayWrapper">
    <Operation IsStatic="false" Label="as wrapped list" Name="asWrappedList">
      <Input/>
      <Output>
        <Data ID="3" IsList="true" Label="Text" ReferenceName="Text" ReferencePath="base" VariableName="text3"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">if (stringArray != null) {
  return new ArrayList&lt;&gt;(stringArray.stream().map(s -&gt; new Text(s)).collect(java.util.stream.Collectors.toList()));
} else if (integerArray != null) {
  return new ArrayList&lt;&gt;(integerArray.stream().map(i -&gt; new Text(String.valueOf(i))).collect(java.util.stream.Collectors.toList()));
} else if (intArray != null) {
  return new ArrayList&lt;&gt;(intArray.stream().map(i -&gt; new Text(String.valueOf(i))).collect(java.util.stream.Collectors.toList()));
} else if (longArray != null) {
  return new ArrayList&lt;&gt;(longArray.stream().map(i -&gt; new Text(String.valueOf(i))).collect(java.util.stream.Collectors.toList()));
} else if (longObjectArray != null) {
  return new ArrayList&lt;&gt;(longObjectArray.stream().map(i -&gt; new Text(String.valueOf(i))).collect(java.util.stream.Collectors.toList()));
} else if (booleanArray != null) {
  return new ArrayList&lt;&gt;(booleanArray.stream().map(i -&gt; new Text(String.valueOf(i))).collect(java.util.stream.Collectors.toList()));
} else if (booleanArray0 != null) {
  return new ArrayList&lt;&gt;(booleanArray0.stream().map(i -&gt; new Text(String.valueOf(i))).collect(java.util.stream.Collectors.toList()));
} else if (doubleArray != null) {
  return new ArrayList&lt;&gt;(doubleArray.stream().map(i -&gt; new Text(String.valueOf(i))).collect(java.util.stream.Collectors.toList()));
} else if (doubleArray0 != null) {
  return new ArrayList&lt;&gt;(doubleArray0.stream().map(i -&gt; new Text(String.valueOf(i))).collect(java.util.stream.Collectors.toList()));
}
throw new RuntimeException("lists are all null");</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="as double list" Name="asDoubleList0">
      <Input/>
      <Output>
        <Data IsList="true" Label="list" VariableName="list">
          <Meta>
            <Type>Double</Type>
          </Meta>
        </Data>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">if (stringArray != null) {
  return new ArrayList&lt;&gt;(stringArray.stream().map(s -&gt; s == null ? null : Double.valueOf(s)).collect(java.util.stream.Collectors.toList()));
} else if (integerArray != null) {
  return new ArrayList&lt;&gt;(integerArray.stream().map(i -&gt; i == null ? null : Double.valueOf((double)i)).collect(java.util.stream.Collectors.toList()));
} else if (intArray != null) {
  return new ArrayList&lt;&gt;(intArray.stream().map(i -&gt; Double.valueOf((double)i)).collect(java.util.stream.Collectors.toList()));
} else if (longArray != null) {
  return new ArrayList&lt;&gt;(longArray.stream().map(i -&gt; Double.valueOf((double)i)).collect(java.util.stream.Collectors.toList()));
} else if (longObjectArray != null) {
  return new ArrayList&lt;&gt;(longObjectArray.stream().map(i -&gt; i == null ? null : Double.valueOf((double)i)).collect(java.util.stream.Collectors.toList()));
} else if (booleanArray != null) {
  throw new RuntimeException();
} else if (booleanArray0 != null) {
  throw new RuntimeException();
} else if (doubleArray != null) {
  return new ArrayList&lt;&gt;(doubleArray);
} else if (doubleArray0 != null) {
  return new ArrayList&lt;&gt;(doubleArray0);
}
throw new RuntimeException("lists are all null");</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="as boolean list" Name="asBooleanList">
      <Input/>
      <Output>
        <Data IsList="true" Label="list" VariableName="list">
          <Meta>
            <Type>Boolean</Type>
          </Meta>
        </Data>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">if (stringArray != null) {
  return new ArrayList&lt;&gt;(stringArray.stream().map(s -&gt; s == null ? null : Boolean.valueOf(s)).collect(java.util.stream.Collectors.toList()));
} else if (booleanArray != null) {
  return new ArrayList&lt;&gt;(booleanArray);
} else if (booleanArray0 != null) {
  return new ArrayList&lt;&gt;(booleanArray0);
}
throw new RuntimeException("supported lists are all null");</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="as long list" Name="asLongList">
      <Input/>
      <Output>
        <Data IsList="true" Label="list" VariableName="list">
          <Meta>
            <Type>Long</Type>
          </Meta>
        </Data>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">if (stringArray != null) {
  return new ArrayList&lt;&gt;(stringArray.stream().map(s -&gt; s == null ? null : Long.valueOf(s)).collect(java.util.stream.Collectors.toList()));
} else if (integerArray != null) {
  return new ArrayList&lt;&gt;(integerArray.stream().map(i -&gt; i == null ? null : Long.valueOf((long)i)).collect(java.util.stream.Collectors.toList()));
} else if (intArray != null) {
  return new ArrayList&lt;&gt;(intArray.stream().map(i -&gt; Long.valueOf((long)i)).collect(java.util.stream.Collectors.toList()));
} else if (longArray != null) {
  return new ArrayList&lt;&gt;(longArray);
} else if (longObjectArray != null) {
  return new ArrayList&lt;&gt;(longObjectArray);
} else if (booleanArray != null) {
  throw new RuntimeException();
} else if (booleanArray0 != null) {
  throw new RuntimeException();
} else if (doubleArray != null) {
  return new ArrayList&lt;&gt;(doubleArray.stream().map(i -&gt; Long.valueOf((long)(double)i)).collect(java.util.stream.Collectors.toList()));
} else if (doubleArray0 != null) {
  return new ArrayList&lt;&gt;(doubleArray0.stream().map(i -&gt; i == null ? null : Long.valueOf((long)(double)i)).collect(java.util.stream.Collectors.toList()));
}
throw new RuntimeException("lists are all null");</CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
