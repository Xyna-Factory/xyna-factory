<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2025 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--><DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" IsAbstract="false" Label="Xyna Object Decider" TypeName="XynaObjectDecider" TypePath="xfmg.xfctrl.datamodel.json.parameter" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
    <Documentation>Extend this class and implement the Decide method for custom object instantiation. The decide method is called with the fqn of the static type and a JSONObject providing additional context.</Documentation>
  </Meta>
  <Service Label="Xyna Object Decider" TypeName="XynaObjectDecider">
    <Operation IsStatic="false" Label="Decide" Name="decide">
      <Input>
        <Data ID="7" Label="Generic Type" VariableName="genericType">
          <Meta>
            <Type>String</Type>
          </Meta>
        </Data>
        <Data ID="11" Label="JSON Object" ReferenceName="JSONObject" ReferencePath="xfmg.xfctrl.datamodel.json" VariableName="jSONObject11"/>
      </Input>
      <Output>
        <Data ID="13" Label="AnyType" ReferenceName="AnyType" ReferencePath="base" VariableName="anyType13">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
      </Output>
      <Meta>
        <Documentation>Deprecated. Use DecideObjectOnRead and DecideObjectOnWrite instead</Documentation>
      </Meta>
      <SourceCode>
        <CodeSnippet Type="Java">try {
return (com.gip.xyna.xdev.xfractmod.xmdm.GeneralXynaObject)getClass().getClassLoader().loadClass(genericType).getConstructor().newInstance();
} catch(Exception e) {
    return null;
}</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="On Unknown Member" Name="onUnknownMember">
      <Input>
        <Data ID="23" Label="xyna object" ReferenceName="AnyType" ReferencePath="base" VariableName="xo">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
        <Data ID="27" Label="Variable Name" VariableName="varName">
          <Meta>
            <Type>String</Type>
          </Meta>
        </Data>
        <Data ID="30" Label="JSON Value" ReferenceName="JSONValue" ReferencePath="xfmg.xfctrl.datamodel.json" VariableName="jSONValue30"/>
      </Input>
      <Output/>
      <Meta>
        <Documentation>Called when the json contains a member that does not appear in the xyna object.</Documentation>
      </Meta>
      <SourceCode>
        <CodeSnippet Type="Java">logger.debug("parameter " + varName + " not found in " + xo);</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Decide Object on Write" Name="decideObjectOnWrite">
      <Input>
        <Data Label="AnyType" ReferenceName="AnyType" ReferencePath="base" VariableName="anyType996">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
      </Input>
      <Output>
        <Data Label="AnyType" ReferenceName="AnyType" ReferencePath="base" VariableName="anyType997">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
      </Output>
      <Meta>
        <Documentation>During writeJsonWithOptions, when the writer encounters an object, this method is called to determine which object to write. The default behavior returns the object passed to this method, but any xyna object may be used instead.</Documentation>
      </Meta>
      <SourceCode>
        <CodeSnippet Type="Java">return anyType996;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Continue Read with Object" Name="continueReadWithObject">
      <Input>
        <Data Label="AnyType" ReferenceName="AnyType" ReferencePath="base" VariableName="anyType">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
        <Data ID="36" Label="JSON Object" ReferenceName="JSONObject" ReferencePath="xfmg.xfctrl.datamodel.json" VariableName="jSONObject36"/>
      </Input>
      <Output>
        <Data Label="AnyType" ReferenceName="AnyType" ReferencePath="base" VariableName="anyType">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
      </Output>
      <Meta>
        <Documentation>When the JsonParser encounters an Object, the decideObjectOnRead method is called. The resulting object is passed to this method. The object returned by this method is filled with the information of the json by the JsonParser.</Documentation>
      </Meta>
      <SourceCode>
        <CodeSnippet Type="Java">return anyType;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Decide Object on Read" Name="decideObjectOnRead">
      <Input>
        <Data ID="7" Label="Generic Type" VariableName="genericType">
          <Meta>
            <Type>String</Type>
          </Meta>
        </Data>
        <Data ID="11" Label="JSON Object" ReferenceName="JSONObject" ReferencePath="xfmg.xfctrl.datamodel.json" VariableName="jSONObject11"/>
      </Input>
      <Output>
        <Data ID="13" Label="AnyType" ReferenceName="AnyType" ReferencePath="base" VariableName="anyType13">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
      </Output>
      <Meta>
        <Documentation>When the JsonParser encounters an object, this method is called to create an object of the correct type. The resulting object should be either of the genericType passed to the method, or of a class derived from genericType.</Documentation>
      </Meta>
      <SourceCode>
        <CodeSnippet Type="Java">try {
return (com.gip.xyna.xdev.xfractmod.xmdm.GeneralXynaObject)getClass().getClassLoader().loadClass(genericType).getConstructor().newInstance();
} catch(Exception e) {
return null;
}</CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
