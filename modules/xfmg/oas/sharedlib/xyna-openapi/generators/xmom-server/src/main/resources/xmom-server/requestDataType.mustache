{{#operations}}{{#operation}}{{#hasParams}}<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" Version="1.8" IsAbstract="false"
TypeName="{{httpMethod}}{{#lambda.pascalcase}}{{path}}{{/lambda.pascalcase}}Parameter" TypePath="{{apiPackage}}.{{pathPrefix}}.request" Label="{{httpMethod}} {{path}} Parameter"
BaseTypeName="RequestParameter" BaseTypePath="xmcp.oas.datatype.provider">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
    <Documentation></Documentation>
  </Meta>{{#allParams}}
    <Data Label="{{paramName}}" VariableName="{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}" {{#isContainer}}IsList="true"{{/isContainer}}{{^isPrimitiveType}}
     ReferenceName="{{complexType}}" ReferencePath="{{#modelPackage}}{{modelPackage}}{{/modelPackage}}{{#moduleName}}.{{moduleName}}{{/moduleName}}"{{/isPrimitiveType}}>
        <Meta>{{#isPrimitiveType}}
            <Type>{{#isContainer}}{{items.dataType}}{{/isContainer}}{{^isContainer}}{{dataType}}{{/isContainer}}</Type>{{/isPrimitiveType}}
            <Documentation>{{#description}}{{description}}{{/description}}{{#isEnum}}
Enum with values: {{_enum}}{{/isEnum}}{{#format}}
format: {{format}}{{/format}}

{{#required}}required{{/required}}
{{#isNullable}}nullable{{/isNullable}}
            </Documentation>
        </Meta>
    </Data>{{/allParams}}
  <Service Label="{{httpMethod}} {{path}} Parameter" TypeName="{{httpMethod}}{{#lambda.pascalcase}}{{path}}{{/lambda.pascalcase}}Parameter">
    <Operation Label="Validate" Name="validate" IsStatic="false">
      <Input>
      </Input>
      <Output>
        <Data ID="3" Label="OASValidationResult" VariableName="oASValidationResult3" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String&gt;());

{{#allParams}}{{>validation}}{{/allParams}}
return result.getResult();
</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation Label="parse Parameter" Name="parseParameter" IsStatic="false">
      <Input>
        <Data ID="1" Label="Http Request" VariableName="httpRequest1" ReferenceName="HttpRequest" ReferencePath="xmcp.oas.datatype"/>
      </Input>
      <Output>
        <Data ID="2" Label="{{httpMethod}} {{path}} Parameter" VariableName="{{#lambda.camelcase}}{{httpMethod}}{{path}}{{/lambda.camelcase}}Parameter2" 
        ReferenceName="{{httpMethod}}{{#lambda.pascalcase}}{{path}}{{/lambda.pascalcase}}Parameter" ReferencePath="{{apiPackage}}.{{pathPrefix}}.request"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">{{httpMethod}}{{#lambda.pascalcase}}{{path}}{{/lambda.pascalcase}}Parameter ret = new {{httpMethod}}{{#lambda.pascalcase}}{{path}}{{/lambda.pascalcase}}Parameter();

{{#hasPathParams}}
for (xmcp.oas.datatype.URLPathParameter pathPara: httpRequest1.getURLPathParameter()) {
    {{#pathParams}}
    {{#-first}}if{{/-first}}{{^-first}}else if{{/-first}} (pathPara.getAttribute().equals("{{paramName}}")) {
        ret.set{{#lambda.pascalcase}}{{paramName}}{{/lambda.pascalcase}}({{dataType}}.valueOf(pathPara.getValue()));
    }
    {{/pathParams}}
}
{{/hasPathParams}}{{#hasQueryParams}}
for (xact.http.URLPathQuery query: httpRequest1.getURLQueries()) {
    {{#queryParams}}
    {{#-first}}if{{/-first}}{{^-first}}else if{{/-first}} (query.getAttribute().equals("{{paramName}}")) {
        ret.set{{#lambda.pascalcase}}{{paramName}}{{/lambda.pascalcase}}({{dataType}}.valueOf(query.getValue()));
    }
    {{/queryParams}}
}
{{/hasQueryParams}}{{#hasHeaderParams}}
for (xact.http.Header header: httpRequest1.getHeader()) {
    {{#headerParams}}
    {{#-first}}if{{/-first}}{{^-first}}else if{{/-first}} (header.getAttribute().equals("{{paramName}}")) {
        ret.set{{#lambda.pascalcase}}{{paramName}}{{/lambda.pascalcase}}({{dataType}}.valueOf(header.getValue()));
    }
    {{/headerParams}}
}
{{/hasHeaderParams}}{{#hasBodyParam}}{{#bodyParams}}{{#isModel}}
xact.templates.Document body = httpRequest1.getBody();
{{dataType}} {{#lambda.lowercase}}{{paramName}}{{/lambda.lowercase}} = ({{dataType}})xfmg.xfctrl.datamodel.json.JSONDatamodelServices.parseObjectFromJSONWithOptions(body, new {{dataType}}(), new xfmg.xfctrl.datamodel.json.parameter.JSONParsingOptions());
ret.set{{#lambda.pascalcase}}{{paramName}}{{/lambda.pascalcase}}({{#lambda.lowercase}}{{paramName}}{{/lambda.lowercase}});
{{/isModel}}{{/bodyParams}}{{/hasBodyParam}}
return ret;</CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
{{/hasParams}}{{/operation}}{{/operations}}