{{!
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2024 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
}}
{{#operations}}
{{#xynaOperation}}
<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" Version="1.8" IsAbstract="true"
TypeName="{{responseRefName}}" TypePath="{{responseRefPath}}" Label="{{responseLabel}}"
BaseTypeName="ResponseParameter" BaseTypePath="xmcp.oas.datatype.provider">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
    <Documentation>{{responseDescription}}</Documentation>
  </Meta>
</DataType>
{{#responses}}

<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" Version="1.8" IsAbstract="false"
TypeName="{{respRefName}}" TypePath="{{respRefPath}}" Label="{{respLabel}}"
BaseTypeName="{{responseRefName}}" BaseTypePath="{{responseRefPath}}">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
    <Documentation>{{respDescription}}</Documentation>
  </Meta>
  {{#body}}
{{>property}}
  {{/body}}
  {{#responseHeaders}}
  {{#isPrimitive}}
{{>property}}
  {{/isPrimitive}}
  {{/responseHeaders}}
  <Service Label="{{respLabel}}" TypeName="{{respRefName}}">
    <Operation Label="get Status Code" Name="getStatusCode" IsStatic="false">
      <Input>
      </Input>
      <Output>
        <Data Label="Http Status" VariableName="Http Status">
          <Meta>
            <Type>String</Type>
          </Meta>
        </Data>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">return "{{codeWithMessage}}";</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation Label="get Payload" Name="getPayload" IsStatic="false">
      <Input>
      </Input>
      <Output>
        <Data ID="1" Label="Document" VariableName="document1" ReferenceName="Document" ReferencePath="xact.templates"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
{{^body}}
return new xact.templates.Document();
{{/body}}
{{#body}}
xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions jsonOptions = new xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions();
jsonOptions.setListToMapTransformation(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.ListToMapTransformation&gt;());
jsonOptions.setMemberSubstitution(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.MemberSubstitution&gt;());
jsonOptions.setUseLabels(true);

xact.templates.Document body;
{{^isPrimitive}}
{{#isList}}
List&lt;GeneralXynaObject&gt; obj = new ArrayList&lt;&gt;({{getPropVarName}});
{{/isList}}
{{^isList}}
GeneralXynaObject obj = {{getPropVarName}};
{{/isList}}
body = xfmg.xfctrl.datamodel.json.JSONDatamodelServices.writeJSON{{#isList}}List{{/isList}}WithOptions(obj, jsonOptions);
{{/isPrimitive}}
{{#isPrimitive}}
String text;
if ({{getPropVarName}} &#x3D;&#x3D; null) {
  text = null;
} else {
  text =
  {{#isList}}
    &quot;[&quot; + String.join(&quot;,&quot;, {{getPropVarName}}.stream().map(listEntry -> listEntry == null ? null :
  {{/isList}}
  {{#isString}}
    &quot;\&quot;&quot; + xfmg.xfctrl.datamodel.json.JSONDatamodelServices.encodeValue(new xact.templates.Document.Builder().text(
  {{/isString}}
  {{^isString}}
    String.valueOf(
  {{/isString}}
  {{#isList}}
    listEntry
  {{/isList}}
  {{^isList}}
    {{getPropVarName}}
  {{/isList}}
    )
  {{#isString}}
    .instance()).getText() + &quot;\&quot;&quot;
  {{/isString}}
  {{#isList}}
    ).collect(java.util.stream.Collectors.toList())) + &quot;]&quot;
  {{/isList}}
    ;
}
body = new xact.templates.Document();
body.setText(text);
{{/isPrimitive}}
return body;
{{/body}}
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation Label="Validate" Name="validate" IsStatic="false">
      <Input>
      </Input>
      <Output>
        <Data ID="2" Label="OAS Validation Result" VariableName="oASValidationResult2" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String&gt;());
{{#body}}
{{>validation}}
{{/body}}
{{#responseHeaders}}

{{>validation}}
{{/responseHeaders}}
return result.getResult();
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="get Headers" Name="getHeaders">
      <Input/>
      <Output>
        <Data ID="4" IsList="true" Label="Header Field" ReferenceName="HeaderField" ReferencePath="xact.http" VariableName="headerField4"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
List&lt;HeaderField&gt; headers = new ArrayList&lt;&gt;();
{{#responseHeaders}}
if ({{getPropVarName}} != null) {
  headers.add(new HeaderField.Builder()
              .name("{{propLabel}}")
              .value(String.valueOf({{getPropVarName}}))
              .instance());
}
{{/responseHeaders}}
return headers;
        </CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
{{/responses}}
{{/xynaOperation}}
{{/operations}}