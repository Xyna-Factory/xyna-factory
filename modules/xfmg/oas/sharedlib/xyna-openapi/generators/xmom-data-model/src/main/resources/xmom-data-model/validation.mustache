{{!
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2024 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
}}
// validate {{propClassName}}.{{propVarName}} of type {{#isPrimitive}}{{javaType}}{{/isPrimitive}}{{^isPrimitive}}{{propRefType}}{{/isPrimitive}}
try {
{{#isPrimitive}}
    var validator_{{propVarName}} = {{validatorClassConstructor}};
  {{#validatorConfig}}
    validator_{{propVarName}}.{{.}};
  {{/validatorConfig}}
    result.getErrorMessages().addAll(validator_{{propVarName}}.checkValid());
{{/isPrimitive}}
{{^isPrimitive}}
  {{^isList}}
    {{propRefPath}}.{{propRefType}} {{propVarName}} = {{getPropVarName}};
    if ({{propVarName}} != null) {
        result.getErrorMessages().addAll({{propVarName}}.validate().getErrorMessages());
    }{{#required}} else {
        result.getErrorMessages().add("{{propClassName}}.{{propVarName}} of type {{propRefType}} is required, but is null.");
    }{{/required}}
  {{/isList}}
  {{#isList}}
    List&lt;? extends {{propRefPath}}.{{propRefType}}&gt; {{propVarName}} = {{getPropVarName}};
    if ({{propVarName}} != null) {
        for ({{propRefPath}}.{{propRefType}} obj : {{propVarName}}) {
            result.getErrorMessages().addAll(obj.validate().getErrorMessages());
        }
    }{{#required}} else {
        result.getErrorMessages().add("{{propClassName}}.{{propVarName}} of type {{propRefType}} is required, but is null.");
    }{{/required}}
  {{/isList}}
{{/isPrimitive}}
} catch (Exception e) {
    result.getErrorMessages().add("Error: could not validate {{propClassName}}.{{propVarName}}");
}
