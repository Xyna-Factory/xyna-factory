{{!
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2024 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
}}
<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" Version="1.8" IsAbstract="false"
TypeName="OASDecider" TypePath="{{deciderPath}}" Label="OASDecider"
BaseTypeName="XynaObjectDecider" BaseTypePath="xfmg.xfctrl.datamodel.json.parameter">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
  </Meta>
  <Service Label="OASDecider" TypeName="OASDecider">
    <Operation Label="Decide" Name="decide" IsStatic="false">
      <Input>
        <Data ID="16" Label="Generic Type" VariableName="string16">
          <Meta>
            <Type>String</Type>
          </Meta>
        </Data>
        <Data ID="2" Label="JSON Object" VariableName="jSONObject2" ReferenceName="JSONObject" ReferencePath="xfmg.xfctrl.datamodel.json"/>
      </Input>
      <Output>
        <Data ID="17" Label="AnyType" VariableName="anytype17" ReferenceName="AnyType" ReferencePath="base">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
{{#xynaModels}}
{{#hasDiscriminator}}
if (string16.equals("{{modelFQN}}")) {
  String dyntype = "";
  xfmg.xfctrl.datamodel.json.JSONValue value = jSONObject2.getMember("{{discriminatorKey}}");
  if (value != null) {
    dyntype = value.getStringOrNumberValue();
  }
  {{#discriminatorMap}}
  if (dyntype.equals("{{keyValue}}")) {
    return new {{fqn}}();
  }
  {{/discriminatorMap}}
}
{{/hasDiscriminator}}
{{/xynaModels}}
try {
  return (com.gip.xyna.xdev.xfractmod.xmdm.GeneralXynaObject) this.getClass().getClassLoader().loadClass(string16).getConstructor().newInstance();
} catch(Exception e) {
  return null;
}</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation Label="On Unknown Member" Name="onUnknownMember" IsStatic="false">
      <Input>
        <Data ID="23" Label="xyna object" VariableName="xo" ReferenceName="AnyType" ReferencePath="base">
          <Meta>
            <Type>GeneralXynaObject</Type>
          </Meta>
        </Data>
        <Data ID="27" Label="Variable Name" VariableName="varName">
          <Meta>
            <Type>String</Type>
          </Meta>
        </Data>
        <Data ID="30" Label="JSON Value" VariableName="jSONValue30" ReferenceName="JSONValue" ReferencePath="xfmg.xfctrl.datamodel.json">
        </Data>
      </Input>
      <Output>
      </Output>
      <Meta>
        <Documentation>Called when the json contains a member that does not appear in the xyna object.</Documentation>
      </Meta>
      <SourceCode>
        <CodeSnippet Type="Java">
      try {
        {{#addPropWrapper}}
        {{#usersFQN}}
        if (xo instanceof {{.}}) {
          if (xo.get("additionalProperties") == null) {
            xo.set("additionalProperties", new ArrayList&lt;{{wrapperFQN}}&gt;());
          }
          {{wrapperFQN}} wrapper = new {{wrapperFQN}}();
          wrapper.setKey(varName);
        {{#prop}}
          {{#isPrimitive}}
            {{#isBoolean}}
          wrapper.setValue(jSONValue30.getBooleanValue());
            {{/isBoolean}}
            {{#isString}}
          wrapper.setValue(jSONValue30.getStringOrNumberValue());
            {{/isString}}
            {{#isNumber}}
          wrapper.setValue({{javaType}}.valueOf(jSONValue30.getStringOrNumberValue()));
            {{/isNumber}}
          {{/isPrimitive}}
          {{^isPrimitive}}
          xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions jsonWritingOptions = new xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions();
          jsonWritingOptions.setListToMapTransformation(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.ListToMapTransformation&gt;());
          jsonWritingOptions.setMemberSubstitution(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.MemberSubstitution&gt;());
          jsonWritingOptions.setUseLabels(true);
          jsonWritingOptions.setProcessAllInputGenerically(false);
          xact.templates.Document document = xfmg.xfctrl.datamodel.json.JSONDatamodelServices.writeJSONWithOptions(jSONValue30, jsonWritingOptions);

          xfmg.xfctrl.datamodel.json.parameter.JSONParsingOptions jsonParsingOptions = new xfmg.xfctrl.datamodel.json.parameter.JSONParsingOptions();
          jsonParsingOptions.setListToMapTransformation(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.ListToMapTransformation&gt;());
          jsonParsingOptions.setMemberSubstitution(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.MemberSubstitution&gt;());
          jsonParsingOptions.setUseLabels(true);
          jsonParsingOptions.setProcessAllInputGenerically(false);
          jsonParsingOptions.setObjectDecider(this);
            {{^isList}}
          {{propFQN}} {{propVarName}} = ({{propFQN}})xfmg.xfctrl.datamodel.json.JSONDatamodelServices.parseObjectFromJSONWithOptions(document, new {{propFQN}}(), jsonParsingOptions);
            {{/isList}}
            {{#isList}}
          List {{propVarName}} = (List)xfmg.xfctrl.datamodel.json.JSONDatamodelServices.parseListFromJSONWithOptions(document, new {{propFQN}}(), jsonParsingOptions);
            {{/isList}}
          wrapper.setValue({{propVarName}});
          {{/isPrimitive}}
        {{/prop}}
          ((List) xo.get("additionalProperties")).add(wrapper);
        }
        {{/usersFQN}}
        {{/addPropWrapper}}
      } catch(Exception e) {
        if (logger.isWarnEnabled()) {
          logger.warn(e);
        }
      }
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation Label="Write" Name="write" IsStatic="false">
      <Input>
        <Data ID="6" Label="OAS Base Type" VariableName="oASBaseType6" ReferenceName="OASBaseType" ReferencePath="xmcp.oas.datatype">
        </Data>
      </Input>
      <Output>
        <Data ID="7" Label="Document" VariableName="document7" ReferenceName="Document" ReferencePath="xact.templates">
        </Data>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions jsonOptions = new xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions();
jsonOptions.setUseLabels(true);

return xfmg.xfctrl.datamodel.json.JSONDatamodelServices.writeJSONWithOptions(oASBaseType6, jsonOptions);</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation Label="Parse" Name="parse" IsStatic="false">
      <Input>
        <Data ID="3" Label="Document" VariableName="document3" ReferenceName="Document" ReferencePath="xact.templates">
        </Data>
        <Data ID="4" Label="OAS Base Type" VariableName="oASBaseType4" ReferenceName="OASBaseType" ReferencePath="xmcp.oas.datatype">
        </Data>
      </Input>
      <Output>
        <Data ID="5" Label="OAS Base Type" VariableName="oASBaseType5" ReferenceName="OASBaseType" ReferencePath="xmcp.oas.datatype">
        </Data>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">xfmg.xfctrl.datamodel.json.parameter.JSONParsingOptions jsonOptions = new xfmg.xfctrl.datamodel.json.parameter.JSONParsingOptions();
jsonOptions.setUseLabels(true);
jsonOptions.setObjectDecider(this);

return (xmcp.oas.datatype.OASBaseType) xfmg.xfctrl.datamodel.json.JSONDatamodelServices.parseObjectFromJSONWithOptions(document3, oASBaseType4, jsonOptions);</CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>