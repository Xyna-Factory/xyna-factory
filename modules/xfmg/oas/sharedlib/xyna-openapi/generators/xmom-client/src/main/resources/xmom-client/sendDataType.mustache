{{!
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2024 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
}}
{{#operations}}
  {{#xynaOperation}}
<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" Version="1.8" IsAbstract="false"
TypeName="{{sendRefName}}" TypePath="{{sendRefPath}}" Label="{{sendLabel}}"
BaseTypeName="OASBaseType" BaseTypePath="xmcp.oas.datatype">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
  </Meta>
    {{#params}}
{{>property}}
    {{/params}}
  <Service Label="{{sendLabel}}" TypeName="{{sendRefName}}">
    <Operation Label="Send Request" Name="sendRequest" IsStatic="false">
      <Input>
        <Data ID="1" Label="HTTP Connection" VariableName="hTTPConnection1" ReferenceName="HTTPConnection" ReferencePath="xact.http"/>
        <Data ID="2" Label="Send Parameter" VariableName="sendParameter2" ReferenceName="SendParameter" ReferencePath="xact.http"/>
      </Input>
      <Output>
        <Data ID="3" Label="HTTP Status Code" VariableName="hTTPStatusCode3" ReferenceName="HTTPStatusCode" ReferencePath="xact.http.enums.statuscode"/>
        <Data ID="4" Label="Header" VariableName="header4" ReferenceName="Header" ReferencePath="xact.http"/>
      </Output>
      <Throws>
        <Exception ID="5" Label="Unexpected HTTP Response Exception" VariableName="unexpectedHTTPResponseException5" ReferenceName="UnexpectedHTTPResponseException" ReferencePath="xact.http.exceptions"/>
        <Exception ID="6" Label="Http Exception" VariableName="httpException6" ReferenceName="HttpException" ReferencePath="xact.http.exceptions"/>
        <Exception ID="7" Label="Timeout Exception" VariableName="timeoutException7" ReferenceName="TimeoutException" ReferencePath="xact.http.exceptions"/>
        <Exception ID="8" Label="Connection Already Closed Exception" VariableName="connectionAlreadyClosedException8" ReferenceName="ConnectionAlreadyClosedException" ReferencePath="xact.http.exceptions"/>
      </Throws>
      <SourceCode>
        <CodeSnippet Type="Java">
{{^hasBody}}
return xact.http.HTTPService.send(hTTPConnection1, sendParameter2);
{{/hasBody}}
{{#hasBody}}
xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions jsonOptions = new xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions();
jsonOptions.setListToMapTransformation(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.ListToMapTransformation&gt;());
jsonOptions.setMemberSubstitution(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.MemberSubstitution&gt;());
jsonOptions.setUseLabels(true);
{{#bodyParams}}

xact.templates.Document body;
{{^isPrimitive}}
{{#isList}}
List&lt;GeneralXynaObject&gt; list = new ArrayList&lt;&gt;({{getPropVarName}});
body = (xact.templates.Document)xfmg.xfctrl.datamodel.json.JSONDatamodelServices.writeJSONListWithOptions(list, jsonOptions);
{{/isList}}
{{^isList}}
body = (xact.templates.Document)xfmg.xfctrl.datamodel.json.JSONDatamodelServices.writeJSONWithOptions({{getPropVarName}}, jsonOptions);
{{/isList}}
{{/isPrimitive}}
{{#isPrimitive}}
String text;
if ({{getPropVarName}} == null) {
  text = null;
} else {
  text =
  {{#isList}}
    &quot;[&quot; + String.join(&quot;,&quot;, {{getPropVarName}}.stream().map(listEntry -> listEntry == null ? null :
  {{/isList}}
  {{#isString}}
    &quot;\&quot;&quot; + xfmg.xfctrl.datamodel.json.JSONDatamodelServices.encodeValue(new xact.templates.Document.Builder().text(
  {{/isString}}
  {{^isString}}
    String.valueOf(
  {{/isString}}
  {{#isList}}
    listEntry
  {{/isList}}
  {{^isList}}
    {{getPropVarName}}
  {{/isList}}
    )
  {{#isString}}
    .instance()).getText() + &quot;\&quot;&quot;
  {{/isString}}
  {{#isList}}
    ).collect(java.util.stream.Collectors.toList())) + &quot;]&quot;
  {{/isList}}
    ;
}
body = new xact.templates.Document();
body.setText(text);
{{/isPrimitive}}

return xact.http.HTTPService.sendDocument(hTTPConnection1, sendParameter2, body);
{{/bodyParams}}
{{/hasBody}}
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation Label="Validate" Name="validate" IsStatic="false">
      <Input>
      </Input>
      <Output>
        <Data ID="9" Label="OASValidationResult" VariableName="oASValidationResult9" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String&gt;());

{{#params}}
{{>validation}}
{{/params}}
return result.getResult();
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Build Header Fields" Name="buildHeaderFields">
      <Input/>
      <Output>
        <Data ID="22" IsList="true" Label="Header Field" ReferenceName="HeaderField" ReferencePath="xact.http" VariableName="headerField22"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
List&lt;HeaderField&gt; headerFields = new ArrayList&lt;HeaderField&gt;();
    {{#headerParams}}
if ({{getPropVarName}} != null) {
  headerFields.add(new HeaderField("{{propLabel}}", String.valueOf({{getPropVarName}})));
}
    {{/headerParams}}
return headerFields;
        </CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="false" Label="Build Query" Name="buildQuery">
      <Input/>
      <Output>
        <Data ID="47" IsList="true" Label="URL-path Query" ReferenceName="URLPathQuery" ReferencePath="xact.http" VariableName="uRLPathQuery47"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">
List&lt;URLPathQuery&gt; urlPathQuery = new ArrayList&lt;URLPathQuery&gt;();
    {{#queryParams}}
if ({{getPropVarName}} != null) {
  urlPathQuery.add(new URLPathQuery("{{propLabel}}", String.valueOf({{getPropVarName}})));
}
    {{/queryParams}}
return urlPathQuery;
        </CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>

  {{/xynaOperation}}
{{/operations}}