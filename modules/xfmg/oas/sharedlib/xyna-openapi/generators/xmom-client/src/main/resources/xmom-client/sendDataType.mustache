{{#operations}}{{#operation}}<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" Version="1.8" IsAbstract="false"
TypeName="{{httpMethod}}{{#lambda.pascalcase}}{{path}}{{/lambda.pascalcase}}SendParameter" TypePath="{{apiPackage}}.{{pathPrefix}}.send" Label="{{httpMethod}} {{path}} Send Parameter"
BaseTypeName="OASBaseType" BaseTypePath="xmcp.oas.datatype">
  <Meta>
    <IsServiceGroupOnly>false</IsServiceGroupOnly>
  </Meta>{{#allParams}}
    <Data Label="{{paramName}}" VariableName="{{#lambda.camelcase}}{{paramName}}{{/lambda.camelcase}}" {{#isContainer}}IsList="true"{{/isContainer}}{{^isPrimitiveType}}{{^isEnumRef}}
     ReferenceName="{{complexType}}" ReferencePath="{{#modelPackage}}{{modelPackage}}{{/modelPackage}}{{#moduleName}}.{{moduleName}}{{/moduleName}}"{{/isEnumRef}}{{/isPrimitiveType}}>
        <Meta>{{#isPrimitiveType}}{{^isEnumRef}}
            <Type>{{#isContainer}}{{items.dataType}}{{/isContainer}}{{^isContainer}}{{dataType}}{{/isContainer}}</Type>{{/isEnumRef}}{{/isPrimitiveType}}{{#isEnumRef}}
            <Type>String</Type>{{/isEnumRef}}
            <Documentation>{{#description}}{{description}}{{/description}}{{#isEnumRef}}
Enum of Type: {{#modelPackage}}{{modelPackage}}{{/modelPackage}}{{#moduleName}}.{{moduleName}}{{/moduleName}}.{{complexType}}
values: {{#allowableValues}}{{#values}}{{.}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}
{{/isEnumRef}}{{#format}}
format: {{format}}{{/format}}
required: {{required}}
            </Documentation>
        </Meta>
    </Data>{{/allParams}}
  <Service Label="{{httpMethod}} {{path}} Send Parameter" TypeName="{{httpMethod}}{{#lambda.pascalcase}}{{path}}{{/lambda.pascalcase}}SendParameter">
    <Operation Label="sendRequest" Name="sendRequest" IsStatic="false">
      <Input>
        <Data ID="1" Label="HTTP Connection" VariableName="hTTPConnection1" ReferenceName="HTTPConnection" ReferencePath="xact.http"/>
        <Data ID="2" Label="Send Parameter" VariableName="sendParameter2" ReferenceName="SendParameter" ReferencePath="xact.http"/>
      </Input>
      <Output>
        <Data ID="3" Label="HTTP Status Code" VariableName="hTTPStatusCode3" ReferenceName="HTTPStatusCode" ReferencePath="xact.http.enums.statuscode"/>
        <Data ID="4" Label="Header" VariableName="header4" ReferenceName="Header" ReferencePath="xact.http"/>
      </Output>
      <Throws>
        <Exception ID="5" Label="Unexpected HTTP Response Exception" VariableName="unexpectedHTTPResponseException5" ReferenceName="UnexpectedHTTPResponseException" ReferencePath="xact.http.exceptions"/>
        <Exception ID="6" Label="Http Exception" VariableName="httpException6" ReferenceName="HttpException" ReferencePath="xact.http.exceptions"/>
        <Exception ID="7" Label="Timeout Exception" VariableName="timeoutException7" ReferenceName="TimeoutException" ReferencePath="xact.http.exceptions"/>
        <Exception ID="8" Label="Connection Already Closed Exception" VariableName="connectionAlreadyClosedException8" ReferenceName="ConnectionAlreadyClosedException" ReferencePath="xact.http.exceptions"/>
      </Throws>
      <SourceCode>
        <CodeSnippet Type="Java">{{^hasBodyParam}}return xact.http.HTTPService.send(hTTPConnection1, sendParameter2);{{/hasBodyParam}}{{#hasBodyParam}}xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions jsonOptions = new xfmg.xfctrl.datamodel.json.parameter.JSONWritingOptions();
jsonOptions.setListToMapTransformation(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.ListToMapTransformation&gt;());
jsonOptions.setMemberSubstitution(new ArrayList&lt;xfmg.xfctrl.datamodel.json.parameter.MemberSubstitution&gt;());
jsonOptions.setUseLabels(true);{{#bodyParams}}

xact.templates.Document body;{{#isArray}}
List&lt;GeneralXynaObject&gt; list = new ArrayList&lt;&gt;(this.get{{#lambda.pascalcase}}{{paramName}}{{/lambda.pascalcase}}());
body = (xact.templates.Document)xfmg.xfctrl.datamodel.json.JSONDatamodelServices.writeJSONListWithOptions(list, jsonOptions);{{/isArray}}{{^isArray}}
body = (xact.templates.Document)xfmg.xfctrl.datamodel.json.JSONDatamodelServices.writeJSONWithOptions(this.get{{#lambda.pascalcase}}{{paramName}}{{/lambda.pascalcase}}(), jsonOptions);{{/isArray}}{{^isModel}}{{#primitiveType}}
body = new xact.templates.Document();
body.setText(get{{#lambda.pascalcase}}{{paramName}}{{/lambda.pascalcase}}().toString());{{/primitiveType}}{{/isModel}}

return xact.http.HTTPService.sendDocument(hTTPConnection1, sendParameter2, body);{{/bodyParams}}{{/hasBodyParam}}
</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation Label="Validate" Name="validate" IsStatic="false">
      <Input>
      </Input>
      <Output>
        <Data ID="9" Label="OASValidationResult" VariableName="oASValidationResult9" ReferenceName="OASValidationResult" ReferencePath="xmcp.oas.datatype"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">xmcp.oas.datatype.OASValidationResult result = new xmcp.oas.datatype.OASValidationResult();
result.setErrorMessages(new ArrayList&lt;String&gt;());

{{#allParams}}{{>validation}}{{/allParams}}
return result.getResult();
</CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
{{/operation}}{{/operations}}