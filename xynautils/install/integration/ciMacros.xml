<?xml version="1.0" encoding="UTF-8"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2022 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<antlib>

  <!-- = = = = = = = = = = = = = = = = =
          macrodef: storeConfig          
         = = = = = = = = = = = = = = = = = -->
  <macrodef name="storeConfig">
    <attribute name="version" />
    <sequential>
      <!-- remember version number -->
      <propertyfile file="integration.properties">
        <entry key="integration.number" value="@{version}" />
      </propertyfile>
    </sequential>
  </macrodef>

  <!-- = = = = = = = = = = = = = = = = =
          macrodef: loadConfig          
         = = = = = = = = = = = = = = = = = -->
  <macrodef name="loadConfig"
            description="Load configuration of continouse intergration. Needed because of split integration jobs.">
    <sequential>
      <!-- find path of hudson job which builds the delivery item. -->
      <condition property="hudson.build.job"
                 value="${basedir}/../../../.."
                 else="${user.home}/.hudson/jobs/${hudson.delivery.job}">
        <available file="integration.properties" />
      </condition>
      <!-- load current build.number -->
      <loadproperties srcfile="${hudson.build.job}/workspace/${hudson.checkout.project}/installation/integration/integration.properties" />
      <!-- find path to delivery item (delivery.dir) -->
      <condition property="hudson.delivery.dir"
                 value="${hudson.build.job}/workspace/${hudson.checkout.project}/installation/delivery/${delivery.dir}"
                 else="${delivery.dir}">
        <!-- Is true, if delivery.dir is releative path -->
        <available file="${hudson.build.job}/workspace/${hudson.checkout.project}/installation/delivery/${delivery.dir}" />
      </condition>
    </sequential>
  </macrodef>

  <!-- = = = = = = = = = = = = = = = = =
          macrodef: uninstall          
         = = = = = = = = = = = = = = = = = -->
  <macrodef name="uninstall"
            description="Uninstall all deliveries with given prefix from 
                         remote server by executing given target. 
                         Also delivery folder will be removed.">
    <attribute name="target" />
    <attribute name="prefix" />
    <sequential>
      <echo message="+++ Start uninstall +++" />
      <loadConfig />
      <scp todir="${ci.user}:${ci.password}@${ci.host}:${ci.path}">
        <fileset dir="${basedir}">
          <include name="uninstall.sh" />
        </fileset>
      </scp>
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="chmod 755 ${ci.path}/uninstall.sh" />
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="ls -d ${ci.path}/${delivery.name}_@{prefix}*"
               output="installed.txt"
               failonerror="false" />
      <replace file="installed.txt">
        <replacefilter token="${ci.path}/${delivery.name}_" value="" />
        <replacefilter token="@{prefix}*: No such file or directory" value="" />
      </replace>
      <loadfile property="installed.versions" srcfile="installed.txt" />
      <delete file="installed.txt" />
      <for list="${installed.versions}"
           delimiter="${line.separator}"
           param="version">
        <sequential>
          <sshexec host="${ci.host}"
                   username="${ci.user}"
                   password="${ci.password}"
                   command="${ci.path}/uninstall.sh ${ci.path} ${delivery.name}_@{version} @{target}" />
          <sshexec host="${ci.host}"
                   username="${ci.user}"
                   password="${ci.password}"
                   command="rm -r ${ci.path}/${delivery.name}_@{version}" />
        </sequential>
      </for>
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="rm ${ci.path}/uninstall.sh" />
    </sequential>
  </macrodef>

  <!-- = = = = = = = = = = = = = = = = =
          macrodef: install          
         = = = = = = = = = = = = = = = = = -->
  <macrodef name="install">
    <attribute name="target"
               default="install"
               description="Target to call on install.xml" />
    <sequential>
      <echo message="+++ Start install with target @{target} +++" />
      <loadConfig />
      <fail message="Delivery item ${delivery.name}_${integration.number}.zip not found in ${hudson.delivery.dir}">
        <condition>
          <not>
            <available file="${hudson.delivery.dir}/${delivery.name}_${integration.number}.zip" />
          </not>
        </condition>
      </fail>
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="mkdir ${ci.path}"
               failonerror="false" />
      <scp todir="${ci.user}:${ci.password}@${ci.host}:${ci.path}"
           verbose="true">
        <fileset dir="${hudson.delivery.dir}">
          <include name="${delivery.name}_${integration.number}.zip" />
        </fileset>
        <fileset dir="${basedir}">
          <include name="install.sh" />
        </fileset>
      </scp>
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="mkdir ${ci.env.path}"
               failonerror="false" />
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="hostname"
               output="hostname.txt" />
      <replaceregexp file="hostname.txt" flags="g" match="\s*" replace="" />
      <loadfile srcFile="hostname.txt" property="server.hostname" />
      <delete file="hostname.txt" />
      <scp todir="${ci.user}:${ci.password}@${ci.host}:${ci.env.path}"
           verbose="true">
        <fileset dir="${basedir}/../environment">
          <include name="${server.hostname}.properties" />
          <include name="${delivery.name}.properties" />
          <include name="${delivery.name}_${server.hostname}.properties" />
        </fileset>
      </scp>
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="unzip ${ci.path}/${delivery.name}_${integration.number}.zip -d ${ci.path}" />
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="rm ${ci.path}/${delivery.name}_${integration.number}.zip" />
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="rm ${ci.path}/${delivery.name}_${integration.number}/install/patch.properties" />
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="touch ${ci.path}/${delivery.name}_${integration.number}/install/patch.properties" />
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="chmod 755 ${ci.path}/install.sh" />
      <sshexec host="${ci.host}"
               username="${ci.user}"
               password="${ci.password}"
               command="${ci.path}/install.sh ${ci.path} ${delivery.name}_${integration.number} @{target}" />
    </sequential>
  </macrodef>

</antlib>