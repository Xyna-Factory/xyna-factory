/*
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2022 GIP SmartMercial GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
package com.gip.xyna.utils.db.utils;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import com.gip.xyna.utils.db.WrappedConnection;

/**
 * WrappedConnection, bei der alle Aufrufe, die etwas mit SQL-Strings zu tun haben, 
 * zuerst die abstrakte Methode "lastSQL(String sql)" ausführen und "rollback" und "commit" zuerst 
 * "lastCommitOrRollback(boolean commit)" ausführen. Damit kann beispielsweise ein besonderes Logging
 * verwendet werden.
 */
public abstract class SQLInstrumentedWrappedConnection extends WrappedConnection {

  public SQLInstrumentedWrappedConnection(Connection con) {
    super(con);
  }
  
  protected abstract void lastSQL(String sql) throws SQLException;
  protected abstract void lastCommitOrRollback(boolean commit) throws SQLException;

  public PreparedStatement prepareStatement(String sql) throws SQLException {
    lastSQL(sql);
    return con.prepareStatement(sql);
  }

  public CallableStatement prepareCall(String sql) throws SQLException {
    lastSQL(sql);
    return con.prepareCall(sql);
  }

  public String nativeSQL(String sql) throws SQLException {
    lastSQL(sql);
    return con.nativeSQL(sql);
  }

  public void commit() throws SQLException {
    lastCommitOrRollback(true);
    con.commit();
  }

  public void rollback() throws SQLException {
    lastCommitOrRollback(false);
    con.rollback();
  }
  
  public PreparedStatement prepareStatement(String sql, int resultSetType,
    int resultSetConcurrency) throws SQLException {
    lastSQL(sql);
    return con.prepareStatement(sql, resultSetType, resultSetConcurrency);
  }

  public CallableStatement prepareCall(String sql, int resultSetType,
    int resultSetConcurrency) throws SQLException {
    lastSQL(sql);
    return con.prepareCall(sql, resultSetType, resultSetConcurrency);
  }

  public PreparedStatement prepareStatement(String sql, int resultSetType,
    int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    lastSQL(sql);
    return con.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
    int resultSetHoldability) throws SQLException {
    lastSQL(sql);
    return con.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  public PreparedStatement prepareStatement(String sql,
    int autoGeneratedKeys) throws SQLException {
    lastSQL(sql);
    return con.prepareStatement(sql, autoGeneratedKeys);
  }

  public PreparedStatement prepareStatement(String sql,
    int[] columnIndexes) throws SQLException {
    lastSQL(sql);
    return con.prepareStatement(sql, columnIndexes);
  }

  public PreparedStatement prepareStatement(String sql,
    String[] columnNames) throws SQLException {
    lastSQL(sql);
    return con.prepareStatement(sql, columnNames);
  }
  
  //alle anderen Methoden werden einfach an con weitergeleitet
}
