<?xml version="1.0" encoding="UTF-8"?>
<!--
 *
 *  Copyright GIP AG 2008
 *  (http://www.gip.com)
 *
 *  Heinrich-von-Brentano-Str. 2
 *  55130 Mainz
 * ___________________________________________________
 *
 *  $Revision: 66163 $
 *  $Date: 2010-04-16 09:33:32 +0200 (Fr, 16. Apr 2010) $
 *
-->
<project name="ci" basedir=".">

	<!--
     For each of the following targets an own hudson job can be created.
     An integration build can be created by a single target (integration)
     or by multible steps (delivery, test_teslivery, update and test).

     nightbuild:
        1. If previous nightbuild exists, target uninstall will be run on this installation
           and the delivery folder will be removed from remote server.
        2. Build a new delivery item
        3. Run tests on delivery item
        4. Install delivery item on remote server
        5. Run system tests on installation

     integration:
        1. Build new delivery item
        2. Run tests on delivery item
        3. If previous integration build exists, target uninstall-workflow will be run on
           this installation and the delivery folder will be removed from remote server.
        4. Update existing installation on remote server
        5. Run system tests on installation

     delivery:
        * Build new delivery item

     test_delivery:
        * Run tests on delivery item

     update:
        1. If previous integration build exists, target uninstall-workflow will be run on
           this installation and the delivery folder will be removed from remote server.
        2. Update existing installation on remote server

     test:
        * Run system tests on installation
  -->

<!--	<path id="missing.ci.libs">
		<fileset id="fileset.ci.libs"
		         dir="${basedir}/lib"
		         includes="*.jar">
			<present targetdir="${user.home}/.ant/lib" present="srconly" />
		</fileset>
	</path>

	<pathconvert property="list.missing.ci.libs" pathsep=" ">
		<mapper type="flatten" />
		<path refid="missing.ci.libs" />
	</pathconvert>

	<copy todir="${user.home}/.ant/lib" flatten="true">
		<fileset refid="fileset.ci.libs" />
	</copy>

	<fail message="Libraries needed for ant execution are missing. Libraries are copyied to ${user.home}/.ant/lib. Please restart script.">
		<condition>
			<not>
				<equals arg1="${list.missing.ci.libs}" arg2="" />
			</not>
		</condition>
	</fail>-->

	<loadproperties srcfile="ci.properties" />
	<loadproperties srcfile="${basedir}/../delivery/delivery.properties" />

	<tstamp>
		<format property="timestamp" pattern="yyyyMMdd_HHmm" locale="de,DE" />
	</tstamp>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${basedir}/../lib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<property name="checkout.dir" value="${basedir}/../.." />
	<property name="delivery.build.dir"
	          value="${basedir}/${delivery.dir}/build_${timestamp}" />

	<condition property="workspace.dir"
	           value="${user.home}/.hudson/jobs/${hudson.delivery.job}/workspace"
	           else="${basedir}/../../..">
		<available file="${user.home}/.hudson/jobs/${hudson.delivery.job}/workspace" />
	</condition>

	<condition property="workspace.test.dir"
	           value="${user.home}/.hudson/jobs/${hudson.delivery.test.job}/workspace"
	           else="${basedir}/../../..">
		<available file="${user.home}/.hudson/jobs/${hudson.delivery.test.job}/workspace" />
	</condition>

	<condition property="workspace.night.dir"
	           value="${user.home}/.hudson/jobs/${hudson.nightbuild.job}/workspace"
	           else="${basedir}/../../..">
		<available file="${user.home}/.hudson/jobs/${hudson.nightbuild.job}/workspace" />
	</condition>

	<property name="release.dir"
	          value="${workspace.dir}/${hudson.checkout.project}/releases" />
	<property name="installation.dir"
	          value="${workspace.dir}/${hudson.checkout.project}/installation" />
	<property name="testresults.dir"
	          value="${workspace.test.dir}/${hudson.checkout.project}/testresults" />

	<import file="${basedir}/../delivery/deliveryMacros.xml" />

	<!-- =================================
          target: nightbuild
         ================================= -->
	<target name="nightbuild">
		<delete failonerror="false">
			<fileset dir="${delivery.dir}">
				<include name="${delivery.name}_N*.zip" />
			</fileset>
		</delete>
		<buildVersion version="N${timestamp}" />
<!-- 		<install releasedir="${workspace.night.dir}/${hudson.checkout.project}/releases" /> -->
		<!--<install target="test" />-->
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          target: uninstall-nightbuild
         - - - - - - - - - - - - - - - - - -->
	<target name="uninstall-nightbuild">
		<uninstall target="uninstall" prefix="N" />
	</target>

	<!-- =================================
            target: integration
           ================================= -->
	<target name="integration"
	        depends="delivery, test_delivery, update, test"
	        description="Complete build (inculding test) and update" />

	<!-- =================================
            target: delivery
           ================================= -->
	<target name="delivery" description="Build a new delivery item">
		<delete failonerror="false">
			<fileset dir="${delivery.dir}">
				<include name="${delivery.name}_I*.zip" />
			</fileset>
		</delete>
		<delete dir="${delivery.dir}" failonerror="false" />
		<buildVersion version="I${timestamp}" />
	</target>

	<!-- =================================
            target: update
           ================================= -->
	<target name="update"
	        depends="uninstall-integration"
	        description="Update existing installation on remote server">
		<loadproperties srcfile="${installation.dir}/integration/integration.properties" />
		<delete>
			<fileset dir="${delivery.dir}">
				<include name="*.zip" />
			</fileset>
		</delete>
		<copy todir="${delivery.dir}"
		      file="${release.dir}/${delivery.name}_${integration.number}.zip" />
		<install target="update" />
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          target: uninstall-integration
         - - - - - - - - - - - - - - - - - -->
	<target name="uninstall-integration">
		<uninstall target="uninstall-workflow" prefix="I" />
	</target>

	<!-- =================================
           target: test
          ================================= -->
	<target name="test" description="Run system tests on installation">
		<!--<delete dir="../../testresults" />-->
		<loadproperties srcfile="${installation.dir}/integration/integration.properties" />
		<sshexec host="${ci.host}"
		         username="${ci.user}"
		         password="${ci.password}"
		         command="${ci.path}/install.sh ${ci.path} ${delivery.name}_${integration.number} test" />
		<mkdir dir="../../testresults" />
		<scp file="${ci.user}:${ci.password}@${ci.host}:${ci.path}/${delivery.name}_${integration.number}/testresults/*"
		     todir="../../testresults" />
	</target>

	<!-- =================================
            target: test_delivery
           ================================= -->
	<target name="test_delivery" description="Run tests on delivery item">
		<loadproperties srcfile="${installation.dir}/integration/integration.properties" />
		<ant dir="${installation.dir}/build">
			<target name="test" />
		</ant>
		<zip destfile="${release.dir}/${delivery.name}_${integration.number}.zip"
		     update="true">
			<zipfileset dir="${delivery.build.dir}/testresults"
			            prefix="${delivery.name}_${integration.number}/testresults"
			            includes="*" />
		</zip>
		<copy todir="${testresults.dir}">
			<fileset dir="${delivery.build.dir}/testresults" includes="*" />
		</copy>
		<delete dir="${delivery.build.dir}" />
	</target>

	<!-- = = = = = = = = = = = = = = = = =
               macrodef: buildVersion
              = = = = = = = = = = = = = = = = = -->
	<macrodef name="buildVersion">
		<attribute name="version" />
		<element name="additionalTargets" optional="true" implicit="true" />
		<sequential>
			<ant dir="../build">
				<property name="release.number" value="@{version}" />
				<target name="build" />
				<additionalTargets />
			</ant>
			<zipDeliveryItems name="${delivery.name}_@{version}" />
			<delete dir="${delivery.build.dir}" />
			<!--<propertyfile file="${installation.dir}/integration/integration.properties">
				<entry key="integration.number" value="@{version}" />
			</propertyfile>-->
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: uninstall
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="uninstall"
	          description="Uninstall all deliveries with given prefix from
                         remote server by executing given target.
                         Also delivery folder will be removed.">
		<attribute name="target" />
		<attribute name="prefix" />
		<sequential>
			<scp todir="${ci.user}:${ci.password}@${ci.host}:${ci.path}">
				<fileset dir="${checkout.dir}/installation/integration">
					<include name="uninstall.sh" />
				</fileset>
			</scp>
			<sshexec host="${ci.host}"
			         username="${ci.user}"
			         password="${ci.password}"
			         command="chmod 755 ${ci.path}/uninstall.sh" />
			<sshexec host="${ci.host}"
			         username="${ci.user}"
			         password="${ci.password}"
			         command="ls -d ${ci.path}/${delivery.name}_@{prefix}*"
			         output="installed.txt"
			         failonerror="false" />
			<replace file="installed.txt">
				<replacefilter token="${ci.path}/${delivery.name}_" value="" />
				<replacefilter token="@{prefix}*: No such file or directory"
				               value="" />
			</replace>
			<loadfile property="installed.versions" srcfile="installed.txt" />
			<foreach list="${installed.versions}"
			         delimiter="${line.separator}"
			         target="remove_delivery"
			         param="version">
				<param name="target" value="@{target}" />
			</foreach>
			<sshexec host="${ci.host}"
			         username="${ci.user}"
			         password="${ci.password}"
			         command="rm ${ci.path}/uninstall.sh" />
		</sequential>
	</macrodef>

	<!-- - - - - - - - - - - - - - - - - -
          target: remove_delivery
         - - - - - - - - - - - - - - - - - -->
	<target name="remove_delivery">
		<sshexec host="${ci.host}"
		         username="${ci.user}"
		         password="${ci.password}"
		         command="${ci.path}/uninstall.sh ${ci.path} ${delivery.name}_${version} ${target}" />
		<sshexec host="${ci.host}"
		         username="${ci.user}"
		         password="${ci.password}"
		         command="rm -r ${ci.path}/${delivery.name}_${version}" />
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: install
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="install">
		<attribute name="target"
		           default="install"
		           description="Target to call on install.xml" />
		<attribute name="releasedir" default="${release.dir}" />
		<sequential>
			<loadproperties srcfile="${installation.dir}/integration/integration.properties" />
			<sshexec host="${ci.host}"
			         username="${ci.user}"
			         password="${ci.password}"
			         command="mkdir ${ci.path}"
			         failonerror="false" />
			<scp todir="${ci.user}:${ci.password}@${ci.host}:${ci.path}"
			     verbose="true">
				<fileset dir="@{releasedir}">
					<include name="${delivery.name}_${integration.number}.zip" />
				</fileset>
				<fileset dir="${checkout.dir}/installation/integration">
					<include name="install.sh" />
				</fileset>
			</scp>
			<sshexec host="${ci.host}"
			         username="${ci.user}"
			         password="${ci.password}"
			         command="mkdir ${ci.env.path}"
			         failonerror="false" />
			<sshexec host="${ci.host}"
			         username="${ci.user}"
			         password="${ci.password}"
			         command="hostname"
			         output="hostname.txt" />
			<replaceregexp file="hostname.txt"
			               flags="g"
			               match="\s*"
			               replace="" />
			<loadfile srcFile="hostname.txt" property="server.hostname" />
			<delete file="hostname.txt" />
			<scp todir="${ci.user}:${ci.password}@${ci.host}:${ci.env.path}"
			     verbose="true">
				<fileset dir="${checkout.dir}/installation/environment">
					<include name="${server.hostname}.properties" />
					<include name="${delivery.name}.properties" />
				</fileset>
			</scp>
			<sshexec host="${ci.host}"
			         username="${ci.user}"
			         password="${ci.password}"
			         command="unzip ${ci.path}/${delivery.name}_${integration.number}.zip -d ${ci.path}" />
			<sshexec host="${ci.host}"
			         username="${ci.user}"
			         password="${ci.password}"
			         command="rm ${ci.path}/${delivery.name}_${integration.number}.zip" />
			<sshexec host="${ci.host}"
			         username="${ci.user}"
			         password="${ci.password}"
			         command="chmod 755 ${ci.path}/install.sh" />
			<sshexec host="${ci.host}"
			         username="${ci.user}"
			         password="${ci.password}"
			         command="${ci.path}/install.sh ${ci.path} ${delivery.name}_${integration.number} @{target}" />
		</sequential>
	</macrodef>

</project>