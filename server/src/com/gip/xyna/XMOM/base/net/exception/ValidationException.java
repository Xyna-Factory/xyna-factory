/*
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2022 GIP SmartMercial GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
package com.gip.xyna.XMOM.base.net.exception;

import java.lang.reflect.Field;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import com.gip.xyna.utils.exceptions.XynaException;
import com.gip.xyna.xdev.exceptions.XDEV_PARAMETER_NAME_NOT_FOUND;
import com.gip.xyna.xdev.xfractmod.xmdm.GeneralXynaObject;
import com.gip.xyna.xdev.xfractmod.xmdm.XOUtils;
import com.gip.xyna.xdev.xfractmod.xmdm.XynaExceptionBase;
import com.gip.xyna.xdev.xfractmod.xmdm.XynaObject.XMLHelper;
import com.gip.xyna.xprc.xfractwfe.InvalidObjectPathException;

//DO NOT CHANGE
//GENERATED BY com.gip.xyna.utils.exceptions.utils.codegen.JavaClass 2014-12-12T13:48:09Z;
public abstract class ValidationException extends XynaExceptionBase implements GeneralXynaObject {

  private static final long serialVersionUID = -43250596537L;

  private String parameter1;

  public ValidationException(String parameter1) {
    super(new String[]{parameter1 + ""});
    setParameter1(parameter1);
  }

  public ValidationException(String parameter1, Throwable cause) {
    super(new String[]{parameter1 + ""}, cause);
    setParameter1(parameter1);
  }

  protected ValidationException(String[] args) {
    super(args);
  }

  protected ValidationException(String[] args, Throwable cause) {
    super(args, cause);
  }

  public String getParameter1() {
    return parameter1;
  }

  public ValidationException initCause(Throwable t) {
    return (ValidationException) super.initCause(t);
  }
  
  protected void refreshArgs() {
    super.refreshArgs();
    String[] args = getArgs();
   args[0] = parameter1 + ""; 
  }
  
  private volatile com.gip.xyna.xdev.xfractmod.xmdm.XOUtils.VersionedObject<String> oldVersionsOfparameter1;



  public void setParameter1(String parameter1) {
    if (supportsObjectVersioning()) {
      com.gip.xyna.xdev.xfractmod.xmdm.XOUtils.VersionedObject<String> _vo = oldVersionsOfparameter1;
      if (_vo == null) {
        synchronized (this) {
          _vo = oldVersionsOfparameter1;
          if (_vo == null) {
            oldVersionsOfparameter1 = _vo = new com.gip.xyna.xdev.xfractmod.xmdm.XOUtils.VersionedObject<String>();
          }
        }
      }
      synchronized (_vo) {
        _vo.add(this.parameter1);
        this.parameter1 = parameter1;
      }
      return;
    }
    this.parameter1 = parameter1;
  }


  public String versionedGetParameter1(long _version) {
    if (oldVersionsOfparameter1 == null) {
      return parameter1;
    }
    String _local = parameter1;
    com.gip.xyna.xdev.xfractmod.xmdm.XOUtils.Version<String> _ret = oldVersionsOfparameter1.getVersion(_version);
    if (_ret == null) {
      return _local;
    }
    return _ret.object;
  }


  public static class ObjectVersion extends com.gip.xyna.xdev.xfractmod.xmdm.XOUtils.ObjectVersionBase {

    public ObjectVersion(GeneralXynaObject xo, long version, java.util.IdentityHashMap<GeneralXynaObject, com.gip.xyna.utils.misc.DataRangeCollection> changeSetsOfMembers) {
      super(xo, version, changeSetsOfMembers);
    }

    protected boolean memberEquals(com.gip.xyna.xdev.xfractmod.xmdm.XOUtils.ObjectVersionBase o) {
      ObjectVersion other = (ObjectVersion) o;
      ValidationException xoc = (ValidationException) xo;
      ValidationException xoco = (ValidationException) other.xo;
      if (!equal(xoc.versionedGetParameter1(this.version), xoco.versionedGetParameter1(other.version))) {
        return false;
      }
      return true;
    }

    public int calcHashOfMembers(java.util.Stack<GeneralXynaObject> stack) {
      int hash = 1;
      ValidationException xoc = (ValidationException) xo;
      String parameter1 = xoc.versionedGetParameter1(this.version);
      hash = hash * 31 + (parameter1 == null ? 0 : parameter1.hashCode());
      return hash;
    }

  }


  public ObjectVersion createObjectVersion(long version, java.util.IdentityHashMap<GeneralXynaObject, com.gip.xyna.utils.misc.DataRangeCollection> changeSetsOfMembers) {
    return new ObjectVersion(this, version, changeSetsOfMembers);
  }

  
  public void unversionedSetParameter1(String parameter1) {
    this.parameter1 = parameter1;
  }

  
  public boolean supportsObjectVersioning() {
    return XOUtils.supportsObjectVersioningForInternalObjects();
  }

  public void collectChanges(long start, long end, java.util.IdentityHashMap<GeneralXynaObject, com.gip.xyna.utils.misc.DataRangeCollection> changeSetsOfMembers, java.util.Set<Long> datapoints) {
    XOUtils.addChangesForSimpleMember(oldVersionsOfparameter1, start, end, datapoints);
  }


  public String toXml() {
    return toXml(null);
  }

  public String toXml(String varName) {
    return toXml(varName, false, -1, null);
  }

  public String toXml(String varName, boolean onlyContent) {
    return toXml(varName, onlyContent, -1, null);
  }


  public String toXml(String varName, boolean onlyContent, long version, com.gip.xyna.xdev.xfractmod.xmdm.GeneralXynaObject.XMLReferenceCache cache) {
    long objectId;
    long refId;
    if (cache != null) {
      ObjectVersion ov = new ObjectVersion(this, version, cache.changeSetsOfMembers);
      refId = cache.putIfAbsent(ov);
      if (refId > 0) {
        objectId = -2;
      } else {
        objectId = -refId;
        refId = -1;
      }
    } else {
      objectId = -1;
      refId = -1;
    }
    StringBuilder xml = new StringBuilder();
    com.gip.xyna.xdev.xfractmod.xmdm.XynaObject.XMLHelper.beginExceptionType(xml, varName, "ValidationException", "base.net.exception", objectId, refId);
    if (objectId != -2) {
      XMLHelper.appendData(xml, "parameter1", versionedGetParameter1(version), version, cache);
    }
    xml.append("</Exception>");
    return xml.toString();
  }

  protected void fillVars(ValidationException source, boolean deep) {
    this.parameter1 = source.parameter1;
  }

  public abstract ValidationException cloneWithoutCause();

  public abstract ValidationException cloneWithoutCause(boolean deep);



  public Object get(String name) throws InvalidObjectPathException {
    String[] varNames = new String[] {"parameter1"};
    Object[] vars = new Object[] {this.parameter1};
    Object o = XOUtils.getIfNameIsInVarNames(varNames, vars, name);
    if (o == XOUtils.VARNAME_NOTFOUND) {
      throw new InvalidObjectPathException(new XDEV_PARAMETER_NAME_NOT_FOUND(name));
    }
    return o;
  }


  public void set(String name, Object o) throws XDEV_PARAMETER_NAME_NOT_FOUND {
    if ("parameter1".equals(name)) {
      XOUtils.checkCastability(o, String.class, "parameter1");
      setParameter1((String) o);
    } else {
      throw new XDEV_PARAMETER_NAME_NOT_FOUND(name);
    }
  }

  
  protected static class InternalBuilder<_GEN_DOM_TYPE extends ValidationException, _GEN_BUILDER_TYPE extends InternalBuilder<_GEN_DOM_TYPE, _GEN_BUILDER_TYPE>>  {

    protected _GEN_DOM_TYPE instance;

    protected InternalBuilder(ValidationException instance) {
      this.instance = (_GEN_DOM_TYPE) instance;
    }

    public ValidationException instance() {
      return (ValidationException) instance;
    }

    public _GEN_BUILDER_TYPE parameter1(String parameter1) {
      this.instance.unversionedSetParameter1(parameter1);
      return (_GEN_BUILDER_TYPE) this;
    }

  }

  
  private static ConcurrentMap<String, Field> fieldMap = new ConcurrentHashMap<>();
  
  public static Field getField(String target_fieldname) {
    Field foundField = null;
    foundField = fieldMap.get(target_fieldname);
    if (foundField != null) {
      return foundField;
    }
    try {
      foundField = ValidationException.class.getDeclaredField(target_fieldname);
    } catch (NoSuchFieldException e) {
    }
    if (foundField == null) {
      return XynaException.getField(target_fieldname);
    } else {
      foundField.setAccessible(true);
      fieldMap.put(target_fieldname, foundField);
      return foundField;
    }
  }
  
}
