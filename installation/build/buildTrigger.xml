<?xml version="1.0" encoding="UTF-8"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2022 GIP SmartMercial GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 -->
<project name="buildTrigger" default="deploy" basedir="." xmlns:resolver="antlib:org.apache.maven.resolver.ant">

    <property name="root.dir" value="${basedir}/../.." />

    <import file="./ant-xyna.xml" />
    <!--import file="${root.dir}/installation/build/ant-xyna.xml" /-->

    <property name="common.lib.dir" value="${root.dir}/installation/build/lib/factory" />
    <property name="common.xyna.lib.dir" value="${root.dir}/common/lib/xyna" />

    <import file="./macros.xml" />

    <property name="base.lib.dir" value="${basedir}/lib" />
    <property name="local.xml.dir" value="${basedir}/xmldefinition" />
    <property name="target.dir" value="${basedir}/deploy" />

    <property file="${basedir}/server.properties" />
    <property file="${root.dir}/server.properties" />

    <!-- depends on server make use of server variable -->
    <property name="server.mdm.path" value="${server.path}/${revision.dir}/saved/trigger/${project.name}" />
    <property name="deploy.sharedlibs" value=":" />
    <property name="deploy.template" value="addtrigger -fqClassName ${fqclassname} -workspaceName '${workspacename}' -jarFiles ${server.mdm.path}/${project.name}.jar -sharedLibs ${deploy.sharedlibs} -triggerName ${project.name}" />
    <!-- FIXME warten auf Bug 21901, damit -jarFiles optional wird. Derzeit können nicht mehrere jars deployt werden! -->

    <resolver:pom file="${basedir}/pom.xml" id="pom"/>

    <checkJavaVersion />
    <checkServerProperties />

    <condition property="exceptions.available">
        <available file="${basedir}/Exceptions.xml" />
    </condition>


    <!-- =================================
         target: build-app
         ================================= -->
    <target name="build-app" description="Build for application">
        <antcall target="build">
            <param name="target.dir" value="${target.dir}/trigger/${project.name}" />
        </antcall>
        <copyLicense from="${base.lib.dir}" to="${target.dir}/third_parties" />
    </target>


    <!-- ================================= 
                target: deploy             
               ================================= -->
    <target name="deploy" depends="build" description="Deploy jar file to xyna server.">
        <fail message="No server properties specified. Unable to deploy." unless="server.available" />
        <!-- clean directory on xyna server -->
        <!--<custom-ssh-exec host="${server.host}" username="${server.userid}" command="rm -rf ${server.mdm.path}" /> -->
        <!-- create directory on xyna server -->
        <custom-ssh-exec host="${server.host}" username="${server.userid}" command="mkdir -p ${server.mdm.path}" />
        <!-- copy xml file to server -->
        <if>
            <equals arg1="${server.transmitXml}" arg2="yes" />
            <then>
                <echo message="Copying XML file ${local.xml.dir}/${server.mdm.xml.filename} to server ${server.host}:${server.mdm.xml.path}" />
                <custom-scp-to-remote fromdir="${local.xml.dir}" frominclude="${server.mdm.xml.filename}" todir="${server.userid}@${server.host}:${server.mdm.xml.path}" />
            </then>
        </if>
        <!-- copy libraries and licences to xyna server -->
        <custom-scp-to-remote fromdir="${target.dir}" frominclude="**/*" todir="${server.userid}@${server.host}:${server.mdm.path}" />

        <!-- deploy trigger -->
        <custom-ssh-exec host="${server.host}" username="${server.userid}" command="cd ${server.path}; ./xynafactory.sh ${deploy.template}" />
    </target>

    <!-- =================================
               target: resolve             
          =================================  -->
      <target name="resolve">
        <resolver:resolve>
          <resolver:dependencies pomRef="pom"/>
          <resolver:remoterepos refid="xyna.repository"/>
          <resolver:files refid="files" dir="${base.lib.dir}/xyna" layout="{artifactId}-{classifier}-{version}.{extension}"/>
          <resolver:files refid="files" dir="${base.lib.dir}" layout="{artifactId}-{classifier}-{version}.{extension}" scopes="runtime"/>
        </resolver:resolve>
        <loadLicenses targetDir="${base.lib.dir}" />
        <!-- delete generated-resources ? -->
      </target>

    <!-- =================================
         target: prepareLibs
         ================================= -->
    <target name="prepareLibs" description="Build for application">
        <!-- leer, überschreibbar im build.xml -->
    </target>


    <!-- ================================= 
         target: build             
         ================================= -->
    <target name="build" depends="resolve, prepareLibs, genExceptionClass" description="Build jar file with java implementation of services.">
        <delete dir="${basedir}/classes" failonerror="false"/>
        <mkdir dir="${basedir}/classes" />
        <javaCompile>
            <classpath path="${basedir}/classes" />
            <classpath>
                <fileset dir="${base.lib.dir}">
                    <include name="**/*.jar" />
                </fileset>
            </classpath>
        </javaCompile>
        <mkdir dir="${target.dir}" />
        <jar destfile="${target.dir}/${project.name}.jar">
            <manifest>
                <attribute name="Vendor" value="${vendor.name}" />
                <attribute name="Version" value="${release.number}" />
                <attribute name="Build-Date" value="${timestamp}" />
            </manifest>
            <fileset dir="${basedir}/classes">
                <include name="**/*.class" />
            </fileset>
            <fileset dir="${basedir}">
                <include name="Exceptions.xml" />
            </fileset>
            <fileset dir="${basedir}/src">
                <include name="**/*.xml" />
            </fileset>
        </jar>

        <!-- copy libraries to target.dir -->
        <copyJar from="${base.lib.dir}" to="${target.dir}" />
        <copyLicense from="${base.lib.dir}" to="${target.dir}" />

        <copy todir="${target.dir}">
            <fileset dir="${basedir}/xmldefinition">
                <include name="${server.mdm.xml.filename}" />
            </fileset>
        </copy>
    </target>

    <!-- ================================= 
          target: updateMDMandXynaFactoryJar
         ================================= -->
    <target name="updateMDMandXynaFactoryJar" description="Receive new mdm.jar and xynafactory.jar from Xyna Factory">
        <fail message="No server properties specified. Unable to deploy." unless="server.available" />
        <!-- build mdm.jar -->
        <custom-ssh-exec host="${server.host}" username="${server.userid}" command="cd ${server.path}; ./xynafactory.sh buildmdmjar" />
        <!-- copy mdm.jar from xyna server -->
        <custom-scp-from-remote fromfile="${server.userid}@${server.host}:${server.path}/mdm.jar" todir="${base.lib.dir}/xyna" />
        <!-- copy xynafactory.jar from xyna server -->
        <custom-scp-from-remote fromfile="${server.userid}@${server.host}:${server.path}/lib/xynafactory.jar" todir="${common.xyna.lib.dir}" />
    </target>

    <!-- ================================= 
         target: genExceptionClass
         ================================= -->
    <target name="genExceptionClass" description="Generate code class for exceptions." if="${exceptions.available}">
        <java fork="true" failonerror="yes" classname="com.gip.xyna.utils.exceptions.ExceptionStorage">
            <sysproperty key="BLACK_SERVER_HOME" value="${root.dir}/server" />
            <classpath>
                <fileset dir="${basedir}/lib">
                    <include name="**/*.jar" />
                </fileset>
            </classpath>
            <arg value="Exceptions.xml" />
            <arg value="${basedir}/src" />
            <arg value="y" />
        </java>
    </target>
</project>

