<?xml version="1.0" encoding="UTF-8"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2023 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 -->
<project name="macros" basedir="." xmlns:resolver="antlib:org.apache.maven.resolver.ant" >

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${common.xyna.lib.dir}/ant-contrib.jar" />
        </classpath>
    </taskdef>


 <!-- = = = = = = = = = = = = = = = = =
              macrodef: buildJar
             = = = = = = = = = = = = = = = = =
    -->
    <macrodef name="buildJar">
        <attribute name="basedir"
                   default="${basedir}"
                   description="the directory from which to jar the files." />
        <attribute name="destfile" description="the JAR file to create." />
        <attribute name="src.dir" default="@{basedir}/src" />
        <attribute name="classes.dir" default="@{basedir}/classes" />
        <attribute name="lib.dir" default="@{basedir}/lib" />
        <attribute name="encoding" default="iso-8859-1" />
        <!--<element name="attributes"
                 optional="true"
                 description="Additional attributes for manifest" />-->
        <element name="additionalSrcDirs" optional="true" implicit="true" />
        <sequential>
            <compile basedir="@{basedir}"
                     src.dir="@{src.dir}"
                     classes.dir="@{classes.dir}"
                     lib.dir="@{lib.dir}"
                     encoding="@{encoding}">
                <additionalSrcDirs />
            </compile>
            <dirname file="@{destfile}" property="destdir" />
            <mkdir dir="${destdir}" />
            <jar destfile="@{destfile}">
                <manifest>
                    <attribute name="Vendor" value="${vendor.name}" />
                    <attribute name="Version" value="${release.number}" />
                    <attribute name="Build-Date" value="${timestamp}" />
                    <!--<attributes />-->
                </manifest>
                <fileset dir="@{classes.dir}">
                    <exclude name="**/*Test.java" />
                    <exclude name="**/AllTests.java" />
                </fileset>
                <fileset dir="@{basedir}" includes="**/Exceptions.xml" />
            </jar>
        </sequential>
    </macrodef>

  <!-- = = = = = = = = = = = = = = = = =
          macrodef: compile
         = = = = = = = = = = = = = = = = =
-->
    <macrodef name="compile" description="Compiles all source files (excluding test sources).">
        <attribute name="basedir" default="${basedir}" />
        <attribute name="src.dir" default="@{basedir}/src" />
        <attribute name="classes.dir" default="@{basedir}/classes" />
        <attribute name="lib.dir" default="@{basedir}/lib" />
        <attribute name="encoding" default="iso-8859-1" />
        <attribute name="memoryInitialSize" default="32m" />
        <!-- wird nur benutzt, wenn auch max ungleich -1 ist. -->
        <attribute name="memoryMaximumSize" default="-1" />
        <attribute name="target" default="-1" />
        <element name="additionalSrcDirs" implicit="true" optional="true" />
        <sequential>
            <classpath-run basedir="@{basedir}" classes.dir="@{classes.dir}" lib.dir="@{lib.dir}" />
            <delete dir="@{classes.dir}" includeemptydirs="true" failonerror="false" />
            <mkdir dir="@{classes.dir}" />
            <!-- copy meta data -->
            <copy todir="@{classes.dir}">
                <fileset dir="@{src.dir}">
                    <exclude name="**/*.java" />
                </fileset>
            </copy>
            <if>
                <equals arg1="@{memoryMaximumSize}" arg2="-1" />
                <then>
                    <if>
                        <equals arg1="@{target}" arg2="-1" />
                        <then>
                            <!-- use defaults of jvm for min and max-memory and target -->
                            <javac destdir="@{classes.dir}" sourcepath="" encoding="@{encoding}" debug="on" fork="yes" includeJavaRuntime="true">
                                <src path="@{src.dir}" />
                                <additionalSrcDirs />
                                <classpath refid="${classpath.run.@{basedir}}" />
                            </javac>
                        </then>
                        <else>
                            <!-- use defaults of jvm for min and max-memory -->
                            <javac destdir="@{classes.dir}" sourcepath="" encoding="@{encoding}" debug="on" fork="yes" includeJavaRuntime="true" target="@{target}">
                                <src path="@{src.dir}" />
                                <additionalSrcDirs />
                                <classpath refid="${classpath.run.@{basedir}}" />
                            </javac>
                        </else>
                    </if>
                </then>
                <else>
                    <if>
                        <equals arg1="@{target}" arg2="-1" />
                        <then>
                            <!-- use defaults of jvm for target -->
                            <javac destdir="@{classes.dir}" sourcepath="" encoding="@{encoding}" debug="on" fork="yes" includeJavaRuntime="true" memoryInitialSize="@{memoryInitialSize}" memoryMaximumSize="@{memoryMaximumSize}">
                                <src path="@{src.dir}" />
                                <additionalSrcDirs />
                                <classpath refid="${classpath.run.@{basedir}}" />
                            </javac>
                        </then>
                        <else>
                            <!-- use no defaults of jvm -->
                            <javac destdir="@{classes.dir}" sourcepath="" encoding="@{encoding}" debug="on" fork="yes" includeJavaRuntime="true" memoryInitialSize="@{memoryInitialSize}" memoryMaximumSize="@{memoryMaximumSize}" target="@{target}">
                                <src path="@{src.dir}" />
                                <additionalSrcDirs />
                                <classpath refid="${classpath.run.@{basedir}}" />
                            </javac>
                        </else>
                    </if>
                </else>
            </if>
        </sequential>
    </macrodef>

  <!-- = = = = = = = = = = = = = = = = =
                macrodef: classpath-run
               = = = = = = = = = = = = = = = = =
-->
    <macrodef name="classpath-run" description="Set classpath properties for compile. Should only called from compile macro.">
        <attribute name="basedir" default="${basedir}" />
        <attribute name="classes.dir" default="@{basedir}/classes" />
        <attribute name="lib.dir" default="@{basedir}/lib" />
        <sequential>
            <if>
                <isreference refid="libraries" />
                <then>
                    <echo message="Using Libraries" />
                    <path id="classpath.run.libs">
                        <fileset dir="@{lib.dir}">
                            <include name="**/*.jar" />
                        </fileset>
                        <path refid="libraries" />
                        <path refid="classpath.run.nolibs" />
                    </path>
                </then>
                <else>
                    <echo message="NOT using Libraries" />
                    <path id="classpath.run.libs">
                        <fileset dir="@{lib.dir}">
                            <include name="**/*.jar" />
                        </fileset>
                        <path refid="classpath.run.nolibs" />
                    </path>
                </else>
            </if>
            <path id="classpath.run.nolibs">
                <pathelement location="@{classes.dir}" />
                <path refid="classpath.oc4j" />
            </path>
            <condition property="classpath.run.@{basedir}" value="classpath.run.libs" else="classpath.run.nolibs">
                <or>
                    <available file="@{lib.dir}" />
                    <isreference refid="libraries" />
                </or>
            </condition>
        </sequential>
    </macrodef>

  <!-- = = = = = = = = = = = = = = = = =
          macrodef: genCodeClass          
         = = = = = = = = = = = = = = = = =
-->
  <macrodef name="genCodeClass">
    <attribute name="basedir" default="${basedir}" />
    <attribute name="libdir" default="@{basedir}/lib" />
    <attribute name="srcdir" default="@{basedir}/src" />
    <attribute name="exceptionfile" default="@{basedir}/Exceptions.xml" />
    <attribute name="lookupjar"
               default=""
               description="Load exception message from inside jar file. Use 'y' for true." />
    <sequential>
      <if>
        <isreference refid="libraries" />
        <then>
          <echo message="Using Libraries" />
          <java fork="true"
                failonerror="yes"
                classname="com.gip.xyna.utils.exceptions.ExceptionStorage">
            <classpath>
              <fileset dir="@{libdir}">
                <include name="**/*.jar" />
              </fileset>
              <path refid="libraries" />
            </classpath>
            <arg value="@{exceptionfile}" />
            <arg value="@{srcdir}" />
            <arg value="@{lookupjar}" />
          </java>
        </then>
        <else>
          <echo message="NOT using Libraries" />
          <java fork="true"
                failonerror="yes"
                classname="com.gip.xyna.utils.exceptions.ExceptionStorage">
            <classpath>
              <fileset dir="@{libdir}">
                <include name="**/*.jar" />
              </fileset>
            </classpath>
            <arg value="@{exceptionfile}" />
            <arg value="@{srcdir}" />
            <arg value="@{lookupjar}" />
          </java>
        </else>
      </if>
    </sequential>
  </macrodef>

    <!-- ================================= 
         macro: xynaTarget
         ================================= -->
    <macrodef name="xynaTarget">
        <attribute name="name" description="name des targets" />
        <attribute name="if" default="${xynaTarget.default}" description="dependencies und subtargets werden nur ausgefuehrt, falls if=true oder wert von if=true oder nicht angegeben                             achtung: das ist anders als das if= verhalten in einem normalen target." />
        <attribute name="unless" default="${xynaTarget.default}" description="dependencies und subelemente werden nur ausgefuehrt, falls if=false oder wert von if=false oder nicht angegeben                            achtung: das ist anders als das unless= verhalten in einem normalen target." />
        <attribute name="depends" default="" description="wie bei einem normalen target die kommaseparierte liste von abhaengigen targets" />
        <attribute name="inheritall" default="true" description="wirkt sich auf die dependency-aufrufe aus" />
        <attribute name="inheritrefs" default="true" description="wirkt sich auf die dependency-aufrufe aus" />
        <element name="sub-elements" implicit="yes" optional="true" />
        <sequential>
            <if>
                <or>
                    <and>
                        <or>
                            <equals arg1="@{if}" arg2="${xynaTarget.default}" />
                            <not>
                                <!-- includes ${@{if}} is not set -->
                                <equals arg1="${@{if}}" arg2="false" />
                            </not>
                        </or>
                        <or>
                            <!-- attribute 'unless' dont prohibits execution -->
                            <equals arg1="@{unless}" arg2="false" />
                            <equals arg1="${@{unless}}" arg2="false" />
                            <equals arg1="@{unless}" arg2="${xynaTarget.default}" />
                            <not>
                                <!-- includes ${@{unless}} is not set -->
                                <equals arg1="${@{unless}}" arg2="true" />
                            </not>
                        </or>
                    </and>
                    <!-- always execute if attribute 'if' has the value 'true' -->
                    <equals arg1="@{if}" arg2="true" />
                    <equals arg1="${@{if}}" arg2="true" />
                </or>
                <then>
                    <sub-elements />
                </then>
                <else>
                    <echo message="Target @{name} not executed, because necessary condition wasn't true." />
                </else>
            </if>
        </sequential>
    </macrodef>

    <!-- ================================= 
         macro: copyJar
         ================================= -->
    <macrodef name="copyJar">
        <attribute name="from"/>
        <attribute name="to"/>
        <sequential>
            <!-- <echo message="copyJar @{from} @{to}"/> -->
            <copy todir="@{to}">
                <fileset dir="@{from}" casesensitive="false" erroronmissingdir="false">
                    <include name="**/*.jar" />
                    <exclude name="xyna/**" />
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <!-- ================================= 
         macro: copyLicense 
         ================================= -->
    <macrodef name="copyLicense">
        <attribute name="from"/>
        <attribute name="to" />
        <sequential>
            <if>
                <matches pattern="\$\{.*\}" string="@{to}"/>
                <then>
                    <!-- <echo message="license dir @{to} is not set"/> -->
                </then>
                <else>
                    <!-- <echo message="copyLicense @{from} @{to}"/> -->
                    <exec executable="python3" inputstring="" outputproperty="errors" >
                        <arg value="${root.dir}/installation/build/copyLicenseFiles.py" />
                        <arg value="@{from}" />
                        <arg value="@{to}" />
                    </exec>
                </else>
            </if>
        </sequential>
    </macrodef>

    <!-- ================================= 
         macro: touchUnfreeJar
         ================================= -->
    <macrodef name="touchUnfreeJar">
        <attribute name="from"/>
        <attribute name="to"/>
        <sequential>
            <if>
                <available file="@{from}" />
                <then>
                    <echo message="touchUnfreeJar @{from} @{to}"/>
                    <touch mkdirs="true">
                        <fileset dir="@{from}" casesensitive="false" erroronmissingdir="false">
                            <include name="**/*.jar" />
                            <exclude name="xyna/*" />
                        </fileset>
                        <mapper type="package" from="*.jar" to="@{to}/UNFREE-*.jar.unfree"/>
                    </touch>
                </then>
            </if>
        </sequential>
    </macrodef>

    <!-- ================================= 
          macro: checkServerProperties
          ================================= -->
    <macrodef name="checkServerProperties">
        <sequential>
            <condition property="server.available">
                <and>
                    <isset property="server.host" />
                    <isset property="server.userid" />
                    <isset property="server.path" />
                </and>
            </condition>
        </sequential>
    </macrodef>

    <!-- ================================= 
          macro: javaCompile
          ================================= -->
    <macrodef name="javaCompile">
        <attribute name="encoding" default="iso8859-1" />
        <attribute name="srcdir" default="${basedir}/src" />
        <attribute name="destdir" default="${basedir}/classes" />
        <element name="javac-elements" implicit="yes"/>
        <sequential>
            <if>
                <equals arg1="${javacompile.version}" arg2="1.7" />
                <then>
                    <!-- <echo message="Compile 1.7"/> -->
                    <javac
                        executable="/opt/jdk1.7/bin/javac"
                        debug="on" includeantruntime="false" fork="yes"
                        encoding="@{encoding}" srcdir="@{srcdir}" destdir="@{destdir}">
                        <javac-elements />
                    </javac>
                </then>
                <else>
                    <!-- <echo message="Compile old"/> -->
                    <javac
                        debug="on" includeantruntime="false" fork="yes"
                        encoding="@{encoding}" srcdir="@{srcdir}" destdir="@{destdir}">
                        <javac-elements />
                    </javac>
                </else>
            </if>
        </sequential>
    </macrodef>

    <!-- ================================= 
      macro: custom-ssh-exec         
      ================================= -->
    <macrodef name="custom-ssh-exec">
        <attribute name="host" />
        <attribute name="username" />
        <attribute name="command" />
        <attribute name="outputproperty" default="_ssh.out" />
        <sequential>
            <if>
                <!-- exec into container -->
                <isset property="server.containername" />
                <then>
                    <exec executable="docker" failonerror="true">
                        <arg value="exec"/>
                        <arg value="-t"/>
                        <arg value="--user"/>
                        <arg value="@{username}"/>
                        <arg value="${server.containername}" />
                        <arg line="bash -c '@{command}'"/>
                        <redirector outputproperty="@{outputproperty}" />
                    </exec>
                </then>
                <elseif>
                <!-- authenticate with key -->
                <isset property="server.keyfile" />
                <then>
                    <sshexec host="@{host}" username="@{username}" command="@{command}" trust="true" failonerror="true" keyfile="${server.keyfile}" outputproperty="@{outputproperty}" />
                </then>
                </elseif>
                <!-- authenticate with password -->
                <else>
                    <sshexec host="@{host}" username="@{username}" command="@{command}" trust="true" failonerror="true" password="${server.password}" outputproperty="@{outputproperty}" />
                </else>
            </if>
        </sequential>
    </macrodef>

    <!-- ================================= 
      macro: custom-scp-to-remote        
      ================================= -->
    <macrodef name="custom-scp-to-remote">
        <attribute name="fromdir" />
        <attribute name="frominclude" />
        <attribute name="todir" />
        <sequential>
            <if>
                <!-- exec into container -->
                <isset property="server.containername" />
                <then>
                    <apply executable="docker">
                        <arg value="cp"/>
                        <srcfile/>
                        <arg value="${server.containername}:@{todir}" />
                        <fileset dir="@{fromdir}">
                            <include name="@{frominclude}" />
                        </fileset>
                    </apply>
                </then>
                <elseif>
                <isset property="server.keyfile" />
                <!-- authenticate with key -->
                <then>
                    <scp todir="@{todir}" trust="true" verbose="false" keyfile="${server.keyfile}">
                        <fileset dir="@{fromdir}">
                            <include name="@{frominclude}" />
                        </fileset>
                    </scp>
                </then>
                </elseif>
                <!-- authenticate with password -->
                <else>
                    <scp todir="@{todir}" trust="true" verbose="false" password="${server.password}">
                        <fileset dir="@{fromdir}">
                            <include name="@{frominclude}" />
                        </fileset>
                    </scp>
                </else>
            </if>
        </sequential>
    </macrodef>


    <!-- ================================= 
        macro: default-scp-to-remote        
        ================================= -->
    <macrodef name="default-scp-to-remote">
        <attribute name="fromdir" />
        <attribute name="frominclude" />
        <attribute name="todir" />
        <sequential>
            <if>
                <!-- exec into container -->
                <isset property="server.containername" />
                <then>
                    <custom-scp-to-remote fromdir="@{fromdir}" todir="@{todir}" frominclude="@{frominclude}" />
                </then>
                <!-- password or key -->
                <else>
                    <custom-scp-to-remote fromdir="@{fromdir}" todir="${server.userid}@${server.host}:@{todir}" frominclude="@{frominclude}" />
                </else>
            </if>
        </sequential>
    </macrodef>


    <!-- ================================= 
        macro: custom-scp-from-remote        
        ================================= -->
    <macrodef name="custom-scp-from-remote">
        <attribute name="fromFile" />
        <attribute name="todir" />
        <sequential>
            <local name="actualFrom" />
            <if>
                <!-- exec into container -->
                <isset property="server.containername" />
                <then>
                    <condition property="fromIsDirectory" else="false">
                      <matches pattern=".*\/\*$" string="@{fromFile}" />
                    </condition>
                    <if>
                      <equals arg1="${fromIsDirectory}" arg2="true" />
                      <then>
                        <property name="originalFromFile" value="@{fromFile}" />
                        <!-- replace * at the end with . to copy the content of a directory -->
                        <local name="command" />
                        <property name="command" value="echo @{fromFile} | sed 's/.$/./'" />
                        <custom-ssh-exec host="${server.host}" username="${server.userid}" command="${command}" outputproperty="actualFrom"/>
                        <echo message="updated actualFrom to ${actualFrom}" />
                      </then>
                      <else>
                        <property name="actualFrom" value="@{fromFile}" />
                      </else>
                    </if>
                    <exec executable="docker" failonerror="true">
                        <arg value="cp"/>
                        <arg value="${actualFrom}" />
                        <arg value="@{todir}" />
                    </exec>
                </then>
                <elseif>
                <isset property="server.keyfile" />
                <!-- authenticate with key -->
                <then>
                    <scp todir="@{todir}" file="@{fromFile}" trust="true" verbose="false" keyfile="${server.keyfile}" />
                </then>
                </elseif>
                <else>
                    <scp todir="@{todir}" file="@{fromFile}" trust="true" verbose="false" password="${server.password}" />
                </else>
            </if>
        </sequential>
    </macrodef>

    <!-- ================================= 
        macro: default-scp-from-remote        
        ================================= -->
    <macrodef name="default-scp-from-remote">
        <attribute name="fromFile" />
        <attribute name="todir" />
        <sequential>
            <if>
                <!-- exec into container -->
                <isset property="server.containername" />
                <then>
                    <custom-scp-from-remote fromFile="${server.containername}:@{fromFile}" todir="@{todir}" />
                </then>
                <!-- password or key -->
                <else>
                    <custom-scp-from-remote fromFile="${server.userid}@${server.host}:@{fromFile}" todir="@{todir}" />
                </else>
            </if>
        </sequential>
    </macrodef>

    <!-- ================================= 
        macro: supply-mdm-jar        
        ================================= -->
    <macrodef name="supply-mdm-jar">
        <attribute name="type" /> <!-- mdmimpl/trigger/filter -->
        <attribute name="name" /> <!-- name of ServiceGroup/trigger/filter -->
        <attribute name="libDir" default="lib/xyna"/>
        <attribute name="mdmLocation" default="mdm.jar" />
        <sequential>
        <copy todir="${basedir}/@{type}/@{name}/@{libDir}" >
          <fileset dir="${basedir}">
            <include name="@{mdmLocation}" />
          </fileset>
        </copy>
        </sequential>
    </macrodef>

    <!-- ================================= 
        macro: determine-workspace-revision
        ================================= -->
    <macrodef name="determine-revision">
        <attribute name="workspacename" />
        <attribute name="outputproperty" />
        <sequential>
            <local name="command" />
            <if>
                <matches pattern="^default workspace$" string="@{workspacename}"/>
                <then>
                    <property name="command" value="cd ${server.path}; echo workingset" />
                </then>
                <else>
                    <property name="command" value="cd ${server.path}; ./xynafactory.sh printrevision -workspaceName '@{workspacename}' | xargs echo -n" />
                </else>
            </if>
            <custom-ssh-exec host="${server.host}" username="${server.userid}" command="${command}" outputproperty="@{outputproperty}" />
            <echo message="determined revision for '@{workspacename}' to be ${@{outputproperty}}" />
        </sequential>
    </macrodef>

    <!-- ================================= 
        macro: install-maven-artifact
        ================================= -->
    <macrodef name="install-maven-artifact">
        <attribute name="artifactFile" />
        <attribute name="pomFile" />
        <sequential>
            <resolver:artifacts id="output">
                <artifact file="@{artifactFile}"/>
            </resolver:artifacts>
            <resolver:install artifactsref="output" >
                <pom file="@{pomFile}" />
            </resolver:install>
        </sequential>
    </macrodef>

    <!-- ================================= 
        macro: resolve
        ================================= -->
    <macrodef name="resolve">
        <attribute name="pomFile"/>
        <attribute name="dir"/>
        <attribute name="layout" default="{artifactId}-{classifier}-{version}.{extension}" />
        <attribute name="scopes" default="" />
        <sequential>
            <resolver:pom file="@{pomFile}" id="pom"/>
            <resolver:resolve>
                <resolver:dependencies pomRef="pom"/>
                <resolver:files refid="files" dir="@{dir}" layout="@{layout}" scopes="@{scopes}"/>
            </resolver:resolve>
        </sequential>
    </macrodef>
  
</project>
