<?xml version="1.0" encoding="UTF-8"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2022 GIP SmartMercial GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<project name="ant-xyna" basedir="." xmlns:resolver="antlib:org.apache.maven.resolver.ant">

  <!-- ! DO NOT EDIT THIS FILE !
       This source file is generated by Xyna
       Version: 2.3.2.0
   -->

  <tstamp>
    <format property="timestamp" pattern="yyyyMMdd_HHmm" locale="de,DE" />
  </tstamp>

  <tstamp>
    <format property="timestamp.long"
            pattern="yyyyMMdd_HHmmssSS"
            locale="de,DE" />
  </tstamp>

  <condition property="root" value="/" else="I:\">
    <os family="unix" />
  </condition>

  <property environment="env" />
  <property name="jdev.home" value="${root}/opt/jdeveloper/" />

  <condition property="oracle.home"
             value="${jdev.home}"
             else="${env.ORACLE_HOME}">
    <available file="${jdev.home}" />
  </condition>

  <condition property="bpel.home"
             value="${oracle.home}/integration/bpel"
             else="${oracle.home}/bpel">
    <available file="${jdev.home}" />
  </condition>

  <property name="FLEX_HOME" value="${root}/opt/common/flex_sdk" />

  <!-- needed for sqlplus -->
  <condition property="nls_lang"
             value="${env.NLS_LANG}"
             else="GERMAN_GERMANY.WE8ISO8859P15">
    <isset property="${env.NLS_LANG}" />
  </condition>

  <!-- classpath of oc4j libraries -->
  <path id="classpath.oc4j">
    <fileset dir="${oracle.home}">
      <include name="j2ee/home/lib/*.jar" />
      <include name="lib/*.jar" />
      <include name="jdbc/lib/*.jar" />
      <include name="integration/lib/*.jar" />
      <include name="bpel/lib/*.jar" />
      <include name="webservices/lib/*.jar" />
      <include name="opmn/lib/*.jar" />
      <include name="ant/lib/*.jar" />
    </fileset>
  </path>

  <property name="admin_client.jar"
            value="${oracle.home}/j2ee/home/admin_client.jar" />

  <path id="classpath.junit">
    <fileset dir="${root}/opt/common">
      <include name="apache-ant-1.7.0/lib/junit*.jar" />
    </fileset>
  </path>

  <condition property="findbugs.home" value="${root}/opt/common/findbugs-1.3.2">
    <available file="${root}/opt/common/findbugs-1.3.2" />
  </condition>

  <condition property="findbugs.executable">
    <and>
      <isset property="findbugs.home" />
      <available file="${findbugs.home}/lib/findbugs.jar" />
    </and>
  </condition>

  <path id="classpath.findbugs">
    <fileset dir="${root}/opt/common/findbugs-1.3.2/lib">
      <include name="*.jar" />
    </fileset>
  </path>

  <property name="cobertura.home" value="${root}/opt/common/cobertura-1.9.3" />

  <condition property="cobertura.available">
    <available file="${cobertura.home}" />
  </condition>

  <path id="classpath.cobertura">
    <fileset dir="${cobertura.home}">
      <include name="cobertura.jar" />
      <include name="lib/**/*.jar" />
    </fileset>
  </path>

  <path id="classpath.ant">
    <fileset dir="${root}/opt/common">
      <include name="apache-ant-1.7.0/lib/*.jar" />
    </fileset>
  </path>

  <property name="xynaTarget.default" value="notset" />

  <property name="vendor.name" value="GIP AG" />

  <condition property="isInstall" value="true" else="false">
    <not>
      <available file="${ant.file.ant-xyna}/../build.xml" />
    </not>
  </condition>

  <condition property="isOracleAS" value="true" else="false">
    <isset property="as.port.opmn" />
  </condition>

  <property name="install.lib.dir" value="${ant.file.ant-xyna}/../lib" />

  <!-- remove filename/.. from path because sqlplus dont accepts it -->
  <pathconvert property="sql.dir">
    <path>
      <dirset dir="${ant.file.ant-xyna}/..">
        <include name="sql" />
      </dirset>
    </path>
  </pathconvert>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${install.lib.dir}/ant-contrib.jar" />
    </classpath>
  </taskdef>

  <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
    <classpath>
      <pathelement location="${install.lib.dir}/ant-contrib.jar" />
    </classpath>
  </taskdef>

  <taskdef name="var" classname="net.sf.antcontrib.property.Variable">
    <classpath>
      <pathelement location="${install.lib.dir}/ant-contrib.jar" />
    </classpath>
  </taskdef>

  <taskdef name="propertyregex"
           classname="net.sf.antcontrib.property.RegexTask">
    <classpath>
      <pathelement location="${install.lib.dir}/ant-contrib.jar" />
    </classpath>
  </taskdef>

  <if>
    <and>
      <not>
        <equals arg1="${isInstall}" arg2="true" />
      </not>
      <isset property="cobertura.available" />
    </and>
    <then>
      <taskdef resource="tasks.properties" classpathref="classpath.cobertura" />
    </then>
  </if>

  <!-- = = = = = = = = = = = = = = = = =
            macrodef: checkProperty          
           = = = = = = = = = = = = = = = = = -->
  <macrodef name="checkProperty"
            description="Check if the specific property is set, fail if not.">
    <attribute name="name" />
    <sequential>
      <fail message="Property @{name} is not set!">
        <condition>
          <not>
            <isset property="@{name}" />
          </not>
        </condition>
      </fail>
    </sequential>
  </macrodef>

  <!--  <taskdef resource="flexUnitTasks.tasks"
           classpath="${install.lib.dir}/flexUnitTasks-4.0.0.jar" />-->

  <if>
    <equals arg1="${isInstall}" arg2="true" />
    <then>
      <property file="${ant.file.ant-xyna}/../patch.properties" />
    </then>
    <else>
      <property file="${ant.file.ant-xyna}/../../delivery/patch.properties" />
    </else>
  </if>

  <!-- macro for executing a command plattform independent -->
  <macrodef name="execute">
    <attribute name="executable"/>
    <element name="args" implicit="yes"/>
    <sequential>
      <exec osfamily="windows" executable="cmd" outputproperty="exec.output">
        <arg value="/c"/>
        <arg value="@{executable}"/>
        <args/>
      </exec>
      <exec osfamily="unix" executable="@{executable}" outputproperty="exec.output">
        <args/>
      </exec>
      <echo message="${exec.output}" />
    </sequential>
  </macrodef>
  
  <!-- Maven Resolver Ant Task - http://maven.apache.org/resolver-ant-tasks/ -->
  <taskdef uri="antlib:org.apache.maven.resolver.ant" resource="org/apache/maven/resolver/ant/antlib.xml">
    <classpath>
      <fileset dir="${install.lib.dir}" includes="maven-resolver-ant-tasks-*uber.jar"/>
    </classpath>
  </taskdef>

  <condition property="mavenSettingFile" value="${user.home}/mavenSettings.xml" else="${ant.file.ant-xyna}/../defaultMavenSettings.xml">
    <available file="${user.home}/mavenSettings.xml" />
  </condition>

  <resolver:settings file="${mavenSettingFile}"/>

  <!-- TODO switch on current os-family and only contain one? -->
  <resolver:remoterepos id="xyna.repository">
    <remoterepo refid="xyna.repository.win"/>
    <remoterepo refid="xyna.repository.unix"/>
    <remoterepo refid="central.maven.repository"/>
  </resolver:remoterepos>

  <!-- macro for downloading license files -->
  <macrodef name="loadLicenses">
    <attribute name="targetDir"/>
    <sequential>
      <exec osfamily="windows" executable="cmd" outputproperty="exec.output">
        <arg value="/c"/>
        <arg value="mvn"/>
        <arg value="-s" />
        <arg value="${mavenSettingFile}" />
        <arg value="license:download-licenses" />
        <arg value="-DlicensesOutputDirectory=@{targetDir}" />
        <arg value="-DlicensesOutputFile=@{targetDir}\licenses.xml" />
        <arg value="-Dorg.slf4j.simpleLogger.log.org.codehaus.mojo.license=debug" />
        <!--arg value="-Dlicense.organizeLicensesByDependencies=true" /-->
      </exec>
      <exec osfamily="unix" executable="mvn" outputproperty="exec.output">
        <arg value="-s" />
        <arg value="${mavenSettingFile}" />
        <arg value="license:download-licenses" />
        <arg value="-DlicensesOutputDirectory=@{targetDir}" />
        <arg value="-DlicensesOutputFile=@{targetDir}/licenses.xml" />
        <!--arg value="-Dlicense.organizeLicensesByDependencies=true" /-->
      </exec>
      <echo message="${exec.output}" />
    </sequential>
  </macrodef>


  <!-- = = = = = = = = = = = = = = = = =
                macrodef: copyLibraryToAntLib          
               = = = = = = = = = = = = = = = = = -->
  <macrodef name="copyLibraryToAntLib"
            description="Copy given library to ${user.home}/.ant/lib if it is not already there. Also checks for different versions of the library">
    <attribute name="library"
               description="Library name without jar suffix and version number" />
    <sequential>
      <var name="jarfile.fullname" unset="true" />
      <pathconvert property="jarfile.fullname">
        <mapper type="flatten" />
        <fileset dir="${install.lib.dir}">
          <include name="@{library}*.jar" />
        </fileset>
      </pathconvert>
      <if>
        <not>
          <available file="${user.home}/.ant/lib/${jarfile.fullname}" />
        </not>
        <then>
          <!-- remove all other version of the library -->
          <delete failonerror="false">
            <fileset dir="${user.home}/.ant/lib">
              <include name="@{library}*.jar" />
            </fileset>
          </delete>
          <copy todir="${user.home}/.ant/lib">
            <fileset dir="${install.lib.dir}">
              <include name="${jarfile.fullname}" />
            </fileset>
          </copy>
          <fail message="Library ${jarfile.fullname} needed for ant execution was missing. Library copyied to ${user.home}/.ant/lib. Please restart script." />
        </then>
      </if>
    </sequential>
  </macrodef>

  <!-- = = = = = = = = = = = = = = = = =
                macrodef: prepareInstall          
               = = = = = = = = = = = = = = = = = -->
  <macrodef name="prepareInstall"
            description="Copy all needed libraries to ${user.home}/.ant/lib">
    <sequential>
      <!-- Oracle -->
      <if>
        <equals arg1="${isOracleAS}" arg2="true" />
        <then>
          <path id="missing.install.libs">
            <fileset id="fileset.install.libs"
                     dir="${install.lib.dir}"
                     includes="*.jar">
              <present targetdir="${user.home}/.ant/lib" present="srconly" />
            </fileset>
            <fileset id="fileset.oc4j.install.libs" dir="${oracle.home}">
              <present targetdir="${user.home}/.ant/lib" present="srconly">
                <mapper type="flatten" />
              </present>
              <include name="j2ee/home/oc4jclient.jar" />
              <include name="j2ee/home/lib/ejb.jar" />
              <include name="bpel/lib/orabpel-common.jar" />
              <include name="bpel/lib/orabpel.jar" />
              <include name="bpel/lib/orabpel-thirdparty.jar" />
              <include name="opmn/lib/optic.jar" />
            </fileset>
          </path>

          <pathconvert property="list.missing.install.libs" pathsep=" ">
            <mapper type="flatten" />
            <path refid="missing.install.libs" />
          </pathconvert>

          <copy todir="${user.home}/.ant/lib" flatten="true">
            <fileset refid="fileset.install.libs" />
            <fileset refid="fileset.oc4j.install.libs" />
          </copy>

          <fail message="Libraries needed for ant execution are missing. Libraries are copyied to ${user.home}/.ant/lib. Please restart script.">
            <condition>
              <not>
                <equals arg1="${list.missing.install.libs}" arg2="" />
              </not>
            </condition>
          </fail>
        </then>
      </if>
      <!-- sshexec and scp -->
      <if>
        <isset property="install.ant.jsch" />
        <then>
          <copyLibraryToAntLib library="jsch" />
        </then>
      </if>
    </sequential>
  </macrodef>

  <if>
    <equals arg1="${isInstall}" arg2="true" />
    <then>
      <loadproperties srcfile="${ant.file.ant-xyna}/../install.properties" />

      <exec executable="hostname" outputproperty="server.hostname" />
      <loadproperties srcfile="/etc/xyna/environment/${server.hostname}.properties" />
      <loadproperties srcfile="/etc/xyna/environment/black_edition_001.properties" />
      <loadproperties srcfile="/etc/xyna/environment/${delivery.name}.properties" />

      <prepareInstall />

      <taskdef name="xmltask"
               classname="com.oopsconsultancy.xmltask.ant.XmlTask">
        <classpath>
          <pathelement location="${install.lib.dir}/xmltask-v1.15.1.jar" />
        </classpath>
      </taskdef>
    </then>
  </if>


  <if>
    <equals arg1="${isInstall}" arg2="false" />
    <then>
      <taskdef resource="com/gip/xyna/utils/build/antlib.xml">
        <classpath>
          <pathelement location="${install.lib.dir}/xynautils-build-2.3.2.0.jar" /> 
        </classpath>
      </taskdef>
    </then>
  </if>

  <if>
    <equals arg1="${isInstall}" arg2="true" />
    <then>
      <if>
        <equals arg1="${isOracleAS}" arg2="true" />
        <then>
          <typedef resource="com/gip/xyna/utils/ant/xynautils-ant.properties">
            <classpath>
              <pathelement location="${install.lib.dir}/xynautils-ant-I20110915_1541.jar" />
            </classpath>
          </typedef>
        </then>
        <else>
          <typedef name="storeBlob"
                   classname="com.gip.xyna.utils.install.db.oracle.StoreBlob">
            <classpath>
              <pathelement location="${install.lib.dir}/xynautils-ant-I20110915_1541.jar" />
              <!--<pathelement location="${install.lib.dir}/ojdbc14.jar" />-->
            </classpath>
          </typedef>
          <typedef name="persistencelayerinstance"
                   classname="com.gip.xyna.utils.install.xyna.black.PersistenceLayerInstance">
            <classpath>
              <pathelement location="${install.lib.dir}/xynautils-ant-I20110915_1541.jar" />
              <fileset dir="${installation.folder}/server/lib">
                <include name="**/*.jar" />
              </fileset>
            </classpath>
          </typedef>
        </else>
      </if>

      <taskdef resource="com/gip/xyna/utils/install/antlib.xml">
        <classpath>
          <pathelement location="${install.lib.dir}/xynautils-install-2.3.2.0.jar" />
        </classpath>
      </taskdef>
    </then>
  </if>

  <!-- =================================
         target: update
       ================================= -->
  <target name="update"
          description="Updates installation sequentially from old version to new version.
                       Calls install-ear, install-workflow, install-routing from install.xml">
    <getVersion tag="as" result="as.version" />
    <if>
      <equals arg1="${release.number}" arg2="${as.version}" />
      <then>
        <echo message="This applicationserver has already been updated to version ${as.version}." />
      </then>
      <else>
        <echo message="Start sequential update." />
        <updateSequential update.dir="${ant.file.ant-xyna}/../update" />
        <echo message="Finished sequential update." />
        <ant dir="${ant.file.ant-xyna}/../.."
             antfile="install.xml"
             target="install-ear" />
        <getVersion tag="db" result="db.version" />
        <if>
          <equals arg1="${release.number}" arg2="${db.version}" />
          <then>
            <echo message="Workflows won't be deployed because the database has 
                           already been updated to version ${db.version}." />
          </then>
          <else>
            <ant dir="${ant.file.ant-xyna}/../.."
                 antfile="install.xml"
                 target="install-workflow" />
          </else>
        </if>
        <ant dir="${ant.file.ant-xyna}/../.."
             antfile="install.xml"
             target="install-routing" />
      </else>
    </if>
    <echo message="Update complete." />
  </target>

</project>
