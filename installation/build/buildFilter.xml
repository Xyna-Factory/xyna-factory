<?xml version="1.0" encoding="UTF-8"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2022 GIP SmartMercial GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 -->
<!-- CAUTION: Do not attempt to launch any target from here. Launch them from build.xml instead. -->
<project name="buildFilter" default="deploy" basedir="." xmlns:resolver="antlib:org.apache.maven.resolver.ant">

    <import file="./macros.xml" />
    <import file="./ant-xyna.xml" />

    <property name="exception.xml.dir" value="${root.dir}/server" />
    <property name="base.lib.dir" value="${basedir}/lib" />
    <!--<property name="additional.lib.dir" /> (nur zum Kompilieren nötig) kann gesetzt werden, muss aber nicht -->
    <!--<property name="unfree.lib.dir" /> (unfreie Libs, die zum Kompilieren und Ausführen nötig sind) kann gesetzt werden, muss aber nicht -->
    <property name="target.dir" value="${basedir}/deploy" />

    <property file="${basedir}/server.properties" />
    <property file="${root.dir}/server.properties" />

    <!-- depends on server make use of server variable -->
    <property name="server.mdm.path" value="${server.path}/${revision.dir}/filter/${mdm.xml.name}" />
    <property name="server.mdm.xml.path" value="${server.path}/${revision.dir}/saved/filter/${mdm.xml.name}" />
    <property name="server.mdm.xml.filename" value="${mdm.xml.filename}" />
    <property name="local.xml.dir" value="${basedir}/xmldefinition" />

    <property name="deploy.sharedlibs" value=":" />
    <pathconvert targetos="unix" property="deploy.jars">
        <path>
            <pathelement location="./lib/${mdm.xml.name}.jar" />
            <fileset dir="${basedir}/lib">
                <include name="*.jar" />
            </fileset>
        </path>

        <map from="${basedir}/lib" to="${revision.dir}/filter/${mdm.xml.name}" />
    </pathconvert>
    <property name="deploy.template" value="addfilter -sharedLibs ${deploy.sharedlibs} -jarFiles ${deploy.jars} -triggerName ${trigger.name} -filterName ${filter.name} -workspaceName '${workspacename}' -fqClassName ${fqclassname}" />

    <resolver:pom file="${basedir}/pom.xml" id="pom"/>

    <checkJavaVersion />
    <checkServerProperties />

    <condition property="exceptions.available">
        <available file="${basedir}/Exceptions.xml" />
    </condition>

    <target name="build-app" description="Build for application">
        <antcall target="build">
            <param name="target.dir" value="${target.dir}/filter/${project.name}" />
        </antcall>
        <copyLicense from="${base.lib.dir}" to="${target.dir}/third_parties" />
    </target>

    <!-- ================================= 
               target: resolve             
          =================================  -->
      <target name="resolve">
        <resolver:resolve>
          <resolver:dependencies pomRef="pom"/>
          <resolver:remoterepos refid="xyna.repository"/>
          <resolver:files refid="files" dir="${base.lib.dir}/xyna" layout="{artifactId}-{classifier}-{version}.{extension}"/>
          <resolver:files refid="files" dir="${base.lib.dir}" layout="{artifactId}-{classifier}-{version}.{extension}" scopes="runtime"/>
        </resolver:resolve>
        <loadLicenses targetDir="${base.lib.dir}" />
        <!-- delete generated-resources ? -->
      </target>

    <!-- ================================= 
         target: prepareLibs             
         ================================= -->
    <target name="prepareLibs" description="Prepare libs">
        <!-- leer, überschreibbar im build.xml -->
    </target>

    <!-- ================================= 
         target: deploy             
         ================================= -->
    <!-- CAUTION: Do not attempt to launch this from here. Launch from build.xml instead. -->
    <target name="deploy" depends="build" description="Deploy jar file to xyna server.">
        <fail message="No server properties specified. Unable to deploy." unless="server.available" />
        <!-- clean directory on xyna server -->
        <!--<custom-ssh-exec host="${server.host}" username="${server.userid}"  command="rm -rf ${server.mdm.path}" /> -->
        <!-- create directory on xyna server -->
        <custom-ssh-exec host="${server.host}" username="${server.userid}"  command="mkdir -p ${server.mdm.path}" />
        
        <!-- copy xml file to server -->
        <if>
            <equals arg1="${server.transmitXml}" arg2="yes" />
            <then>
                <echo message="Copying XML file ${local.xml.dir}/${server.mdm.xml.filename} to server" />
                <custom-scp-to-remote fromdir="${local.xml.dir}" frominclude="${server.mdm.xml.filename}" todir="${server.userid}${server.host}:${server.mdm.xml.path}" />
            </then>
        </if>
        <!-- copy libraries and licences to xyna server -->
        <custom-scp-to-remote fromdir="${target.dir}" frominclude="**/*" todir="${server.userid}@${server.host}:${server.mdm.path}" />
        <!-- deploy datatype -->
        <custom-ssh-exec host="${server.host}" username="${server.userid}"  command="cd ${server.path}; ./xynafactory.sh ${deploy.template}" trust="true" />
       </target>

    <!-- ================================= 
           target: build             
          ================================= -->
    <!-- CAUTION: Do not attempt to launch this from here. Launch from build.xml instead. -->
    <target name="build" depends="cleanup, resolve, prepareLibs, genExceptionClass" description="Build jar file with java implementation of services.">
        <mkdir dir="${basedir}/classes" />
        <javaCompile>
            <classpath path="${basedir}/classes" />
            <classpath refid="libraries" />
            <classpath>
                <fileset dir="${base.lib.dir}">
                    <include name="**/*.jar" />
                </fileset>
            </classpath>
        </javaCompile>
        <mkdir dir="${target.dir}" />
        <if>
            <available file="${base.lib.dir}/xyna/serviceDefinition.jar" />
            <then>
                <unzip src="${base.lib.dir}/xyna/serviceDefinition.jar" dest="${basedir}/tmp" />
                <copy todir="${basedir}/classes">
                    <fileset dir="${basedir}/tmp">
                        <include name="**/*.class" />
                    </fileset>
                </copy>
                <delete dir="${basedir}/tmp" />
            </then>
        </if>

        <jar destfile="${target.dir}/${project.name}.jar">
            <manifest>
                <attribute name="Vendor" value="${vendor.name}" />
                <attribute name="Version" value="${release.number}" />
                <attribute name="Build-Date" value="${timestamp}" />
            </manifest>
            <fileset dir="${basedir}/classes">
                <include name="**/*.class" />
            </fileset>
            <fileset dir="${basedir}">
                <include name="Exceptions.xml" />
            </fileset>
            <fileset dir="${basedir}/src">
                <include name="**/*.xml" />
            </fileset>
        </jar>

        <!-- copy libraries to target.dir -->
        <copyJar from="${base.lib.dir}" to="${target.dir}" />
        <copyLicense from="${base.lib.dir}" to="${target.dir}" />

        <copy todir="${target.dir}">
            <fileset dir="${local.xml.dir}">
                <include name="${server.mdm.xml.filename}" />
            </fileset>
        </copy>
    </target>

    <!-- ================================= 
          target: updateMDMandXynaFactoryJar
         ================================= -->
    <!-- CAUTION: Do not attempt to launch this from here. Launch from build.xml instead. -->
    <target name="updateMDMandXynaFactoryJar" description="Receive new mdm.jar and xynafactory.jar from Xyna Factory">
        <fail message="No server properties specified. Unable to deploy." unless="server.available" />
        <!-- build mdm.jar -->
        <custom-ssh-exec host="${server.host}" username="${server.userid}"  command="cd ${server.path}; ./xynafactory.sh buildmdmjar -workspaceName '${workspacename}' -r" />
        
        <!-- copy mdm.jar from xyna server -->
        <custom-scp-from-remote fromfile="${server.userid}@${server.host}:${server.path}/mdm.jar" todir="${base.lib.dir}/xyna" />
        <!-- copy xynafactory.jar from xyna server -->
        <custom-scp-from-remote fromfile="${server.userid}@${server.host}:${server.path}/lib/xynafactory.jar" todir="${common.xyna.lib.dir}" />
    </target>

    <!-- ================================= 
       target: genExceptionClass
       ================================= -->
    <!-- CAUTION: Do not attempt to launch this from here. Launch from build.xml instead. -->
    <target name="genExceptionClass" description="Generate code class for exceptions." if="${exceptions.available}">
        <java fork="true" failonerror="yes" classname="com.gip.xyna.utils.exceptions.ExceptionStorage">
            <sysproperty key="BLACK_SERVER_HOME" value="${exception.xml.dir}" />
            <classpath refid="libraries" />
            <classpath>
                <fileset dir="${base.lib.dir}">
                    <include name="**/*.jar" />
                </fileset>
            </classpath>
            <arg value="Exceptions.xml" />
            <arg value="${basedir}/src" />
            <arg value="y" />
        </java>
    </target>

    <!-- ================================= 
       target: cleanup
       ================================= -->
    <target name="cleanup">
        <delete dir="${target.dir}" failonerror="false" />
        <delete dir="${basedir}/classes" />
    </target>

</project>
