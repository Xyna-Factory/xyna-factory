<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2022 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" Label="Counter Service" TypeName="CounterService" TypePath="xdev.xtestfactory.infrastructure.services.counter" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>true</IsServiceGroupOnly>
  </Meta>
  <Service Label="Counter Service" TypeName="CounterService">
    <Operation IsStatic="true" Label="Get Counter From Database" Name="getCounterFromDatabase">
      <Input>
        <Data Label="Counter Name" ReferenceName="CounterName" ReferencePath="xdev.xtestfactory.util" VariableName="counterName"/>
        <Data Label="Workspacename" ReferenceName="Workspacename" ReferencePath="xdev.xtestfactory.infrastructure.datatypes" VariableName="workspacename"/>
      </Input>
      <Output>
        <Data Label="Counter" ReferenceName="Counter" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="counter"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//counterName, workspacename

final Logger logger = CentralFactoryLogging.getLogger(CounterService.class);

com.gip.xyna.xnwh.persistence.ODSConnection con = com.gip.xyna.xnwh.persistence.ODSImpl.getInstance().openConnection();
List &lt; Counter &gt; list = new ArrayList &lt; Counter &gt; ();

com.gip.xyna.xnwh.persistence.Parameter params = new com.gip.xyna.xnwh.persistence.Parameter();
params.add(workspacename.getWorkspacename());
params.add(counterName.getName());

try {
    con = com.gip.xyna.xnwh.persistence.ODSImpl.getInstance().openConnection();

    //String sqlstring = "SELECT * FROM TESTCASE WHERE NAME LIKE '%braun%'";
    String sqlstring = "SELECT counter.id,counter.name,counter.nextvalue,counter.increment,counter.description FROM testproject LEFT JOIN reflistcounter ON testproject.id = reflistcounter.parentuid LEFT JOIN counter ON reflistcounter.reference = counter.id WHERE workspacereference = ? AND counter.name = ?";

    com.gip.xyna.xnwh.persistence.ResultSetReader &lt; Counter &gt; reader = new com.gip.xyna.xnwh.persistence.ResultSetReader &lt; Counter &gt; () {
        @Override
        public Counter read(java.sql.ResultSet rs) throws java.sql.SQLException {

            Counter counter = new Counter();
            counter.setID(rs.getLong("counter.id"));
            counter.setName(rs.getString("counter.name"));
            counter.setNextValue(rs.getLong("counter.nextvalue"));
            counter.setIncrement(rs.getLong("counter.increment"));
            counter.setDescription(rs.getString("counter.description"));
            return counter;
        }
    };

    com.gip.xyna.xnwh.persistence.PreparedQuery &lt; Counter &gt; pq =
        con.prepareQuery(new com.gip.xyna.xnwh.persistence.Query &lt; Counter &gt; (sqlstring, reader));

    list.addAll(con.query(pq, params, 1 ,reader));


} catch (com.gip.xyna.xnwh.persistence.PersistenceLayerException e) {
    throw new RuntimeException("Could not access persistence layer",e);
}

try {
    con.closeConnection();
} catch (com.gip.xyna.xnwh.persistence.PersistenceLayerException e) {
    logger.debug("Persistence Layer Exception", e);
}

if (list.size() == 0) {
   throw new RuntimeException("Counter not found!");
}
if (list.size() &gt; 1) {
   throw new RuntimeException("Counter name not unique for this TestProject!");
}
return list.get(0);</CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
