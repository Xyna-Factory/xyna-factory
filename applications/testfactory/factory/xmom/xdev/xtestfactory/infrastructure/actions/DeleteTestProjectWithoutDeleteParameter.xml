<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2022 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<Service xmlns="http://www.gip.com/xyna/xdev/xfractmod" ID="1" Label="Delete Test Project Without Delete Parameter" TypeName="DeleteTestProjectWithoutDeleteParameter" TypePath="xdev.xtestfactory.infrastructure.actions" Version="1.8">
  <Meta>
    <FixedDetailOptions>hideDetailAreas,highDetailsMode</FixedDetailOptions>
  </Meta>
  <Operation ID="0" Label="Delete Test Project Without Delete Parameter" Name="DeleteTestProjectWithoutDeleteParameter">
    <Input>
      <Data ID="3" Label="Test Project" ReferenceName="TestProject" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testProject">
        <Target RefID="142"/>
      </Data>
    </Input>
    <Output/>
    <Throws>
      <Exception Label="XMOM Storable Access Exception" ReferenceName="XMOMStorableAccessException" ReferencePath="xnwh.persistence" VariableName="xMOMStorableAccessException"/>
    </Throws>
    <ServiceReference ID="141" Label="Delete Test Project" ReferenceName="DeleteTestProject" ReferencePath="xdev.xtestfactory.infrastructure.actions">
      <Source RefID="142"/>
      <Target RefID="142"/>
    </ServiceReference>
    <Function ID="142" Label="Delete Test Project">
      <Source RefID="141"/>
      <Source RefID="3"/>
      <Source RefID="150"/>
      <Target RefID="141"/>
      <Invoke Operation="DeleteTestProject" ServiceID="141">
        <Source RefID="3"/>
        <Source RefID="150">
          <Meta>
            <LinkType>Constant</LinkType>
          </Meta>
        </Source>
      </Invoke>
      <Receive ServiceID="141"/>
    </Function>
    <Data ID="150" Label="Delete parameter" ReferenceName="DeleteParameter" ReferencePath="xnwh.persistence" VariableName="deleteParameter105">
      <Target RefID="142"/>
      <Data Label="Including history" VariableName="includingHistory">
        <Meta>
          <Type>boolean</Type>
        </Meta>
        <Value>true</Value>
      </Data>
      <Data Label="Reference handling" ReferenceName="ReferenceHandling" ReferencePath="xnwh.persistence" VariableName="referenceHandling">
        <Data Label="Backward" VariableName="backward">
          <Meta>
            <Type>String</Type>
            <Documentation>-„cascade“: Alle XMOM Storables, die ein zu löschendes XMOM Storable referenzieren, werden ebenso gelöscht. Rekursiv
-„error“: Default. Fehler, falls eine solche Abhängigkeit festgestellt wird
-„delete“: Das Objekt wird entfernt. Andere XMOM Storables, die dieses Objekt referenzieren, referenzieren es jetzt nicht mehr, sind aber noch funktionstüchtig.</Documentation>
          </Meta>
          <Value>delete</Value>
        </Data>
        <Data Label="Forward" VariableName="forward">
          <Meta>
            <Type>String</Type>
            <Documentation>-„recursive“: Alle abhängigen XMOM Storables rekursiv löschen. Dabei wird jeweils auch das Verhalten für Rückwärtsreferenzen beachtet.
-„keep“: Referenzierte Objekte werden nicht gelöscht sondern bleiben bestehen</Documentation>
          </Meta>
          <Value>recursive</Value>
        </Data>
      </Data>
    </Data>
    <Assign ID="2"/>
  </Operation>
</Service>
