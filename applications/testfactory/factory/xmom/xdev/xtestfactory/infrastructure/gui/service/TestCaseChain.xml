<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 * Copyright 2022 Xyna GmbH, Germany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<DataType xmlns="http://www.gip.com/xyna/xdev/xfractmod" Label="Test Case Chain" TypeName="TestCaseChain" TypePath="xdev.xtestfactory.infrastructure.gui.service" Version="1.8">
  <Meta>
    <IsServiceGroupOnly>true</IsServiceGroupOnly>
  </Meta>
  <Service Label="Test Case Chain" TypeName="TestCaseChain">
    <Operation ID="114" IsStatic="true" Label="Add Order Id To Test Case Instance" Name="addOrderIdToTestCaseInstance">
      <Meta>
        <Abstract.UID>5CB99695-4328-382A-4CB9-909237F5A3AC</Abstract.UID>
      </Meta>
      <Input>
        <Data ID="112" Label="Test Case Instance" ReferenceName="TestCaseInstance" ReferencePath="xdev.xtestfactory.infrastructure.datatypes" VariableName="testCaseInstance"/>
      </Input>
      <Output>
        <Data ID="113" Label="Test Case Instance" ReferenceName="TestCaseInstance" ReferencePath="xdev.xtestfactory.infrastructure.datatypes" VariableName="testCaseInstance114"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//(testCaseInstance);
com.gip.xyna.xprc.xfractwfe.base.ChildOrderStorage.ChildOrderStorageStack coss = com.gip.xyna.xprc.xfractwfe.base.ChildOrderStorage.childOrderStorageStack.get();
testCaseInstance.setOrderID(String.valueOf(coss.getCorrelatedXynaOrder().getId()));
return testCaseInstance;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="1" IsStatic="true" Label="Check For Client Implementation" Name="checkForClientImplementation">
      <Meta>
        <Abstract.UID>0B93DC89-60CC-8AED-8EE7-D79BC0EB055A</Abstract.UID>
      </Meta>
      <Input/>
      <Output>
        <Data ID="0" Label="Client Implementation" ReferenceName="ClientImplementation" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="clientImplementation"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">ClientImplementation ci = new ClientImplementation();
ci.setExist(false);

XynaOrderServerExtension order = com.gip.xyna.xprc.xfractwfe.base.ChildOrderStorage.childOrderStorageStack.get().getCorrelatedXynaOrder();
long parentRevision = order.getRootOrder().getRevision();

if (com.gip.xyna.XynaFactory.getInstance().getFactoryManagement()
    .getXynaFactoryControl().getRuntimeContextDependencyManagement().getRevisionDefiningXMOMObject("client.ClientImplementationForFollowupTestCases", parentRevision) != null) {
  ci.setExist(true);
  return ci;  
}
return ci;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="89" IsStatic="true" Label="Check For Name Collision" Name="checkForNameCollision">
      <Meta>
        <Abstract.UID>5943D6F5-1F38-8183-1280-53246149D59F</Abstract.UID>
      </Meta>
      <Input>
        <Data ID="86" Label="Test Case" ReferenceName="TestCase" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testCase"/>
        <Data ID="87" Label="Test Case Chain" ReferenceName="TestCaseChain" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testCaseChain"/>
      </Input>
      <Output>
        <Data ID="88" Label="Test Case" ReferenceName="TestCase" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testCase486"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//(testCase, testCaseChain);

List&lt;TestCaseInstance&gt; tci_list = new ArrayList&lt;TestCaseInstance&gt;();
tci_list.addAll(testCaseChain.getTestCaseInstance());

List&lt;TestCase&gt; tc_list = new ArrayList&lt;TestCase&gt; ();

for (TestCaseInstance tci : tci_list) {
  tc_list.add(tci.getTestCase());
}

int counter = 0;
for (TestCase tc : tc_list) {
  if (tc.getName().contains(testCase.getName())) {
    counter++;      
  }
}
if (counter == 0) {
  return testCase;
} else {
  String s = testCase.getName();
  testCase.setName(s + String.valueOf(counter));
  return testCase;
}</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="79" IsStatic="true" Label="Check For Test Object In Test Case Instances" Name="checkForTestObjectInTestCaseInstances">
      <Meta>
        <Abstract.UID>CCF7C034-4519-44E9-710B-FAA4AD56AB99</Abstract.UID>
      </Meta>
      <Input>
        <Data ID="76" IsList="true" Label="Test Case Instance" ReferenceName="TestCaseInstance" ReferencePath="xdev.xtestfactory.infrastructure.datatypes" VariableName="testCaseInstance"/>
        <Data ID="77" Label="Test Object" ReferenceName="TestObject" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testObject"/>
      </Input>
      <Output>
        <Data ID="78" Label="True Or False" ReferenceName="TrueOrFalse" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="trueOrFalse"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//(testCaseInstance, testObject)

TrueOrFalse tof = new TrueOrFalse();
Boolean b = false;


for (TestCaseInstance element : testCaseInstance) {

  if (element.getTestObject().getId() == testObject.getId()) {
    b = true;
    break;
  }

}

tof.setValue(b);
return tof;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="4" IsStatic="true" Label="Create Test Object Instance" Name="createTestObjectInstance">
      <Input>
        <Data ID="2" Label="Text" ReferenceName="Text" ReferencePath="base" VariableName="text"/>
      </Input>
      <Output>
        <Data ID="3" Label="Test Object" ReferenceName="TestObject" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testObject"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//(text);
//Create Test Obejct Instance
XynaOrderServerExtension order = com.gip.xyna.xprc.xfractwfe.base.ChildOrderStorage.childOrderStorageStack.get().getCorrelatedXynaOrder();
long parentRevision = order.getRootOrder().getRevision();

long revision = com.gip.xyna.XynaFactory.getInstance().getFactoryManagement()
    .getXynaFactoryControl().getRuntimeContextDependencyManagement().getRevisionDefiningXMOMObject(text.getText(), parentRevision);

try {
  String className = com.gip.xyna.xprc.xfractwfe.generation.GenerationBase.transformNameForJava(text.getText());
  return (TestObject) XynaObject.instantiate(className, true, revision);
} catch (Exception e) {
  throw new RuntimeException(e);
}</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="7" IsStatic="true" Label="Exclude Invalid Workspaces" Name="excludeInvalidWorkspaces">
      <Meta>
        <Abstract.UID>A4511FF8-6FB5-759B-28D7-B32F06E6C322</Abstract.UID>
      </Meta>
      <Input>
        <Data ID="5" IsList="true" Label="Test Project" ReferenceName="TestProject" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testProject"/>
      </Input>
      <Output>
        <Data ID="6" IsList="true" Label="Test Project" ReferenceName="TestProject" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testProject66"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//return xdev.xtestfactory.infrastructure.gui.service.TestCaseChainImpl.excludeInvalidWorkspaces(testProject);

com.gip.xyna.xfmg.xfctrl.workspacemgmt.WorkspaceManagement wm = com.gip.xyna.XynaFactory.getInstance().getFactoryManagement().getXynaFactoryControl().getWorkspaceManagement();
List&lt;com.gip.xyna.xfmg.xfctrl.appmgmt.WorkspaceInformation&gt; list = wm.listWorkspaces(false);
List&lt;String&gt; workspaceNames = new ArrayList&lt;String&gt;();
List&lt;TestProject&gt; cleanedTestProjects = new ArrayList&lt;TestProject&gt;();

for (com.gip.xyna.xfmg.xfctrl.appmgmt.WorkspaceInformation wi : list) {
  workspaceNames.add(wi.getWorkspace().getName());
}

for (TestProject tp : testProject) {
  //workspaceNames.add(tp.getWorkspaceReference());
  if (workspaceNames.contains(tp.getWorkspaceReference())) {
    cleanedTestProjects.add(tp);
  }
}

return cleanedTestProjects;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="13" IsStatic="true" Label="Extract Unique Test Objects" Name="extractUniqueTestObjects">
      <Input>
        <Data ID="11" IsList="true" Label="Test Object" ReferenceName="TestObject" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testObject"/>
      </Input>
      <Output>
        <Data ID="12" IsList="true" Label="Test Object" ReferenceName="TestObject" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testObject2"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//Extract Unique Test Objects

HashSet&lt;TestObject&gt; hs = new HashSet&lt;TestObject&gt;();
List&lt;TestObject&gt; to = new ArrayList&lt;TestObject&gt;();

for(TestObject teob : testObject){
   hs.add(teob);
}

for(TestObject entry : hs){
   to.add(entry);
}
return to;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="122" IsStatic="true" Label="Get Non-Null Values" Name="getNonNullValues">
      <Input>
        <Data ID="119" IsList="true" Label="Table Column" ReferenceName="TableColumn" ReferencePath="xmcp.tables.datatypes" VariableName="tableColumn"/>
        <Data ID="120" IsList="true" Label="Initial Test Case Entry" ReferenceName="InitialTestCaseEntry" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="initialTestCaseEntry"/>
      </Input>
      <Output>
        <Data ID="121" IsList="true" Label="Table Column" ReferenceName="TableColumn" ReferencePath="xmcp.tables.datatypes" VariableName="tableColumn2"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//tableColumn, initialTestCaseEntry

java.util.Map &lt;Integer, TableColumn&gt; tableColumnOrderMap= new java.util.TreeMap&lt;Integer, TableColumn&gt;();

boolean add = false;
String path;
Object obj = null;
int found_true = 0;
int found_false = 0;
int counter = 0;

//Merke ursprüngliche Reihenfolge der Columns

for (InitialTestCaseEntry itce: initialTestCaseEntry) {

   counter = 0;

	for (TableColumn tc: tableColumn) {


		try {
			path = tc.getPath();
		} catch(RuntimeException e) {
			throw new RuntimeException("Path value is not set!");
		}

		try {
			if (itce.get(path) != null) {
				obj = itce.get(path);
			}
			else {
				continue;
			}
		} catch(InvalidObjectPathException e) {
			throw new RuntimeException(e);
		}

		if (obj != null) {
			if (obj instanceof Integer &amp;&amp; obj.equals(0)) {
				continue;
			}
			else if (obj instanceof Double &amp;&amp; obj.equals(0d)) {
				continue;
			}
           else if (obj instanceof Boolean) {
               if ((Boolean) obj) {
                 found_true = 1;
               } else {
                 found_false = 1; 
               }
               // Object wird angezeigt, wenn es sowohl False als auch True Werte gibt
               if (found_true + found_false == 2) {
                 add = true;
               }
			}
			else if (obj instanceof Long &amp;&amp; obj.equals(0L)) {
				continue;
			} else {
				add = true;
			}
		}
		if (add) {
			add = false;
			tableColumnOrderMap.put(counter, tc);
		}

   counter++;

	}
}

List &lt; TableColumn &gt; newTableColumn = new ArrayList &lt; TableColumn &gt;(tableColumnOrderMap.values());

return newTableColumn;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="111" IsStatic="true" Label="Get User Name" Name="getUserName" RequiresXynaOrder="true">
      <Meta>
        <Abstract.UID>B782D197-60C2-CF89-0786-C2A6AEB5E29B</Abstract.UID>
      </Meta>
      <Input/>
      <Output>
        <Data ID="110" Label="Text" ReferenceName="Text" ReferencePath="base" VariableName="text"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//return xdev.xtestfactory.infrastructure.gui.service.TestCaseChainImpl.getUserName(correlatedXynaOrder);
base.Text text = new base.Text();

text.setText(com.gip.xyna.XynaFactory.getInstance().getFactoryManagement().getXynaOperatorControl().getSessionManagement().resolveSessionToUser(com.gip.xyna.xprc.xfractwfe.base.ChildOrderStorage.childOrderStorageStack.get().getCorrelatedXynaOrder().getSessionId()));
return text;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="144" IsStatic="true" Label="Get Xyna Property For XTF" Name="getXynaPropertyForXTF">
      <Input>
        <Data ID="142" Label="Xyna Property Name" ReferenceName="Text" ReferencePath="base" VariableName="text"/>
      </Input>
      <Output>
        <Data ID="143" Label="Xyna Property Value" ReferenceName="Text" ReferencePath="base" VariableName="text3"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//return Impl.newService(text);

base.Text ret = new base.Text();
String name = text.getText();
String val = com.gip.xyna.XynaFactory.getInstance().getFactoryManagement().getProperty(name);
ret.setText(val);
return ret;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation IsStatic="true" Label="Query On Test Cases" Name="queryOnTestCases">
      <Meta>
        <Abstract.UID>18F0D792-7EE2-46AE-64E8-911943696322</Abstract.UID>
      </Meta>
      <Input>
        <Data IsList="true" Label="Table Column" ReferenceName="TableColumn" ReferencePath="xmcp.tables.datatypes" VariableName="tableColumn"/>
        <Data Label="Test Project Id" ReferenceName="Text" ReferencePath="base" VariableName="text"/>
        <Data Label="Xyna Property Value" ReferenceName="Text" ReferencePath="base" VariableName="text131"/>
      </Input>
      <Output>
        <Data IsList="true" Label="Test Case" ReferenceName="TestCase" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testCase"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//return xdev.xtestfactory.infrastructure.gui.service.TestCaseChainImpl.queryOnTestCases(tableColumn, text, text131);

// TODO: Use default query inside workflow. Build parameters for this query with the use of zeta-services (which do the sorting and filtering in a unified manner).

final Logger logger = CentralFactoryLogging.getLogger(TestCaseChain.class);

com.gip.xyna.xnwh.persistence.ODSConnection con = null;
java.util.Map &lt; String, String &gt; colNames = new java.util.HashMap &lt; &gt; (); //tableinfo-spaltenname =&gt; datenbank-spaltenname
List &lt; TestCase &gt; list = new ArrayList &lt; TestCase &gt; ();
java.lang.StringBuilder sb = new java.lang.StringBuilder();
int numTestCasesOnDisplay = Integer.valueOf(text131.getText());

colNames.put("name", "testcase.name");
colNames.put("description", "testcase.description");
colNames.put("priority", "testcase.priority");
colNames.put("author", "user.name");
colNames.put("responsibleUser", "user1.name");
colNames.put("type", "testcase.testType");

com.gip.xyna.xnwh.persistence.Parameter params = new com.gip.xyna.xnwh.persistence.Parameter();
params.add(text.getText());

for (TableColumn cols: tableColumn) {

    if (cols.getFilter() != null &amp;&amp; cols.getFilter() != "") {

        sb.append(" AND " + colNames.get(cols.getPath()) + " LIKE ?");
        String filter = cols.getFilter();
        if (filter.indexOf("*") &gt;= 0) {
            filter = filter.replace("*", "%");
            params.add(filter);
        } else {
            params.add("%" + filter + "%");
        }
    }

}

for (TableColumn cols: tableColumn) {

    if (cols.getSort() != null &amp;&amp; cols.getSort() != "") {
        if (!sb.toString().contains("ORDER BY")) {
            sb.append(" ORDER BY ");
        } else {
            sb.append(", ");
        }

        sb.append(colNames.get(cols.getPath()));
        if (cols.getSort().equals("dsc")) {
            sb.append(" DESC");
        }
    }
}




try {
    con = com.gip.xyna.xnwh.persistence.ODSImpl.getInstance().openConnection();

    try {

        String sqlstring = "SELECT * FROM testproject JOIN reflisttestcase ON testproject.id = reflisttestcase.parentuid JOIN testcase ON reflisttestcase.reference = testcase.id LEFT JOIN user ON testcase.id = user.parentuid LEFT JOIN user1 ON testcase.id = user1.parentuid WHERE testproject.id = ? ";
        com.gip.xyna.xnwh.persistence.ResultSetReader &lt; TestCase &gt; reader = new com.gip.xyna.xnwh.persistence.ResultSetReader &lt; TestCase &gt; () {
            @Override
            public TestCase read(java.sql.ResultSet rs) throws java.sql.SQLException {

                TestCase tp = new TestCase();
            //Test Case Entry needs Author, Description, ID, Load, Load Count, Name, Priority, Rate, Rate Duration, Responsible User, Type
                xfmg.xopctrl.User author = new xfmg.xopctrl.User();
                author.setName(rs.getString("user.name"));
                tp.setAuthor(author);
                tp.setDescription(rs.getString("testcase.description"));
                tp.setID(rs.getLong("testcase.id"));
                tp.setMassLoad(rs.getInt("testcase.massload"));
                tp.setTaskCount(rs.getString("testcase.taskcount"));
                tp.setName(rs.getString("testcase.name"));
                tp.setPriority(rs.getInt("testcase.priority"));
                tp.setMassRate(rs.getDouble("testcase.massrate"));
                tp.setDuration(rs.getInt("testcase.duration"));
                xfmg.xopctrl.User responsibleUser = new xfmg.xopctrl.User();
                responsibleUser.setName(rs.getString("user1.name"));
                tp.setResponsibleUser(responsibleUser);
                tp.setTestType(rs.getString("testcase.testtype"));
                return tp;
            }
        };

        sqlstring += sb.toString();
        com.gip.xyna.xnwh.persistence.PreparedQuery &lt; TestCase &gt; pq =
            con.prepareQuery(new com.gip.xyna.xnwh.persistence.Query &lt; TestCase &gt; (sqlstring, reader));

        list.addAll(con.query(pq, params, numTestCasesOnDisplay ,reader));

    } finally {
        con.closeConnection();
    }

} catch (com.gip.xyna.xnwh.persistence.PersistenceLayerException e) {
    logger.debug("Persistence Layer Exception", e);
}

return list;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="85" IsStatic="true" Label="Remove Test Cases From Project" Name="removeTestCasesFromProject">
      <Meta>
        <Abstract.UID>2182A0C8-BBF4-4310-A25F-4E41AB5DF285</Abstract.UID>
      </Meta>
      <Input>
        <Data ID="82" IsList="true" Label="Test Case" ReferenceName="TestCase" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testCase"/>
        <Data ID="83" IsList="true" Label="Test Case" ReferenceName="TestCase" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testCase87"/>
      </Input>
      <Output>
        <Data ID="84" IsList="true" Label="Test Case" ReferenceName="TestCase" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testCase88"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//(testCase, testCase87);
List&lt;TestCase&gt; list = new ArrayList&lt;TestCase&gt;();

List&lt;Integer&gt; id_list = new ArrayList&lt;Integer&gt;();

for (TestCase tc87 : testCase87) {

  id_list.add((int)tc87.getID());

}

for (TestCase tc : testCase) {

  if (!id_list.contains((int)tc.getID())) {
  
      list.add(tc);

  }

}

return list;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="136" IsStatic="true" Label="Set Planning Workflow" Name="setPlanningWorkflow">
      <Input>
        <Data ID="135" Label="Test Case" ReferenceName="TestCase" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testCase"/>
      </Input>
      <Output/>
      <SourceCode>
        <CodeSnippet Type="Java">String reference = testCase.getTestProcessReference();
com.gip.xyna.xfmg.xods.orderinputsourcemgmt.storables.OrderInputSourceStorable ois =
 new com.gip.xyna.xfmg.xods.orderinputsourcemgmt.storables.OrderInputSourceStorable();
com.gip.xyna.xfmg.xods.orderinputsourcemgmt.OrderInputSourceManagement management =
 com.gip.xyna.XynaFactory.getInstance().getFactoryManagement().getXynaFactoryManagementODS().getOrderInputSourceManagement();
XynaOrderServerExtension order = com.gip.xyna.xprc.xfractwfe.base.ChildOrderStorage.childOrderStorageStack.get().getCorrelatedXynaOrder();
long sourceRevision = order.getRootOrder().getRevision();

try {
 ois = management.getInputSourceByName(sourceRevision, reference, true);
 if (ois == null &amp;&amp;
  !reference.equals(reference.trim())) {
  ois = management.getInputSourceByName(sourceRevision, reference.trim(), true);
 }
} catch (com.gip.xyna.xnwh.persistence.PersistenceLayerException e) {
 throw new RuntimeException(e);
}


com.gip.xyna.xprc.xpce.dispatcher.DestinationValue dv = new com.gip.xyna.xprc.xpce.dispatcher.FractalWorkflowDestination("xdev.xtestfactory.infrastructure.services.TestFactoryPlanning", sourceRevision);

try {
 com.gip.xyna.XynaFactory.getInstance().getProcessing().getXynaProcessCtrlExecution().getXynaPlanning().getPlanningDispatcher()
  .setCustomDestination(ois.getDestinationKey(), dv);
} catch (com.gip.xyna.xnwh.persistence.PersistenceLayerException e) {
 throw new RuntimeException("Error setting planningworkflow for ordertype: ", e);
}</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="97" IsStatic="true" Label="Sort And Filter Initial Test Case Entry" Name="sortAndFilterInitialTestCaseEntry">
      <Input>
        <Data ID="94" IsList="true" Label="Table Column" ReferenceName="TableColumn" ReferencePath="xmcp.tables.datatypes" VariableName="tableColumn"/>
        <Data ID="95" IsList="true" Label="Initial Test Case Entry" ReferenceName="InitialTestCaseEntry" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="initialTestCaseEntry"/>
      </Input>
      <Output>
        <Data ID="96" IsList="true" Label="Initial Test Case Entry" ReferenceName="InitialTestCaseEntry" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="initialTestCaseEntry3"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//(tableColumn, InitialTestCaseEntry);

List &lt; InitialTestCaseEntry &gt; tmp = new ArrayList &lt; InitialTestCaseEntry &gt; ();
String filter;
String path;
boolean add = true;
List &lt; String &gt; sort = new ArrayList &lt; String &gt; ();
base.Text text = new base.Text();

for (InitialTestCaseEntry to: initialTestCaseEntry) {


    for (TableColumn tc: tableColumn) {
        add = true;
        filter = tc.getFilter();
        path = tc.getPath();

        if (filter == null || filter == "") {
            add = true;
            continue;
        }
        try {
            if (String.valueOf(to.get(path)).contains(filter)) {
                add = true;
                continue;
            } else {
                add = false;
                break;
            }
        } catch (Exception e) {
            text.setText(e.toString());
        }
    }

    if (add) {
        tmp.add(to);
    }

}

initialTestCaseEntry = new ArrayList &lt; InitialTestCaseEntry &gt; (tmp);
tmp.clear();

//Sortieren

String sortedColumnTmp = "testCaseName";
boolean ascTmp = true;
for (TableColumn tc: tableColumn) {
    if (tc.getSort() != null) {
        sortedColumnTmp = tc.getPath();
        ascTmp = tc.getSort().equals("asc");
        break;
    }
}
final String sortedColumn = sortedColumnTmp;
final boolean asc = ascTmp;
java.util.Comparator &lt; InitialTestCaseEntry &gt; comparator = new java.util.Comparator &lt; InitialTestCaseEntry &gt; () {

    public int compare(InitialTestCaseEntry e1, InitialTestCaseEntry e2) {

        Object value = getValue(e1);
        Object value2 = getValue(e2);

        if (value == null) {
            if (value2 == null) {
                return 0;
            }
            return 1;
        } else if (value2 == null) {
            return -1;
        }
        if (value instanceof Comparable) {
            String vs = value.toString();
            String vs2 = value2.toString();
            return vs.compareToIgnoreCase(vs2) * (asc ? 1 : -1);
        } else {
            throw new RuntimeException("unsupported type: " + value.getClass().getName());
        }
    }

    private Object getValue(InitialTestCaseEntry e) {
        try {
            return e.get(sortedColumn);
        } catch (Exception f) {
          throw new RuntimeException("invalid sortedColumn: " + sortedColumn, f);
        }
    }

};

java.util.Collections.sort(initialTestCaseEntry, comparator);

return initialTestCaseEntry;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="109" IsStatic="true" Label="Sort And Filter Test Case Chain Entry" Name="sortAndFilterTestCaseChainEntry">
      <Meta>
        <Abstract.UID>C165E533-0C89-2013-F089-5397CF5D5871</Abstract.UID>
      </Meta>
      <Input>
        <Data ID="106" IsList="true" Label="Table Column" ReferenceName="TableColumn" ReferencePath="xmcp.tables.datatypes" VariableName="tableColumn"/>
        <Data ID="107" IsList="true" Label="Test Case Chain Entry" ReferenceName="TestCaseChainEntry" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="testCaseChainEntry"/>
      </Input>
      <Output>
        <Data ID="108" IsList="true" Label="Test Case Chain Entry" ReferenceName="TestCaseChainEntry" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="testCaseChainEntry1405"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//(tableColumn, testCaseChainEntry);

List &lt; TestCaseChainEntry &gt; tmp = new ArrayList &lt; TestCaseChainEntry &gt; ();
String filter;
String path;
boolean add = true;
List &lt; String &gt; sort = new ArrayList &lt; String &gt; ();
base.Text text = new base.Text();

for (TestCaseChainEntry to: testCaseChainEntry) {


    for (TableColumn tc: tableColumn) {
        add = true;
        filter = tc.getFilter();
        path = tc.getPath();

        if (filter == null || filter == "") {
            add = true;
            continue;
        }
        try {
            if (String.valueOf(to.get(path)).contains(filter)) {
                add = true;
                continue;
            } else {
                add = false;
                break;
            }
        } catch (Exception e) {
            text.setText(e.toString());
        }
    }

    if (add) {
        tmp.add(to);
    }

}

testCaseChainEntry = new ArrayList &lt; TestCaseChainEntry &gt; (tmp);
tmp.clear();

//Sortieren

String sortedColumnTmp = "name";
boolean ascTmp = true;
for (TableColumn tc: tableColumn) {
    if (tc.getSort() != null) {
        sortedColumnTmp = tc.getPath();
        ascTmp = tc.getSort().equals("asc");
        break;
    }
}
final String sortedColumn = sortedColumnTmp;
final boolean asc = ascTmp;
java.util.Comparator &lt; TestCaseChainEntry &gt; comparator = new java.util.Comparator &lt; TestCaseChainEntry &gt; () {

    public int compare(TestCaseChainEntry e1, TestCaseChainEntry e2) {

        Object value = getValue(e1);
        Object value2 = getValue(e2);

        if (value == null) {
            if (value2 == null) {
                return 0;
            }
            return 1;
        } else if (value2 == null) {
            return -1;
        }
        if (value instanceof Comparable) {
            String vs = value.toString();
            String vs2 = value2.toString();
            return vs.compareToIgnoreCase(vs2) * (asc ? 1 : -1);
        } else {
            throw new RuntimeException("unsupported type: " + value.getClass().getName());
        }
    }

    private Object getValue(TestCaseChainEntry e) {
        try {
            return e.get(sortedColumn);
        } catch (Exception f) {
          throw new RuntimeException("invalid sortedColumn: " + sortedColumn, f);
        }
    }

};

java.util.Collections.sort(testCaseChainEntry, comparator);

return testCaseChainEntry;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="93" IsStatic="true" Label="Sort And Filter Test Case Entries" Name="sortAndFilterTestCaseEntries">
      <Input>
        <Data ID="90" IsList="true" Label="Table Column" ReferenceName="TableColumn" ReferencePath="xmcp.tables.datatypes" VariableName="tableColumn"/>
        <Data ID="91" IsList="true" Label="Test Case Entry" ReferenceName="TestCaseEntry" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="testCaseEntry"/>
      </Input>
      <Output>
        <Data ID="92" IsList="true" Label="Test Case Entry" ReferenceName="TestCaseEntry" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="testCaseEntry2"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//tableColumn, testCaseEntry

//return xdev.xtestfactory.infrastructure.gui.service.TestCaseChainImpl.sortAndFilterTestObjects(testObject, tableColumn);

List &lt; TestCaseEntry &gt; tmp = new ArrayList &lt; TestCaseEntry &gt; ();
String filter;
String path;
boolean add = true;
List &lt; String &gt; sort = new ArrayList &lt; String &gt; ();
base.Text text = new base.Text();

for (TestCaseEntry to: testCaseEntry) {


    for (TableColumn tc: tableColumn) {
        add = true;
        filter = tc.getFilter();
        path = tc.getPath();

        if (filter == null || filter == "") {
            add = true;
            continue;
        }
        try {
            if (String.valueOf(to.get(path)).contains(filter)) {
                add = true;
                continue;
            } else {
                add = false;
                break;
            }
        } catch (Exception e) {
            text.setText(e.toString());
        }
    }

    if (add) {
        tmp.add(to);
    }

}

testCaseEntry = new ArrayList &lt; TestCaseEntry &gt; (tmp);
tmp.clear();

//Sortieren

String sortedColumnTmp = "name";
boolean ascTmp = true;
for (TableColumn tc: tableColumn) {
    if (tc.getSort() != null) {
        sortedColumnTmp = tc.getPath();
        ascTmp = tc.getSort().equals("asc");
        break;
    }
}
final String sortedColumn = sortedColumnTmp;
final boolean asc = ascTmp;
java.util.Comparator &lt; TestCaseEntry &gt; comparator = new java.util.Comparator &lt; TestCaseEntry &gt; () {

    public int compare(TestCaseEntry e1, TestCaseEntry e2) {

        Object value = getValue(e1);
        Object value2 = getValue(e2);

        if (value == null) {
            if (value2 == null) {
                return 0;
            }
            return 1;
        } else if (value2 == null) {
            return -1;
        }
        if (value instanceof Comparable) {
            String vs = value.toString();
            String vs2 = value2.toString();
            return vs.compareToIgnoreCase(vs2) * (asc ? 1 : -1);
        } else {
            throw new RuntimeException("unsupported type: " + value.getClass().getName());
        }
    }

    private Object getValue(TestCaseEntry e) {
        try {
            return e.get(sortedColumn);
        } catch (Exception f) {
          throw new RuntimeException("invalid sortedColumn: " + sortedColumn, f);
        }
    }

};

java.util.Collections.sort(testCaseEntry, comparator);

return testCaseEntry;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="101" IsStatic="true" Label="Sort And Filter Test Case Instances" Name="sortAndFilterTestCaseInstances">
      <Input>
        <Data ID="98" IsList="true" Label="Test Case Instance Entry" ReferenceName="TestCaseInstanceEntry" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="testCaseInstanceEntry"/>
        <Data ID="99" IsList="true" Label="Table Column" ReferenceName="TableColumn" ReferencePath="xmcp.tables.datatypes" VariableName="tableColumn"/>
      </Input>
      <Output>
        <Data ID="100" IsList="true" Label="Test Case Instance Entry" ReferenceName="TestCaseInstanceEntry" ReferencePath="xdev.xtestfactory.infrastructure.gui.datatypes" VariableName="testCaseInstanceEntry2"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//return xdev.xtestfactory.infrastructure.services.SortAndFilterTestCaseInstancesImpl.sortAndFilter(testCaseInstanceEntry375, tableColumn412);
//Sort And Filter Test Case Instances
List&lt;TestCaseInstanceEntry&gt; tmp = new ArrayList&lt;TestCaseInstanceEntry&gt;();
List&lt;String&gt; filter = new ArrayList&lt;String&gt;();
List&lt;String&gt; sort = new ArrayList&lt;String&gt;();
//Filtern

for (TableColumn tc : tableColumn) {
  filter.add(tc.getFilter());
}

for (TestCaseInstanceEntry tcie : testCaseInstanceEntry) {
  if (filter.get(0) == null) {
    filter.set(0, "");
  }
  if(tcie.getTestCaseName().contains(filter.get(0))){
    tmp.add(tcie);
  }
}
testCaseInstanceEntry = new ArrayList&lt;TestCaseInstanceEntry&gt;(tmp);
tmp.clear();

for (TestCaseInstanceEntry tcie : testCaseInstanceEntry) {
  if (filter.get(1) == null) {
    filter.set(1, "");
  }
  if(tcie.getStatus().contains(filter.get(1))){
    tmp.add(tcie);
  }
}
testCaseInstanceEntry = new ArrayList&lt;TestCaseInstanceEntry&gt;(tmp);
tmp.clear();

for (TestCaseInstanceEntry tcie : testCaseInstanceEntry) {
  if (filter.get(2) == null) {
    filter.set(2, "");
  }
  if(tcie.getAuthor().contains(filter.get(2))){
    tmp.add(tcie);
  }
}
testCaseInstanceEntry = new ArrayList&lt;TestCaseInstanceEntry&gt;(tmp);
tmp.clear();

for (TestCaseInstanceEntry tcie : testCaseInstanceEntry) {
  if (filter.get(3) == null) {
    filter.set(3, "");
  }
  Long l = tcie.getTestObjectId();
  String s = String.valueOf(l);
  if(s.contains(filter.get(3))){
    tmp.add(tcie);
  }
}
testCaseInstanceEntry = new ArrayList&lt;TestCaseInstanceEntry&gt;(tmp);
tmp.clear();

//Sortieren

String sortedColumnTmp = "testCaseName";
boolean ascTmp = true;
for (TableColumn tc : tableColumn) {
  if (tc.getSort() != null) {
    sortedColumnTmp = tc.getPath();
    ascTmp = tc.getSort().equals("asc");
    break;
  }
}
final String sortedColumn = sortedColumnTmp;
final boolean asc = ascTmp;
java.util.Comparator&lt;TestCaseInstanceEntry&gt; comparator = new java.util.Comparator&lt;TestCaseInstanceEntry&gt;() {

  public int compare(TestCaseInstanceEntry e1, TestCaseInstanceEntry e2){
   
     Object value = getValue(e1);
     Object value2 = getValue(e2);

     if (value == null) {
       if (value2 == null) {
          return 0;
       }
       return 1;
     } else if (value2 == null) {
       return -1;
     }
     if (value instanceof Comparable) {
       String vs = value.toString();
       String vs2 = value2.toString();
       return vs.compareToIgnoreCase(vs2) * (asc ? 1 : -1);
     } else {
       throw new RuntimeException("unsupported type: " + value.getClass().getName());
     }
  }

  private Object getValue(TestCaseInstanceEntry e) {
    try{
    return e.get(sortedColumn);
    } catch(Exception f) {
      throw new RuntimeException("invalid sortedColumn: " + sortedColumn, f);
    }
  }

};

java.util.Collections.sort(testCaseInstanceEntry, comparator);

return testCaseInstanceEntry;</CodeSnippet>
      </SourceCode>
    </Operation>
    <Operation ID="105" IsStatic="true" Label="Sort And Filter Test Objects" Name="sortAndFilterTestObjects">
      <Meta>
        <Abstract.UID>88E14E02-05B1-8684-77A5-BE25724E02A6</Abstract.UID>
      </Meta>
      <Input>
        <Data ID="102" IsList="true" Label="Test Object" ReferenceName="TestObject" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testObject"/>
        <Data ID="103" IsList="true" Label="Table Column" ReferenceName="TableColumn" ReferencePath="xmcp.tables.datatypes" VariableName="tableColumn"/>
      </Input>
      <Output>
        <Data ID="104" IsList="true" Label="Test Object" ReferenceName="TestObject" ReferencePath="xdev.xtestfactory.infrastructure.storables" VariableName="testObject24"/>
      </Output>
      <SourceCode>
        <CodeSnippet Type="Java">//return xdev.xtestfactory.infrastructure.gui.service.TestCaseChainImpl.sortAndFilterTestObjects(testObject, tableColumn);

List &lt; TestObject &gt; tmp = new ArrayList &lt; TestObject &gt; ();
String filter;
String path;
boolean add = true;
List &lt; String &gt; sort = new ArrayList &lt; String &gt; ();
base.Text text = new base.Text();

for (TestObject to: testObject) {


    for (TableColumn tc: tableColumn) {
        add = true;
        filter = tc.getFilter();
        path = tc.getPath();

        if (filter == null || filter == "") {
            add = true;
            continue;
        }
        try {
            if (String.valueOf(to.get(path)).contains(filter)) {
                add = true;
                continue;
            } else {
                add = false;
                break;
            }
        } catch (Exception e) {
            text.setText(e.toString());
        }
    }

    if (add) {
        tmp.add(to);
    }

}

testObject = new ArrayList &lt; TestObject &gt; (tmp);
tmp.clear();

//Sortieren

String sortedColumnTmp = "id";
boolean ascTmp = true;
for (TableColumn tc: tableColumn) {
    if (tc.getSort() != null) {
        sortedColumnTmp = tc.getPath();
        ascTmp = tc.getSort().equals("asc");
        break;
    }
}
final String sortedColumn = sortedColumnTmp;
final boolean asc = ascTmp;
java.util.Comparator &lt; TestObject &gt; comparator = new java.util.Comparator &lt; TestObject &gt; () {

    public int compare(TestObject e1, TestObject e2) {

        Object value = getValue(e1);
        Object value2 = getValue(e2);

        if (value == null) {
            if (value2 == null) {
                return 0;
            }
            return 1;
        } else if (value2 == null) {
            return -1;
        }
        if (value instanceof Comparable) {
            String vs = value.toString();
            String vs2 = value2.toString();
            return vs.compareToIgnoreCase(vs2) * (asc ? 1 : -1);
        } else {
            throw new RuntimeException("unsupported type: " + value.getClass().getName());
        }
    }

    private Object getValue(TestObject e) {
        try {
            return e.get(sortedColumn);
        } catch (Exception f) {
          throw new RuntimeException("invalid sortedColumn: " + sortedColumn, f);
        }
    }

};

java.util.Collections.sort(testObject, comparator);

return testObject;</CodeSnippet>
      </SourceCode>
    </Operation>
  </Service>
</DataType>
